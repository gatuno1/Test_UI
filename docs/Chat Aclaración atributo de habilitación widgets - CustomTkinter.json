{
  "requesterUsername": "gatuno1",
  "requesterAvatarIconUri": {
    "$mid": 1,
    "path": "/u/8146845",
    "scheme": "https",
    "authority": "avatars.githubusercontent.com",
    "query": "v=4"
  },
  "responderUsername": "GitHub Copilot",
  "responderAvatarIconUri": {
    "id": "copilot"
  },
  "initialLocation": "panel",
  "requests": [
    {
      "requestId": "request_c631e49a-4bd4-4994-9000-bc47f480066a",
      "message": {
        "text": "Utilízala La herramienta MCP Para obtener el ID de la librería de código fuente CustomTkinter",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 93
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 94
            },
            "text": "Utilízala La herramienta MCP Para obtener el ID de la librería de código fuente CustomTkinter",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": [
          {
            "kind": "file",
            "id": "vscode.implicit.viewport",
            "name": "file:Especificaciones_UI.md",
            "value": {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\Antonio\\gitrepos\\Test_UI_v3\\docs\\Especificaciones_UI.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/Antonio/gitrepos/Test_UI_v3/docs/Especificaciones_UI.md",
                "path": "/c:/Users/Antonio/gitrepos/Test_UI_v3/docs/Especificaciones_UI.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 550,
                "startColumn": 128,
                "endLineNumber": 577,
                "endColumn": 1
              }
            },
            "modelDescription": "User's current visible code"
          }
        ]
      },
      "response": [
        {
          "value": "Te ayudo a obtener el ID de la librería CustomTkinter usando la herramienta MCP Context7. ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/c:/Users/Antonio/gitrepos/Test_UI_v3/",
            "scheme": "file"
          }
        },
        {
          "kind": "prepareToolInvocation",
          "toolName": "mcp_context7_resolve-library-id"
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": {
            "value": "Ejecutando `resolve-library-id`",
            "isTrusted": false,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "pastTenseMessage": {
            "value": "Se ejecutó `resolve-library-id` ",
            "isTrusted": false,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "originMessage": {
            "value": "[Servidor MCP: context7](command:workbench.mcp.showConfiguration?%255B%2522mcp.config.usrlocal%2522%252C%2522mcp.config.usrlocal.context7%2522%255D)",
            "isTrusted": true,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "isConfirmed": true,
          "isComplete": true,
          "resultDetails": {
            "input": "{\n  \"libraryName\": \"CustomTkinter\"\n}",
            "output": [
              {
                "isText": true,
                "value": "Available Libraries (top matches):\n\nEach result includes:\n- Library ID: Context7-compatible identifier (format: /org/project)\n- Name: Library or package name\n- Description: Short summary\n- Code Snippets: Number of available code examples\n- Trust Score: Authority indicator\n- Versions: List of versions if available. Use one of those versions if and only if the user explicitly provides a version in their query.\n\nFor best results, select libraries based on name match, trust score, snippet coverage, and relevance to your use case.\n\n----------\n\n- Title: CustomTkinter\n- Context7-compatible library ID: /tomschimansky/customtkinter\n- Description: A modern and customizable python UI-library based on Tkinter\n- Code Snippets: 3\n- Trust Score: 8.7\n----------\n- Title: Lightspeed X-Series API\n- Context7-compatible library ID: /context7/x-series-api_lightspeedhq_com-reference-listcustomers\n- Description: The Lightspeed X-Series API provides programmatic access to manage retail operations, including customers, products, sales, and inventory, for Lightspeed POS systems.\n- Code Snippets: 6354\n----------\n- Title: GitHub Copilot Customization\n- Context7-compatible library ID: /context7/code_visualstudio\n- Description: Learn to customize GitHub Copilot's AI responses in Visual Studio Code, allowing you to tailor generated code and chat interactions to your specific coding practices and project requirements.\n- Code Snippets: 1984\n- Trust Score: 7.5\n----------\n- Title: Filament Custom Fields\n- Context7-compatible library ID: /context7/custom-fields_relaticle\n- Description: Add unlimited custom fields to any Filament resource dynamically without database migrations. Allows users to customize data through an intuitive admin panel, eliminating the need for developer intervention and deployments.\n- Code Snippets: 46\n- Trust Score: 7.5\n----------\n- Title: Jumpseller Liquid Theme Customization\n- Context7-compatible library ID: /context7/jumpseller_com-support-liquid\n- Description: This documentation details how to customize Jumpseller online stores using the Liquid markup language, enabling dynamic content and design modifications for themes.\n- Code Snippets: 466\n- Trust Score: 7.5\n----------\n- Title: S6 Overlay\n- Context7-compatible library ID: /just-containers/s6-overlay\n- Description: s6 overlay for containers (includes execline, s6-linux-utils & a custom init)\n- Code Snippets: 35\n- Trust Score: 6.3\n----------\n- Title: Kaseya Automation Team\n- Context7-compatible library ID: /kaseya-automation-team/kaseya-automation-team\n- Description: \n- Code Snippets: 2\n- Trust Score: 3.2\n----------\n- Title: NVIDIA AI Workbench SDXL Customization Example\n- Context7-compatible library ID: /nvidia/workbench-example-sdxl-customization\n- Description: An NVIDIA AI Workbench example project for customizing an SDXL model\n- Code Snippets: 20\n----------\n- Title: OpenLR\n- Context7-compatible library ID: /tomtom-international/openlr\n- Description: Reference implementation of OpenLR.  A map agnostic, dynamic location referencing method.\n- Code Snippets: 13\n- Trust Score: 8.7\n----------\n- Title: VTEX Product Customizer\n- Context7-compatible library ID: /vtex-apps/product-customizer\n- Description: VTEX product customizer app\n- Code Snippets: 9\n- Trust Score: 9.2\n----------\n- Title: Ecowittcustom Driver and Weewx Seasons Skin\n- Context7-compatible library ID: /wernerkr/ecowitt-or-davis-stations-and-season-skin\n- Description: Ecowittcustom driver and modified Weewx Seasons skin and Ecowitt stations/devices support with all available sensors (and DAVIS Weatherlink Live, VantagePro, AirLink too)\n- Code Snippets: 69\n- Trust Score: 5\n----------\n- Title: McCustomSkinLoader\n- Context7-compatible library ID: /xfl03/mccustomskinloader\n- Description: Customize Skin, Cape and Elytra in Minecraft 1.8-1.21\n- Code Snippets: 9\n- Trust Score: 9.8\n----------\n- Title: Apache Storm\n- Context7-compatible library ID: /apache/storm-site\n- Description: Mirror of Apache storm website Git repo\n- Code Snippets: 142\n- Trust Score: 9.1\n----------\n- Title: Atomizer\n- Context7-compatible library ID: /acss-io/atomizer\n- Description: A library to create small, reusable CSS that scales as your website grows.\n- Code Snippets: 321\n- Trust Score: 6.3\n----------\n- Title: Advanced Custom Fields\n- Context7-compatible library ID: /advancedcustomfields/acf\n- Description: Advanced Custom Fields \n- Code Snippets: 16\n- Trust Score: 7.4\n----------\n- Title: Voyage AI\n- Context7-compatible library ID: /austinfhunter/voyageai\n- Description: \n- Code Snippets: 6\n- Trust Score: 5.3\n----------\n- Title: Node Canvas\n- Context7-compatible library ID: /automattic/node-canvas\n- Description: Node canvas is a Cairo backed Canvas implementation for NodeJS.\n- Code Snippets: 51\n- Trust Score: 8.4\n----------\n- Title: Document Intelligence\n- Context7-compatible library ID: /azure-samples/document-intelligence-code-samples\n- Description: Sample site for Document Intelligence code samples and associated media.\n- Code Snippets: 210\n- Trust Score: 8.6\n----------\n- Title: Azure Verified Modules Network NetworkInterface\n- Context7-compatible library ID: /azure/terraform-azurerm-avm-res-network-networkinterface\n- Description: \n- Code Snippets: 63\n- Trust Score: 9.6\n----------\n- Title: BrowserAutomationStudio\n- Context7-compatible library ID: /bablosoft/bas\n- Description: BrowserAutomationStudio can automate everything that Chrome can.\n- Code Snippets: 153\n- Trust Score: 5.7\n----------\n- Title: Bitrix24 App Template Automation Rules\n- Context7-compatible library ID: /bitrix24/app-template-automation-rules\n- Description: \n- Code Snippets: 27\n- Trust Score: 7.2\n----------\n- Title: ATProto Interop Tests\n- Context7-compatible library ID: /bluesky-social/atproto-interop-tests\n- Description: Implementation-neutral test data for atproto\n- Code Snippets: 37\n- Trust Score: 7.4\n----------\n- Title: bpmn-js\n- Context7-compatible library ID: /bpmn-io/bpmn-js-example-custom-elements\n- Description: An example of how to support custom elements in bpmn-js while ensuring BPMN 2.0 compatibility.\n- Code Snippets: 5\n- Trust Score: 9\n----------\n- Title: JCommander\n- Context7-compatible library ID: /cbeust/jcommander\n- Description: Command line parsing framework for Java\n- Code Snippets: 4\n- Trust Score: 9.1\n----------\n- Title: CATIA Automation Interface\n- Context7-compatible library ID: /chenl126/catautomationinterface\n- Description: CATIA Development Documents\n- Code Snippets: 1464\n- Trust Score: 3.4\n----------\n- Title: Genie Parser\n- Context7-compatible library ID: /ciscotestautomation/genieparser\n- Description: sub-component of Genie that parse the device output into structured datastructure\n- Code Snippets: 3898\n- Trust Score: 8\n----------\n- Title: Resolve Node Configs Hierarchy\n- Context7-compatible library ID: /constantiner/resolve-node-configs-hierarchy\n- Description: Fight configuration headaches for different environments without pain\n- Code Snippets: 30\n- Trust Score: 6.9\n----------\n- Title: Zohar\n- Context7-compatible library ID: /constantiner/zohar\n- Description: A functional type-safe event emitter library with zero dependencies\n- Code Snippets: 23\n- Trust Score: 6.9\n----------\n- Title: Astro Integration Kit\n- Context7-compatible library ID: /context7/astro-integration-kit_netlify_app\n- Description: A package providing utilities to simplify and enhance the development of Astro integrations.\n- Code Snippets: 96\n- Trust Score: 7.5\n----------\n- Title: Azure AI Document Intelligence Client Library for Python\n- Context7-compatible library ID: /context7/azuresdkdocs_z19_web_core_windows_net-python-azure-ai-documentintelligence\n- Description: The Azure AI Document Intelligence client library for Python enables analysis of text and structured data from documents using machine learning. It supports layout extraction, key-value pair analysis, prebuilt and custom model analysis, and document classification.\n- Code Snippets: 607\n- Trust Score: 7.5\n----------\n- Title: Brian Dunning's FileMaker Custom Functions\n- Context7-compatible library ID: /context7/briandunning-filemaker-custom-functions\n- Description: Brian Dunning's FileMaker Custom Functions is a free, community-driven online library providing a large collection of custom functions for FileMaker users and developers.\n- Code Snippets: 12\n- Trust Score: 7.5\n----------\n- Title: Customer.io Expo SDK\n- Context7-compatible library ID: /context7/customer_io-integrations-sdk-expo\n- Description: Integrate Customer.io's powerful messaging and automation features into your Expo mobile applications with this dedicated SDK. Facilitates user tracking, event logging, and push notification delivery.\n- Code Snippets: 66\n- Trust Score: 7.5\n----------\n- Title: Customer Journey Analytics API\n- Context7-compatible library ID: /context7/developer_adobe_com-cja-apis-docs-api\n- Description: The Customer Journey Analytics API provides programmatic access to Adobe's Customer Journey Analytics, enabling developers to integrate and leverage customer journey data and insights.\n- Code Snippets: 210\n- Trust Score: 7.5\n----------\n- Title: DeDust SDK\n- Context7-compatible library ID: /context7/docs_dedust_io-docs-getting-started\n- Description: The DeDust SDK is a TypeScript/JavaScript toolkit designed for seamless interaction with the DeDust Protocol. It provides functionalities for contract actions, calculations, and access to the DeDust API.\n- Code Snippets: 23\n- Trust Score: 7.5\n----------\n- Title: Upmind\n- Context7-compatible library ID: /context7/docs_upmind_com-docs-getting-started\n- Description: Upmind is a comprehensive business automation platform for managing clients, services, billing, and support, offering extensive configuration and payment gateway integrations.\n- Code Snippets: 129\n- Trust Score: 7.5\n----------\n- Title: Tradier API\n- Context7-compatible library ID: /context7/documentation_tradier_com\n- Description: The Tradier API provides comprehensive tools for trading US-based equities and options, accessing real-time and historical market data, and managing brokerage accounts.\n- Code Snippets: 1596\n- Trust Score: 7.5\n----------\n- Title: Smartlook Integrations\n- Context7-compatible library ID: /context7/integrations_smartlook\n- Description: Smartlook Integrations provides a comprehensive suite of connections and installations for Smartlook, enabling users to integrate with various third-party technologies, tools, and platforms to gain deeper insights into user actions on websites and apps.\n- Code Snippets: 224\n- Trust Score: 7.5\n----------\n- Title: DFX\n- Context7-compatible library ID: /context7/internetcomputer_org-docs-building-apps-developer-tools-dfx\n- Description: DFX is the DFINITY command-line execution environment, serving as the primary tool for creating, deploying, and managing decentralized applications (dapps) on the Internet Computer platform.\n- Code Snippets: 3527\n- Trust Score: 7.5\n----------\n- Title: itBaima Library Document Center\n- Context7-compatible library ID: /context7/itbaima_cn-en-us-document\n- Description: A comprehensive document center for itBaima's course materials, covering JavaSE, JavaWeb, Spring, C language, Kotlin, and web front-end development, along with other technical notes and app recommendations.\n- Code Snippets: 7\n- Trust Score: 7.5\n----------\n- Title: Jest\n- Context7-compatible library ID: /context7/jestjs_io-docs-getting-started\n- Description: Jest is a delightful JavaScript Testing Framework designed for simplicity and ease of use. It enables developers to write and run tests for their JavaScript and TypeScript codebases.\n- Code Snippets: 2062\n- Trust Score: 7.5\n----------\n- Title: Azure AI Document Intelligence\n- Context7-compatible library ID: /context7/learn_microsoft-en-us-azure-ai-services-document-intelligence\n- Description: Azure AI Document Intelligence is a cloud-based Azure AI service that uses machine-learning models to automate data processing in applications and workflows, enhancing data-driven strategies and document search capabilities.\n- Code Snippets: 847\n- Trust Score: 7.5\n----------\n- Title: LangChain OllamaLLM\n- Context7-compatible library ID: /context7/python_langchain_com-docs-integrations-llms-ollama\n- Description: An integration within the LangChain framework that allows users to connect and interact with Large Language Models (LLMs) served locally using Ollama.\n- Code Snippets: 15567\n- Trust Score: 7.5\n----------\n- Title: O*NET Web Services\n- Context7-compatible library ID: /context7/services_onetcenter\n- Description: O*NET Web Services provides an API for developers to integrate O*NET data into their applications, offering tools like occupation keyword search and access to the Interest Profiler.\n- Code Snippets: 1\n- Trust Score: 7.5\n----------\n- Title: O*NET Web Services Reference Manual\n- Context7-compatible library ID: /context7/services_onetcenter-reference\n- Description: Documentation for O*NET Web Services, providing access to O*NET data through a RESTful API. Supports JSON and XML formats with sample code and error handling information.\n- Code Snippets: 728\n- Trust Score: 7.5\n----------\n- Title: usehooks-ts\n- Context7-compatible library ID: /context7/usehooks-ts_com-introduction\n- Description: usehooks-ts is a React hooks library written in TypeScript, providing a ready-to-use, tree-shakable set of hooks to build React applications faster and follow DRY principles.\n- Code Snippets: 116\n----------\n- Title: Valetudo MQTT Integration\n- Context7-compatible library ID: /context7/valetudo_cloud-pages\n- Description: Integrate your Valetudo-powered robot vacuum with MQTT brokers for seamless control and monitoring via home automation software like Home Assistant, openHAB, and Node-RED.\n- Code Snippets: 132\n- Trust Score: 7.5\n----------\n- Title: Artelys Knitro\n- Context7-compatible library ID: /context7/www_artelys_com-app-docs-knitro-1_introduction.html\n- Description: Artelys Knitro is a powerful software for numerical optimization. This documentation provides an overview of its capabilities, installation, and usage for solving complex optimization problems.\n- Code Snippets: 1019\n----------\n- Title: rosbag.js\n- Context7-compatible library ID: /cruise-automation/rosbag.js\n- Description: ROS bag file reader for JavaScript 👜\n- Code Snippets: 10\n- Trust Score: 8.6\n----------\n- Title: Pyscript\n- Context7-compatible library ID: /custom-components/pyscript\n- Description: Pyscript adds rich Python scripting to HASS\n- Code Snippets: 124\n- Trust Score: 9\n----------\n- Title: Customer.io CDP Analytics JS\n- Context7-compatible library ID: /customerio/cdp-analytics-js\n- Description: Customer.io Data Pipelines analytics client for Javascript (Browsers + Node.js)\n- Code Snippets: 7\n- Trust Score: 9.1"
              }
            ],
            "isError": false
          },
          "toolSpecificData": {
            "kind": "input",
            "rawInput": {
              "libraryName": "CustomTkinter"
            }
          },
          "toolCallId": "203e763a-d20b-433e-9156-77690c326b8a",
          "toolId": "mcp_context7_resolve-library-id"
        },
        {
          "value": "**ID de la librería CustomTkinter encontrado:**\n\nEl ID de la librería CustomTkinter compatible con Context7 es:\n\n**`/tomschimansky/customtkinter`**\n\n**Detalles de la librería:**\n- **Nombre:** CustomTkinter\n- **Descripción:** Una librería moderna y personalizable de interfaz de usuario de Python basada en Tkinter\n- **Ejemplos de código disponibles:** 3\n- **Puntuación de confianza:** 8.7 (muy alta)\n\nEsta es la librería oficial de CustomTkinter desarrollada por Tom Schimansky, que es exactamente lo que necesitas para tu proyecto según las especificaciones que tienes en el archivo `Especificaciones_UI.md`. La alta puntuación de confianza (8.7) y el hecho de que sea el repositorio oficial lo confirman como la opción correcta.\n\nSi necesitas obtener la documentación específica de CustomTkinter, puedo usar este ID para acceder a los recursos y ejemplos de código disponibles.",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/c:/Users/Antonio/gitrepos/Test_UI_v3/",
            "scheme": "file"
          }
        }
      ],
      "responseId": "response_992c7a94-5646-4b08-afd6-4ef5f295bce7",
      "result": {
        "timings": {
          "firstProgress": 6201,
          "totalElapsed": 35219
        },
        "metadata": {
          "codeBlocks": [],
          "renderedUserMessage": [
            {
              "type": 1,
              "text": "<attachments>\n<attachment id=\"file:Especificaciones_UI.md\">\nUser's current visible code, this should be the main focus:\nExcerpt from Especificaciones_UI.md, lines 550 to 577:\n```markdown\nplegados.\n\n  En el ejemplo siguiente, la etiqueta \"Total general\" y campo \"Total\" se muestran en ambos casos. Además, la etiqueta de la cantidad de ítems \"Cantidad Items\" está oculta en la vista desplegada, pero al plegarse sí se muestra. Se ocultan el Botón \"Limpiar datos\" y la Tabla \"Detalle de productos\".\n\n  > ```asciiart\n  > ┌─Datos─Cliente─────────────────────────────────────────────────┐▲\n  > │        ┌────────────────────────────────────────────────────┐ ││\n  > │{Nombre}│                                                    │ ││\n  > │        └────────────────────────────────────────────────────┘ ││\n  > └───────────────────────────────────────────────────────────────┘│\n  > ┌─ ▶ Detalle─Productos──────────────────────────────────────────┐│\n  > │                                              ┌──────────────┐ ││\n  > │ {Cantidad Items}              {Total general}│  <Suma Total>│ ││\n  > │                                              └──────────────┘ ││\n  > └───────────────────────────────────────────────────────────────┘│\n  > ┌─ ▶ Visualizar─Cotización──────────────────────────────────────┐│\n  > └───────────────────────────────────────────────────────────────┘▼\n  > ┌────────────────────────────────────────────────────────────────┐\n  > │        ┌───────────────────┐      ┌───────────────────┐        │\n  > │        │ Grabar Cotización │      │      Cerrar       │        │\n  > │        └───────────────────┘      └───────────────────┘        │\n  > └────────────────────────────────────────────────────────────────┘\n  > ```\n\n## 4. Comportamiento responsivo esperado\n\nEsta sección detalla el comportamiento responsivo de la interfaz, complementando las definiciones generales de \"Características comunes\", \"Tablas\", \"Paneles\" y \"Especificaciones adicionales\".\n```\n</attachment>\n<attachment filePath=\"c:\\\\Users\\\\Antonio\\\\gitrepos\\\\Test_UI_v3\\\\docs\\\\Especificaciones_UI.md\">\nUser's active file for additional context:\n````markdown\n# Especificaciones interfaz de usuario\n\nEste documento describe las especificaciones de la interfaz de usuario para el proyecto de demostración de diferentes frameworks de Python.\nSe requiere comparar e implementar los siguientes:\n\n- CustomTkinter\n- Flet\n- Kivy\n- PySide6\n- QtQuick\n- Tkinter + ttk\n- wxPython\n\n## Introducción\n\nEste documento presenta una propuesta genérica de especificaciones de interfaz de usuario que debe ser evaluada respecto a cada framework de Python. Es fundamental determinar si cada elemento de detalle descrito puede ser implementado de forma natural por cada plataforma o si requiere extensiones o modificaciones específicas para soportarlo adecuadamente.\n\nLa implementación de estas especificaciones puede variar significativamente entre frameworks. Algunos elementos pueden estar disponibles de manera nativa, mientras que otros requerirán desarrollo personalizado o el uso de librerías adicionales.\n\nSe recomienda revisar cada especificación contra las capacidades nativas del framework objetivo antes de proceder con la implementación, identificando qué funcionalidades requieren desarrollo adicional y cuáles pueden aprovecharse directamente.\n\n## 1. Diseño de elementos gráficos - Reglas generales\n\n## 1.1. Pautas de Accesibilidad Universal\n\n- **Conformidad con WCAG 2.1 nivel AA:**\n  - **Perceptible:** Contraste de colores mínimo 4.5:1 para texto normal, 3:1 para texto grande (>18pt). Contenido no dependiente únicamente del color. Texto redimensionable hasta 200% sin pérdida de funcionalidad.\n  - **Operable:** Navegación completa por teclado con orden lógico (Tab, Shift+Tab). Indicadores de foco visibles con borde de 2px. Sin contenido que cause convulsiones. Área mínima de toque 44x44px para elementos interactivos.\n  - **Comprensible:** Texto legible y claro. Funcionalidad predecible. Mensajes de error claros y asociados semánticamente con elementos. Ayuda contextual en entrada de datos complejos.\n  - **Robusto:** Compatible con tecnologías asistivas (lectores de pantalla, magnificadores). Código semánticamente correcto con roles y etiquetas ARIA apropiadas.\n\n- **Soporte para tecnologías asistivas:**\n  - Lectores de pantalla (NVDA, JAWS, Orca) con anuncios apropiados de cambios de estado y contenido.\n  - Magnificadores de pantalla con contenido que se adapta al zoom.\n  - Software de reconocimiento de voz con comandos accesibles.\n  - Dispositivos de entrada alternativos (switch, eye-tracking).\n\n- **Navegación por teclado universal:**\n  - Tab/Shift+Tab para navegación entre elementos interactivos.\n  - Enter/Espacio para activar botones y controles.\n  - Flechas para navegación dentro de componentes complejos (tablas, listas).\n  - Escape para cancelar acciones o cerrar diálogos.\n  - Home/End para ir al inicio/final de contenido.\n\n- **Espaciado y dimensiones accesibles:**\n  - Espaciado mínimo de 8px entre elementos interactivos adyacentes.\n  - Márgenes de contenido mínimo de 16px desde bordes de contenedores.\n  - Altura mínima de 32px para campos de texto y controles de formulario.\n  - Área de toque mínima 44x44px con separación de 8px en interfaces táctiles.\n\n- **Indicación de estados accesibles:**\n  - Estados de foco, hover, activo y deshabilitado claramente diferenciados visual y programáticamente.\n  - Cambios de estado anunciados a tecnologías asistivas.\n  - Indicadores de validación accesibles tanto visual como programáticamente.\n\n- TODO: Definir patrones de prueba de accesibilidad durante desarrollo.\n\n## 1.2. Características Comunes de Elementos Gráficos\n\n- **Características comunes:**\n  - Todos los elementos gráficos deben tener un diseño consistente y seguir las pautas de estilo del tema visual definido.\n  - Deben ser fácilmente identificables y accesibles para el usuario, con color de fondo y borde definido (salvo que se especifique lo contrario).\n  - Deben tener tamaño mínimo y alto suficiente para mostrar su contenido, incluso si está vacío, considerando DPI y accesibilidad para pantallas táctiles, mouse y teclado.\n  - Deben presentar contraste suficiente entre texto y fondo para garantizar la legibilidad.\n  - Deben mantener espaciado adecuado entre sí para evitar solapamientos y mejorar la usabilidad, usando márgenes y rellenos (padding) adecuados. *Nota de implementación:* Utilizar un *Layout manager* nativo del framework para la distribución, alineación y espaciado.\n  - Deben mostrar un estado visual claro para indicar si están activos, inactivos, seleccionados o deshabilitados.\n  - Deben ser responsivos, adaptándose al tamaño de la ventana, contenido visible y a la interacción del usuario (hover, clic, selección, etc.). Por defecto, todos los elementos gráficos cambian color de fondo y/o borde al hacer hover, clic o estar seleccionados, salvo que se especifique lo contrario.\n  - No deben responder a arrastre, salvo que se especifique lo contrario.\n  - El redimensionamiento manual debe estar habilitado solo si se especifica, mostrando borde de selección o indicador visual para arrastrar, cambiando color al hacer hover o arrastrar. Por defecto, no se permite redimensionamiento manual.\n  - Elementos interactivos como botones o campos de texto deben tener tamaño mínimo para facilitar la interacción.\n  - Elementos con validación de datos deben mostrar mensajes de error claros y visibles cerca del elemento afectado, no en diálogos separados.\n  - Todos los elementos gráficos deben tener atributo de visibilidad (`True` por defecto, `False` para ocultar), y si están ocultos no ocupan espacio ni son interactivos.\n  - Todos los elementos gráficos deben tener atributo de habilitación (`True` por defecto, `False` para deshabilitar), mostrando estado visual claro si no están disponibles.\n  - Todos los elementos gráficos deben tener atributo de anclaje (`None` por defecto), que puede modificarse para anclar a un borde o a otro elemento, manteniendo posición relativa al redimensionar.\n  - Elementos pueden tener atributo para ser seleccionados por teclado (`False` por defecto, `True` para permitir foco y navegación con Tab), mostrando estado visual claro al recibir foco. Se debe implementar navegación por Tab y acciones específicas según el tipo de elemento.\n  - TASK: Completar detalles según el framework elegido.\n\n- **Tema visual:**\n  - Bordes del elemento gráfico:\n    - Color: Activo, deshabilitado, resaltado.\n    - Grosor\n    - Permite bordes redondeados: Verdadero/Falso.\n    - Radio Bordes redondeados: En caso de soportarse.\n  - Los iconos existen en 3 tamaños: pequeño, mediano y grande.\n  - TASK: Completar detalles según el framework elegido:\n    - Definir paleta de colores principal y secundaria para fondo, texto, bordes y estados (activo, deshabilitado, resaltado).\n    - Definir estilos de iconos (línea, relleno, tamaños en píxeles para cada categoría de tamaño).\n    - Definir tipografía principal y secundaria, tamaños de fuente, negritas y cursivas.\n    - Definir espaciado mínimo entre elementos, márgenes y rellenos.\n\n- **Ventana:**\n  - Tamaño mínimo de ventana: 800x600 píxeles.\n  - Al inicializarse debe estar en estado maximizado por defecto.\n  - Permite redimensionamiento por parte del usuario.\n  - Muestra barra de desplazamiento vertical u horizontal si el contenido excede el área visible.\n  - No cambia color de fondo o bordes al hacer hover, clic o arrastrar en el espacio vacío de la ventana.\n  - Se debe implementar soporte para zoom de ventana sin pérdida de funcionalidad hasta 200%.\n  - TASK: Falta definir color de fondo, color de borde y espaciado interno.\n\n- **Etiquetas:**\n  - Tamaño de fuente por defecto igual al texto normal, con alineación a la izquierda por defecto.\n  - Sin borde ni color de fondo distintivo, no cambian de color al hacer hover o clic, salvo que se especifique lo contrario.\n  - La alineación puede ser a la izquierda, derecha o centrada.\n  - Permiten ajuste de palabras (wordwrap) y multi-línea si es necesario.\n  - No son interactivos ni seleccionables, salvo que se especifique lo contrario.\n  - Para el lector de pantalla, considerar etiqueta ARIA que diga \"{Nombre de la etiqueta}\" para indicar que es una etiqueta informativa.\n  - TASK: Falta definir color de texto y alineación por defecto.\n\n- **Botones:**\n  - Color de fondo cambia al hacer hover o clic.\n  - Texto centrado por defecto, puede alinearse según se requiera.\n  - Solo se usan botones con texto descriptivo, o con íconos si son acciones simples.\n  - Al hacer hover, se muestra una etiqueta emergente con descripción alternativa de la acción del botón.\n  - Para el lector de pantalla, considerar etiqueta ARIA que diga \"Botón {Nombre del botón}\" para indicar que es un botón interactivo.\n  - TASK: Falta definir borde, tamaño y color de texto, colores de fondo para estados normal/hover/clic, y estilo de etiqueta emergente descriptiva.\n\n- **Campos de texto:**\n  - Texto alineado según se requiera, izquierda por defecto.\n  - Permiten ajuste de palabras (wordwrap) y texto multi-línea si es necesario.\n  - Si es editable, el usuario puede modificar el texto; si no, solo puede seleccionarlo.\n  - Al hacer hover, clic o recibir foco por teclado: el borde cambia de color para indicar interactividad.\n  - Al estar en edición, colores de fondo y texto cambian según estado editable o no.\n  - Al recibir foco por clic o teclado:\n    - Si el campo está vacío, el cursor se posiciona al inicio.\n    - Si tiene texto, el texto se muestra preseleccionado por completo, con el cursor en la posición del clic, o al final si se llegó por teclado.\n  - Validación al perder foco o presionar Enter. Si es inválido mostrando control emergente de mensajes con estado y descripción de error.\n  - Edición puede terminar con Escape o Tab, restaurando el valor anterior si es inválido.\n  - Para lector de pantalla, considerar etiqueta ARIA que diga \"{Nombre del campo}, campo de texto\" para indicar que es un campo editable. Si no es editable, usar \"{Nombre del campo}, etiqueta de texto\" para indicar que es solo informativo.\n  - TASK: Definir color de fondo y color de texto para estados editable/no editable, color de borde para estados normal/hover/clic/foco/edición, y estilo de control emergente de validación.\n\n- **Control emergente para mensajes:**\n  - Se muestra cerca del elemento vinculado, afectado por validación o error.\n  - El control emerge del borde del elemento gráfico que genera el mensaje, anclándose a los bordes de este:\n    - Por defecto anclado en el borde inferior del elemento vinculado, con ambos alineados en su margen izquierdo.\n    - En cambio, si el elemento está cerca del borde derecho del contenedor del elemento vinculado, el control se alinea con el borde derecho del elemento.\n    - Si el elemento está en el límite inferior visible, el control se ancla en el borde superior del elemento vinculado.\n    - Debe mantener un margen específico respecto al otro control.\n  - El Control tiene borde y color de fondo específicos.\n    - Al hacer hover, clic o recibir foco por teclado: el borde cambia de color desde normal a resaltado, para indicar interactividad.\n    - El color de fondo es fijo según el tipo de Estado a representar (Error, Advertencia, Información) y se mantiene mientras el control esté visible.\n  - El área interna del control contiene una grilla de alineamiento horizontal, sin margen respecto al borde.\n    - El área izquierda está destinada al icono de Estado, mientras el área derecha se divide en la sección superior que contiene el botón de cierre y la inferior donde está la etiqueta con Mensaje.\n    - Ícono de Estado está anclado al borde superior izquierdo de la grilla, con un margen adecuado.\n    - Botón de cierre está anclado al borde superior derecho de la grilla con un margen de 0px respecto a ambos bordes.\n    - La etiqueta con mensaje va anclada al borde inferior derecho de la grilla, con un margen adecuado.\n  - El ícono de estado es de tamaño mediano según categoría: Error (  ), Advertencia (  ), Información (  ).\n  - La etiqueta con Mensaje permite texto multilínea y con Word wrap habilitado.\n  - Botón de cierre con ícono pequeño (  ) para ocultar el mensaje mediante clic o teclado.\n  - Cuando el control recibe el foco por clic o teclado, se selecciona el botón de cierre. *Nota de implementación:* Los eventos de teclado en cualquier parte del control se redirigen automáticamente al botón de cierre para su procesamiento.\n  - *Nota de implementación:* El control sólo expone las siguientes propiedades, escondiendo los detalles de implementación del resto:\n    - Control vinculado\n    - Texto de categoría de mensaje: Valores válidos \"error\", \"advertencia\", \"información\". Si el framework contiene constante para estas categorías, utilizarlas para la implementación.\n    - Mensaje: Texto a mostrar en la etiquetas con Mensaje.\n    - Colores para borde del control: Etiquetas de color para estados normal y resaltado. Utilizar sistemas de color y tipos de datos que utilice el framework.\n    - Colores para categoría de mensaje: Etiquetas de color según cada categoría, para mostrar como color de fondo del control. Utilizar sistemas de color y tipos de datos que utilice el framework.\n    - Estilo de texto del mensaje: Color, familia de fuente, tamaño de fuente, estilo (normal, negrita, cursiva).\n    - Alto y ancho mínimos del control: Valores de solo lectura en píxeles.\n    - Los demás atributos específicos que requiera o hereda por ser elemento gráfico en cada framework.\n  - Debe ser accesible por tecnologías asistivas, incluyendo etiquetas ARIA apropiadas (nombre del campo asociado, estado del mensaje, texto del mensaje).\n  - TASK: Definir colores específicos para fondo fijo por tipo de mensaje (error/advertencia/información), colores de borde para estados normal vs. resaltado, estilo de texto, margen respecto al control vinculado, márgenes internos de la grilla y elementos, tiempo de auto-ocultación (opcional), animaciones de aparición/desaparición del control emergente.\n\n- **Barra de desplazamiento:**\n  - Visible solo si el contenido excede el área visible.\n  - Cambia de color al hacer hover, clic o arrastrar.\n  - Implementar navegación alternativa con teclas Page Up/Down, Home/End.\n  - TASK: Falta definir color, grosor y estilo de la barra, colores para estados normal/hover/clic/arrastrar.\n\n- **Indicador de plegado:**\n  - Icono definido y visible en el borde superior izquierdo del panel.\n  - Ícono indica estado: plegado (`▶`) o desplegado (`▼`).\n  - Al hacer clic, alterna entre estados.\n  - Cambia color al hacer hover o clic.\n  - Para lector de pantalla, considerar etiqueta ARIA que diga \"Indicador de plegado, estado {estado actual}\" para indicar el estado del panel.\n  - TASK: Falta definir color, tamaño y estilo del icono, colores para estados normal/hover/clic.\n\n- **Paneles:**\n  - Puede tener título en la parte superior, alineado a la izquierda por defecto.\n  - Paneles plegables muestran indicador de plegado.\n  - Fondo que contraste con texto y elementos internos.\n  - Por defecto sin borde, salvo que se especifique.\n  - Para accesibilidad implementar estructura de encabezados jerárquica (h1, h2, h3) y derivando landmarks ARIA para navegación rápida.\n  - TASK: Falta definir color de fondo, color de borde y espaciado interno.\n\n- **Tablas:**\n  - Permite desplazamiento horizontal y vertical si el contenido excede el área visible.\n  - Encabezado distinguible, con fondo y texto contrastantes, no permite cambiar nombre, orden ni alto.\n  - Encabezado tiene alto fijo y siempre visible al hacer scroll vertical (anclado arriba).\n  - Filas alternan colores para legibilidad.\n  - Alto mínimo para mostrar encabezado y fila vacía al final; atributo para cantidad de filas visibles (por defecto 3, mínimo 1).\n  - Al cargar datos, genera filas según datos y siempre incluye una fila vacía al final para agregar nuevos registros, sin usar campos de texto aparte.\n  - Filas cambian de color al estar seleccionadas o al hacer hover.\n  - Filas sin bordes entre ellas, pero con margen especificado como atributo.\n  - Alto de fila determinado por celda más alta, no cambia al hacer scroll. Incluso sin datos, la fila debe tener alto mínimo suficiente para mostrar una línea de texto.\n  - Columnas tienen borde entre ellas, con margen entre celdas, especificado como atributo.\n  - Columnas permiten redimensionamiento manual de ancho, salvo indicación contraria, y se autoajustan al hacer clic en el borde entre ellas.\n  - Ancho mínimo calculado automáticamente según contenido, no cambia al hacer scroll horizontal.\n  - Celdas no permiten modificar alto manualmente, pero sí indirectamente por contenido.\n  - Celdas tienen mismo comportamiento que campos de texto respecto a interacción, validaciones y mensajes de error.\n  - Implementar navegación por teclas de flechas entre celdas, permitiendo edición de celdas con Enter.\n  - Para el lector de pantalla, asegurar encabezados asociados semánticamente con celdas de datos (por ejemplo, al navegar a celda en columna producto, fila 3, se anuncia \"Producto {contenido celda}, fila 3 de {número total de filas con datos A ver}\").\n  - Uso de tecla Tab para navegar entre filas, seleccionándolas.\n  - Las filas deben reservar espacio extra en el borde izquierdo y derecho de la tabla para mostrar un ícono en cualquiera de los costados. Este espacio se rellena del mismo color de fondo, y permite implementar elementos gráficos para insertar o eliminar filas.\n  - TASK: Falta definir color de fondo de celdas, color de texto, color de bordes, estilo de encabezado, colores alternados para filas, colores para estados seleccionada/hover de filas, y color de fondo para espacio extra de íconos.\n\n- **Botón de inserción de fila:**\n  - Se muestra como un ícono (por ejemplo, `+`) únicamente al hacer hover con el mouse sobre el espacio entre filas, no sobre una fila.\n  - El ícono debe ser claramente visible y cambiar de color al hacer hover.\n  - Al hacer clic en el ícono o usar Ctrl+Insert, se inserta una nueva fila vacía en la posición correspondiente.\n  - Al tener una fila seleccionada y presionar Ctrl+Insert, se inserta una nueva fila vacía justo debajo de la fila seleccionada.\n  - El botón debe mostrar un estado visual de activación al hacer clic.\n  - La nueva fila debe crearse con celdas vacías y lista para edición inmediata, posicionando el cursor en la primera celda editable de la nueva fila.\n  - No debe mostrar el ícono de inserción ni activarse por teclado entre la penúltima fila de datos y la fila vacía al final de la tabla.\n  - TASK: Definir color, tamaño y estilo del ícono de inserción, colores para estados normal/hover/activación.\n\n- **Botón de eliminación de fila:**\n  - Se muestra como un ícono (por ejemplo, de basurero `🗑` o `-`) al hacer hover con el mouse sobre el borde de la fila, o teniendo la fila seleccionada.\n  - Solo al tener la fila seleccionada, es accesible mediante navegación por teclado.\n  - Al hacer clic o usar la tecla Suprimir (según punto anterior), elimina la fila correspondiente, mostrando confirmación previa solo si la fila contiene datos.\n  - Confirmación de eliminación muestra cuadro de diálogo del sistema (estilo advertencia), con botones \"Cancelar\" y \"Eliminar\" con foco en botón de Cancelar. Debe ser accesible por teclado.\n  - El ícono debe ser claramente visible y cambiar de color al hacer hover.\n  - Debe tener tamaño suficiente para ser fácilmente interactuable en pantallas táctiles y con mouse.\n  - El botón debe mostrar un estado visual de activación al hacer clic.\n  - No debe permitir eliminar la última fila vacía destinada a agregar nuevos datos.\n  - TASK: Definir color, tamaño y estilo del ícono de eliminación, colores para estados normal/hover/activación.\n\n---\n\n## 2. Requisitos específicos de la interfaz de usuario\n\n- La interfaz a construir debe ser intuitiva y fácil de usar, siguiendo las mejores prácticas de UI/UX.\n- Debe mostrar características responsivas y adaptarse a diferentes tamaños de ventana (ver \"Características comunes\" y \"Comportamiento responsivo esperado\").\n- Se requiere implementar como un formulario con varias secciones que agrupan *widgets* de interfaz gráfica, como etiquetas, iconos, campos de texto, botones, barra de desplazamiento, tablas o paneles.\n- Debe permitir la visualización de una previsualización de la cotización dentro de un panel dedicado.\n- Algunos paneles deben permitir el plegado y despliegue de contenido para mostrar todo o sólo algunos elementos.\n\n### Simbología utilizada en los Diagramas\n\nLa interfaz de usuario requerida se describe por medio de diagramas ASCII que representan gráficamente diferentes elementos de la interfaz, la relación entre ellos, como que un panel está ubicado antes que otro, la relación entre padre e hijos cuando un elemento contiene a otros dentro de su espacio, o la alineación y ubicación relativa de elementos gráficos.\n\n- **Caracteres:**\n\n  Los caracteres ASCII se utilizan para crear bordes, líneas y otros elementos gráficos de la interfaz. Estos caracteres permiten representar visualmente los componentes de la interfaz de usuario de manera clara y organizada.\n\n  - Bordes: `┌─`, `└─`, `─┐`, `─┘`, `│`.\n  - Líneas horizontales: `─`.\n  - Líneas verticales: `│`.\n  - Espacios en blanco: ` ` (espacio).\n\n- **Texto:**\n\n  El texto se representa con llaves `{}` para etiquetas, y con signos de menor y mayor `< >` para campos de texto. Los textos dentro de los botones no llevan signos.\n\n  - Etiqueta: `{Etiqueta}`.\n  - Campo de texto: `<Campo de texto>`.\n  - Botón: `Botón`.\n\n- **Bordes:**\n\n  Los bordes de la ventana, botones, campos de texto, etiquetas y secciones se muestran con caracteres ASCII específicos para crear una interfaz visualmente clara y organizada.\n\n  - Bordes de la ventana: `┌─`, `└─`, `─┐`, `─┘`.\n  - Bordes verticales: `│`.\n  - Bordes horizontales: `─`.\n\n- **Ventana:**\n\n  La ventana es el contenedor principal de la interfaz, y se representa con un borde completo.\n\n  - Borde completo: `┌─`, `└─`, `─┐`, `─┘`.\n\n- **Etiqueta:**\n\n  Una etiqueta es un texto que se muestra sin bordes dentro de un panel, y se representa entre llaves '{}'. Sirve para mostrar información estática que no requiere interacción del usuario y pueden estar alineadas a la izquierda, derecha o centradas, según se requiera.\n\n  El ejemplo siguiente muestra una etiqueta con el texto \"Etiqueta 1\", dentro de un panel alineada a la izquierda en sentido horizontal, y al centro en sentido vertical.\n\n  > ```asciiart\n  > ┌────────────────────────────┐\n  > │                            │\n  > │ {Etiqueta 1}               │\n  > │                            │\n  > └────────────────────────────┘\n  > ```\n\n- **Botones:**\n\n  El texto dentro de los botones se representa sin signos en esta especificación de interfaz, y el borde del botón es completo.\n\n  El ejemplo siguiente muestra primero un botón con el texto \"Botón 1\" y después uno sólo con ícono de borrado (representado como basurero `🗑`).\n\n  > ```asciiart\n  > ┌───────────────┐\n  > │    Botón 1    │\n  > └───────────────┘\n  > ┌───────────────┐\n  > │      🗑        │\n  > └───────────────┘\n  > ```\n\n- **Campo de texto:**\n\n  Los campos de texto también se representan con un borde completo, pero se diferencian de los botones por mostrar el nombre del campo entre signos de menor y mayor '<>'. Además, la posición del texto dentro del campo de texto muestra la alineación requerida para los datos del campo.\n\n  El ejemplo siguiente muestra tres campos de texto, alineados al borde izquierdo, centrado y derecho, respectivamente.\n\n  > ```asciiart\n  > ┌─────────────────────────────────────────────┐\n  > │ <Campo de texto alineado a la izquierda>    │\n  > └─────────────────────────────────────────────┘\n  > ┌─────────────────────────────────────────────┐\n  > │           <Campo de texto centrado>         │\n  > └─────────────────────────────────────────────┘\n  > ┌─────────────────────────────────────────────┐\n  > │      <Campo de texto alineado a la derecha> │\n  > └─────────────────────────────────────────────┘\n  > ```\n\n- **Control emergente para mensajes:**\n\n  El control emergente para mensajes se representa como un cuadro con borde que emerge del borde del elemento gráfico que genera el mensaje.\n\n  El ejemplo siguiente muestra un panel que contiene un cuadro de texto, con el control emergente con un mensaje de error, considerando que tiene espacio suficiente para mostrarse hacia abajo y la derecha, que es el comportamiento por defecto.\n\n  > ```asciiart\n  > ┌───────────────────────────────────────────┐\n  > │        ┌─────────┐                        │\n  > │  Costo:│  -$1.234│                        │\n  > │        └─────────┘────────────────┐      │\n  > │        │   {Etiqueta con mensaje} │      │\n  > │        └───────────────────────────┘      │\n  > │                                           │\n  > └───────────────────────────────────────────┘\n  > ```\n\nSi en cambio, el elemento gráfico del cual emerge está en el límite inferior visible de la ventana o panel, el control emergente debería mostrarse hacia arriba del elemento gráfico.\n\n  > ```asciiart\n  > ┌────────────────────────────────────────────────┐\n  > │                                                │\n  > │        ┌───────────────────────────────┐      │\n  > │        │   Error: El costo debe ser un │      │\n  > │        │    un valor superior a cero.   │      │\n  > │        ┌─────────┐──────────────────────┘      │\n  > │  Costo:│  -$1.234│                             │\n  > │        └─────────┘                             │\n  > └────────────────────────────────────────────────┘\n  > ```\n\nSin embargo, si dada la posición o alineación del elemento gráfico del que emerge este se encuentra por ejemplo al borde derecho de la ventana o del panel, el control emergente debe alinearse con el borde derecho del elemento gráfico. En el siguiente diagrama de ejemplo ambos efectos ocurren simultáneamente.\n\n  > ```asciiart\n  > ┌────────────────────────────────────────────────┐\n  > │                                                │\n  > │                ┌─────────────────────────────┐│\n  > │                │  Error: El costo debe ser un││\n  > │                │   un valor superior a cero.  ││\n  > │                └────────────────────┌─────────┐│\n  > │                               Costo:│  -$1.234││\n  > │                                     └─────────┘│\n  > └────────────────────────────────────────────────┘\n  > ```\n\n- **Barra de desplazamiento:**\n\n  La barra de desplazamiento permite al usuario desplazarse verticalmente (y opcionalmente horizontalmente) por el contenido de un formulario o panel cuando este excede el área visible de la ventana o contenedor.\n\n  Se representa como una banda vertical o horizontal ubicada en el borde derecho o inferior del área desplazable, respectivamente.\n\n- **Indicador de plegado**\n\n  Este indicador implementa un icono en el programa a construir, que representa si un panel está plegado o desplegado.\n  Cuando una sección se muestra desplegada, significa que se deben mostrar todos los componentes gráficos que tienen activado el atributo `MOSTRAR_DESPLEGADO`, mientras que los que no lo tienen activado se deben ocultar. A su vez, cuando la sección se muestra plegada, significa que se deben mostrar todos los componentes gráficos con el atributo `MOSTRAR_PLEGADO`, y ocultar los que no lo tengan activo.\n\n  La tabla muestra el símbolo y las acciones a realizar cuando se hace clic en cada uno:\n\n  | Símbolo | Significado en diagrama                    | Acción al hacer clic en ícono |\n  |:-------:|--------------------------------------------|-------------------------------|\n  |   `▼`   | Indica mostrar una sección como desplegada | Plegar la sección             |\n  |   `▶`   | Indica mostrar una sección como plegada    | Desplegar la sección          |\n\n  - Sugerencia de implementación para atributo:\n    Clase `TipoPlegado` - Implementar como una clase que herede de `enum`, especificando que actúan como flag, con instancias `NEUTRO`, `MOSTRAR_DESPLEGADO`,  `MOSTRAR_PLEGADO`.\n\n- **Panel:**\n\n  Un Panel puede contener etiquetas, campos de texto, botones o tablas. Puede tener un título o no, y puede ser plegable o no.\n\n  Los paneles se representan aquí con un borde completo, y un indicador de plegado si tienen capacidad de desplegarse/plegarse. Los paneles que no tienen capacidad de plegado se muestran sin ese indicador.\n\n  - **Ejemplo de panel sin título**\n\n    Si el panel no tiene título, se representa con un borde completo y los elementos contenidos en éste. Los elementos se muestran alineados según se requiera.\n\n    > ```asciiart\n    > ┌─────────────────────────────────────────────────┐\n    > │                ┌──────────────┐ ┌─────────────┐ │\n    > │  {Etiqueta 1}  │    Botón 1   │ │   Botón 2   │ │\n    > │                └──────────────┘ └─────────────┘ │\n    > └─────────────────────────────────────────────────┘\n    > ```\n\n  - **Ejemplo de panel con título**\n\n    Si el panel tiene un título, este se muestra en la parte superior del elemento gráfico, seguido de los elementos contenidos en ella. El título se muestra con el texto alineado según se requiera (izquierda, centrado, derecha).\n\n    > ```asciiart\n    > ┌─Título─de─sección───────────────────────────────┐\n    > │                ┌──────────────┐ ┌─────────────┐ │\n    > │  {Etiqueta 1}  │    Botón 1   │ │   Botón 2   │ │\n    > │                └──────────────┘ └─────────────┘ │\n    > └─────────────────────────────────────────────────┘\n    > ```\n\n  - **Ejemplo de Panel Desplegado**\n\n    Si el panel está desplegado, el indicador se muestra apuntando hacia la derecha en el borde superior izquierdo.\n\n    > ```asciiart\n    > ┌─ ▼ Título─de─sección────────────────────────────┐\n    > │                ┌──────────────┐ ┌─────────────┐ │\n    > │  {Etiqueta 1}  │    Botón 1   │ │   Botón 2   │ │\n    > │                └──────────────┘ └─────────────┘ │\n    > └─────────────────────────────────────────────────┘\n    > ```\n\n  - **Ejemplo de Panel Plegado**\n\n    Si el panel está plegado, el indicador se representa apuntando hacia abajo en el borde superior izquierdo.\n\n    Los elementos contenidos en la sección plegada se pueden mostrar o no, dependiendo si se establece que deben mostrarse al estar plegados, que deben ser implementados como una propiedad de los elementos gráficos contenidos dentro de este panel.\n\n    En el ejemplo siguiente, se considera que es el mismo panel del ejemplo anterior,salvo que ahora está plegada y en cambio muestra dos etiquetas. La etiqueta de \"Etiqueta 1\" tiene la propiedad de mostrarse tanto al estar plegada como desplegada, mientras que la etiqueta de \"Etiqueta 2\" sólo se muestra al estar plegada. Por otro lado, los botones no se muestran al estar plegada la sección, pues en este ejemplo no se ha establecido que deban mostrarse al estar plegados.\n\n    > ```asciiart\n    > ┌─ ▶ Título─de─sección────────────────────────────┐\n    > │  {Etiqueta 1}                     {Etiqueta 2}  │\n    > └─────────────────────────────────────────────────┘\n    > ```\n\n- **Tabla:**\n\n  Una tabla es un elemento gráfico que contiene otros elementos gráficos: una fila de encabezados y múltiples filas de datos alineados en una grilla. En sentido vertical, contiene encabezados de columna en la primera fila, y luego continúan celdas de datos alineadas en una grilla.\n\n  La tabla se representa en esta especificación con un borde completo alrededor, las columnas se representan con caracteres `|` entre las celdas, mientras que las filas de la grilla sólo se representan con cambios de línea y bordes horizontales.\n\n  La especificación de una tabla contiene los encabezados de columna en la primera fila, la segunda fila la alineación de cada columna, y luego siguen las filas de datos. Los encabezados especifican el nombre de cada columna y también siguen la alineación especificada para cada columna.\n\n  - **Alineación de datos en la Tabla**\n\n    Los datos en la tabla pueden alinearse a la izquierda, derecha o centrados. La alineación se indica con guiones precedidos o terminados con dos puntos ':' al borde izquierdo o derecho de la celda. Así, ':----' indica que los datos están alineados a la izquierda, '----:' indica que están alineados a la derecha, y ':---:' indica que están centrados. Adicionalmente, si no se especifica la alineación, como en '-----', se asume que los datos están alineados a la izquierda.\n\n    En el siguiente ejemplo, se muestra una tabla con tres columnas: \"Item\" tiene alineación a la derecha, \"Producto\" a la izquierda, y \"Cantidad\" especifica datos centrados.\n\n    > ```asciiart\n    > ┌───────────────────────────────┐\n    > │   Item|Producto  |  Cantidad  │\n    > │------:|:---------|:----------:│\n    > │      1|ABC       |     3      │\n    > │      2|XYZ       |     9      │\n    > └───────────────────────────────┘\n    > ```\n\n## 3. Diagramas con especificación de interfaz para el programa\n\nA continuación, cada diagrama especifica las características de la interfaz el usuario a construir, en sus diferentes estados. Cada elemento gráfico a construir debe tomar su atributos y estados iniciales a partir de lo descrito en estos diagramas. así valores como el nombre, tipo de objeto gráfico, alineación, pertenencia a otro elemento gráfico, anclaje al borde u otro objeto gráfico, visibilidad al desplegarse o plegarse el panel, descripción de que acción hace un botón, u otros, deben determinarse a partir de estos diagramas.\n\n- Formulario dentro de ventana de la aplicación\n\n  La ventana de la aplicación primeramente tiene un panel que contiene la etiqueta con el Título del programa -centrada respecto al ancho de la ventana-, que para cada programa debe variar según el nombre del framework utilizado, Ejemplo, \"Cotizador De productos - customtkinter\", \"Cotizador De productos - Flet\", etcétera. Este panel está anclado al borde superior de la ventana, y tiene la capacidad de achicar su alto cuando el usuario vaya desplazándose hacia abajo en el formulario, manteniéndose en una capa flotante superior respecto al formulario.\n\n  Luego sigue un panel \"Datos cliente\", otro panel \"Detalle productos\", y un panel \"Previsualización\" -escondido por defecto-. Estos paneles constituyen el cuerpo del formulario que se desplaza debajo de los paneles superior e inferior, mostrando una barra de desplazamiento en el lado derecho, que muestra al usuario la posición de este.  El panel de \"Detalle de Productos\" contiene una tabla \"Productos Cotizados\".\n\n  Finalmente, existe un panel \"Botones de acción\" que esta anclado al borde inferior de la ventana, manteniéndose también en una capa flotante superior respecto al resto del formulario.\n\n  > ```asciiart\n  > ┌──────────────────────────────────────────────────────────────────┐\n  > │┌────────────────────────────────────────────────────────────────┐│\n  > ││         {Cotizador de Productos - <Nombre framework>}          ││\n  > │└────────────────────────────────────────────────────────────────┘│\n  > │┌─Datos─Cliente─────────────────────────────────────────────────┐▲│\n  > ││        ┌────────────────────────────────────────────────────┐ │││\n  > ││{Nombre}│ <Cliente>                                          │ │││\n  > ││        └────────────────────────────────────────────────────┘ │││\n  > │└───────────────────────────────────────────────────────────────┘││\n  > │┌─ ▼ Detalle─Productos──────────────────────────────────────────┐││\n  > ││ {Productos Cotizados}                                         │││\n  > ││ ┌───────────────────────────────────────────────────────────┐ │││\n  > ││ │  Item|Producto  | Cantidad |  Precio Unitario|       Total│ │││\n  > ││ │-----:|:---------|:--------:|----------------:|-----------:│ │││\n  > ││ │      |          |          |                 |            │ │││\n  > ││ │      |          |          |                 |            │ │││\n  > ││ └───────────────────────────────────────────────────────────┘ │││\n  > ││ ┌─────────────────┐                          ┌──────────────┐ │││\n  > ││ │  Limpiar Datos  │           {Total general}│  <Suma Total>│ │││\n  > ││ └─────────────────┘                          └──────────────┘ │││\n  > │└───────────────────────────────────────────────────────────────┘││\n  > │┌─ ▶ Visualizar─Cotización──────────────────────────────────────┐││\n  > │└───────────────────────────────────────────────────────────────┘▼│\n  > │┌────────────────────────────────────────────────────────────────┐│\n  > ││        ┌───────────────────┐      ┌───────────────────┐        ││\n  > ││        │ Grabar Cotización │      │      Cerrar       │        ││\n  > ││        └───────────────────┘      └───────────────────┘        ││\n  > │└────────────────────────────────────────────────────────────────┘│\n  > └──────────────────────────────────────────────────────────────────┘\n  > ```\n\n- Formulario con sección de previsualización visible\n\n  La sección de previsualización debe aparecer completa entre las sección de detalle de productos y el panel inferior con los botones. Este diagrama muestra parte de la ventana y como se representa el formulario con este panel desplegado.\n\n  > ```asciiart\n  > ┌─Datos─Cliente─────────────────────────────────────────────────┐▲\n  > │        ┌────────────────────────────────────────────────────┐ ││\n  > │{Nombre}│                                                    │ ││\n  > │        └────────────────────────────────────────────────────┘ ││\n  > └───────────────────────────────────────────────────────────────┘│\n  > ┌─ ▼ Detalle─Productos──────────────────────────────────────────┐│\n  > │ {Productos Cotizados}                                         ││\n  > │ ┌───────────────────────────────────────────────────────────┐ ││\n  > │ │  Item|Producto  | Cantidad |  Precio Unitario|       Total│ ││\n  > │ │-----:|:---------|:--------:|----------------:|-----------:│ ││\n  > │ │      |          |          |                 |            │ ││\n  > │ │      |          |          |                 |            │ ││\n  > │ └───────────────────────────────────────────────────────────┘ ││\n  > │ ┌─────────────────┐                          ┌──────────────┐ ││\n  > │ │  Limpiar Datos  │           {Total general}│  <Suma Total>│ ││\n  > │ └─────────────────┘                          └──────────────┘ ││\n  > └───────────────────────────────────────────────────────────────┘│\n  > ┌─ ▼ Visualizar─Cotización──────────────────────────────────────┐│\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > └───────────────────────────────────────────────────────────────┘▼\n  > ┌────────────────────────────────────────────────────────────────┐\n  > │        ┌───────────────────┐      ┌───────────────────┐        │\n  > │        │ Grabar Cotización │      │      Cerrar       │        │\n  > │        └───────────────────┘      └───────────────────┘        │\n  > └────────────────────────────────────────────────────────────────┘\n  > ```\n\n- Formulario con sección de Detalle de productos plegado\n\n  Para la sección de detalle de productos existen ciertos ciertos campos o etiquetas que se muestran de todas maneras al estar plegados.\n\n  En el ejemplo siguiente, la etiqueta \"Total general\" y campo \"Total\" se muestran en ambos casos. Además, la etiqueta de la cantidad de ítems \"Cantidad Items\" está oculta en la vista desplegada, pero al plegarse sí se muestra. Se ocultan el Botón \"Limpiar datos\" y la Tabla \"Detalle de productos\".\n\n  > ```asciiart\n  > ┌─Datos─Cliente─────────────────────────────────────────────────┐▲\n  > │        ┌────────────────────────────────────────────────────┐ ││\n  > │{Nombre}│                                                    │ ││\n  > │        └────────────────────────────────────────────────────┘ ││\n  > └───────────────────────────────────────────────────────────────┘│\n  > ┌─ ▶ Detalle─Productos──────────────────────────────────────────┐│\n  > │                                              ┌──────────────┐ ││\n  > │ {Cantidad Items}              {Total general}│  <Suma Total>│ ││\n  > │                                              └──────────────┘ ││\n  > └───────────────────────────────────────────────────────────────┘│\n  > ┌─ ▶ Visualizar─Cotización──────────────────────────────────────┐│\n  > └───────────────────────────────────────────────────────────────┘▼\n  > ┌────────────────────────────────────────────────────────────────┐\n  > │        ┌───────────────────┐      ┌───────────────────┐        │\n  > │        │ Grabar Cotización │      │      Cerrar       │        │\n  > │        └───────────────────┘      └───────────────────┘        │\n  > └────────────────────────────────────────────────────────────────┘\n  > ```\n\n## 4. Comportamiento responsivo esperado\n\nEsta sección detalla el comportamiento responsivo de la interfaz, complementando las definiciones generales de \"Características comunes\", \"Tablas\", \"Paneles\" y \"Especificaciones adicionales\".\n\n- El formulario debe mostrar scroll vertical si el contenido excede el alto visible (ver \"Características comunes\" y \"Barra de desplazamiento\").\n- Todos los paneles principales deben estirarse horizontalmente según el ancho de la ventana (ver \"Características comunes\").\n- El panel de título y el panel de botones deben permanecer fijos (flotantes) anclados al borde superior e inferior de la ventana, respectivamente (ver atributo de anclaje en \"Características comunes\").\n- El panel de título puede reducir su altura y/o fuente si la ventana es muy pequeña, pero sólo hasta modificar el título hasta el tamaño de fuente del texto normal con negritas, manteniendo márgenes verticales mínimos de 5px.\n- Las columnas de la tabla Detalle de Productos deben:\n  - Mantener proporciones al modificar el ancho de la ventana (ver \"Tablas\").\n  - Las columnas \"Cantidad\", \"Precio Unitario\" y \"Total\" pueden expandirse proporcionalmente, pero solo reducirse hasta el ancho mínimo necesario para mostrar su contenido más largo.\n  - La columna \"Producto\" puede expandirse solo hasta que las otras columnas alcancen su ancho mínimo, pero sus celdas pueden aumentar en altura usando texto multi-línea con ajuste de palabras (wordwrap).\n  - Permitir redimensionamiento manual arrastrando los bordes entre columnas, respetando las limitaciones anteriores (ver \"Tablas\").\n  - Activar scroll horizontal si no caben.\n- Las filas de la tabla Detalle de Productos deben:\n  - Activar scroll vertical si no caben (ver \"Tablas\").\n  - No permitir redimensionamiento manual de altura por parte del usuario.\n- Para el panel \"Detalle productos\":\n  - Los elementos mantienen su distribución según los diagramas y \"Especificaciones adicionales\", respetando márgenes sin solaparse.\n  - Estado desplegado: muestra tabla, etiqueta \"Productos Cotizados\", botón \"Limpiar datos\", etiqueta \"Total general\" y campo \"Suma Total\".\n  - Estado plegado: sólo muestra etiquetas \"Cantidad Ítems\" y \"Total general\", más el campo \"Suma Total\".\n  - La etiqueta \"Cantidad Items\" se ajusta automáticamente a su contenido sin truncarse.\n  - El campo \"Suma total\" mantiene como ancho, el mínimo entre el de la columna \"Total\" de la tabla y el ancho del texto del mismo campo.\n  - Activar scroll horizontal si los elementos no caben en el ancho disponible.\n- Para panel Visualizar Cotización:\n  - Si el panel está en Estado plegado, el botón de cierre debe habilitarse o deshabilitarse según el resultado de la validación 'Items Válidos en Detalle Productos'.\n  - En cambio Si el panel está desplegado, \n\n---\n\n## 5. Especificaciones adicionales\n\n### Detalles adicionales de campos\n\nPara especificar detalles que no pueden ser descritos en los diagramas, la tabla siguiente contiene detalles adicionales de campos:\n\n|Campo    | Tipo objeto gráfico, Tipo de datos | Detalles                         |\n|---------|:----------------------------------:|----------------------------------|\n|Cliente  | Campo de texto, Texto | Nombre del cliente, debe usar Validación Nombre Cliente, y recortar caracteres de espacio al principio y al final. |\n|Item     | Celda de tabla, Número entero | Generado automáticamente por el sistema (comienza en 1 numerando consecutivamente cada fila de la tabla), usa formato de cantidad sin decimales. |\n|Producto | Celda de tabla, Texto | Ingresado Por el usuario, debe usar Validación Nombre Producto y recortar caracteres de espacio al principio y al final. |\n|Cantidad | Celda de tabla, Número Entero | Ingresado por el usuario con *Parse de Cantidad*, *Validación de Cantidad* con valor positivo, para mostrarse usa formato de cantidad sin decimales. |\n|Precio Unitario | Celda de tabla, Cantidad monetaria | Ingresado por el usuario con *Parse de Formato Monetario* (si se ingresa con decimales se acepta redondeo de hasta dos dígitos), Validación de moneda con monto positivo, para mostrarse usa Formato Monetario hasta dos decimales. |\n|Total    | Celda de tabla, Cantidad monetaria | Calculado por el sistema cuando se ingresan producto, cantidad y precio unitario en la misma fila, es decir el resultado de `Cantidad * Precio Unitario` redondeado a cero decimales. Para mostrarse usa Formato Monetario sin decimales. |\n|Suma total | Campo de texto, cantidad monetaria | Calculado por el sistema luego de ingresado o modificado algún registro de la tabla, para mostrarse usa Formato Monetario sin decimales. |\n|Cantidad Items | Etiqueta, Texto | Calculado por el sistema luego de ingresar, modificar o eliminar algún registro de la tabla, para mostrarse usa formato de cantidad sin decimales. Solo considera celdas con datos; si tabla está vacía, mostrar \"Sin ítems\". Habiendo al menos un ítem, mostrar \"X Ítems\" o \"1 Ítem\" según corresponda. |\n\n### Reglas de cálculo automático\n\n| Campo calculado  | Fórmula o lógica                             | Evento que lo activa                 |\n|------------------|----------------------------------------------|--------------------------------------|\n| Total (por fila) | `Cantidad * Precio Unitario`                 | Cuando se modifica cantidad o precio |\n| Suma Total       | Suma de todos los campos \"Total\" de la tabla | Cuando se modifica una fila          |\n| Cantidad Ítems   | Concatenar valor de cantidad de ítems de la tabla con el texto \" Ítems\" o \" Ítem\" si hay 0 o 1 ítem en total. Restricción: Conteo de filas con producto válido y cantidad > 0 | Al agregar o quitar una fila válida      |\n\n### Especificación de implementación de formatos\n\n*Nota de implementación:* Para la representación en string de los formatos, tanto del de Cantidad, como del Monetario, se debe utilizar las funcionalidades de la librería `locale`, estableciéndose la utilización de esos formatos como constantes en todo el programa.\nComo se muestra en el siguiente ejemplo de código, se debe utilizar la constante `FORMATO_CANTIDAD` en todo el programa:\n\n```python\n  import locale\n  locale.setlocale(locale.LC_ALL, 'es_CL.UTF-8')  # Configuración para chile\n  numero = 1234567\n  FORMATO_CANTIDAD: str = \":n\"\n\n  formatted = f\"{numero{FORMATO_CANTIDAD}}\"  # \"1.234.567\"\n```\n\n### Detalle de Validaciones y Funciones de *Parse*\n\n- **Validación Nombre Cliente**\n  Esta validación implica que un texto debe ser de al menos una palabra que debe partir una letra (no importando si es mayúscula, minúscula o con acento), teniendo al menos tres caracteres. Ejemplo de valores válidos: \"Juan Pérez\", \"ABC\", \"Sociedad comercial S.A.\". Ejemplos no válidos: \"123\", \"A\", \"#ana\".\n\n- **Validación Nombre Producto**\n  Un texto debe tener al menos 3 caracteres partiendo por una letra (no importando si es mayúscula, minúscula o con acento).\n  Ejemplo de valores válidos: \"Jabón pollito\", \"BIC\", \"Lápiz #3\". Ejemplos no válidos: \"321\", \"Z\", \"?AB\".\n\n- **Validación de Cantidad con valor positivo**\n  Consiste en validar que es un número entero o de puntos flotante pero con valores mayores a cero.\n  *Nota de implementación:* Considerar que parámetro de entrada es de tipo int o float.\n  Ejemplo de valores válidos: `10000`, `123.00`. Ejemplos no válidos: `0`, `-123`, `math.inf`, `math.nan`.\n\n- **Validación de Moneda con monto positivo**\n  Consiste en validar que el monto de un valor monetario es un número entero o de punto flotante pero con valor mayor a cero.\n  *Nota de implementación:* Considerar que parámetro de entrada es de tipo int o float.\n  Ejemplo de valores válidos: `10000`, `123.00`. Ejemplos no válidos: `0`, `-123`, `math.inf`, `math.nan`.\n\n- **Validación Items Válidos en Detalle Productos**\n  Se debe validar que la tabla de Detalle Productos tenga registros válidos, es decir que existan filas con totales calculados, ignorando filas vacías que se muestren en pantalla o registros incompletos que no permitan calcular aún el total de la fila. La validación deben resultar falsa si los registros validos son cero, verdadera si hay al menos uno.\n\n- ***Parse* de Cantidad**\n  Al recibirse el texto, lo primero es recortar todos los caracteres de espacio al principio y al final. Luego, tratar de convertir al número entero o de punto flotante, pero respetando las convenciones de caracteres de punto decimal y de separador de miles que se use en este computador corriendo Windows. Si el texto entregado se puede transformar a un número en punto flotante, se debe usar la función de truncar con cero decimales. Si no se puede convertir a número, entregar error de valor.\n  *Nota de implementación:* Se deben utilizar las funcionalidades de la librería `locale` como se describió antes en la sección [Especificación de implementación de formatos](#especificación-de-implementación-de-formatos).\n\n- ***Parse* de Formato Monetario**\n  Al recibirse el texto, lo primero es recortar todos los caracteres de espacio al principio y al final. Luego, tratar de convertir al número entero o de punto flotante, pero respetando las convenciones de caracteres de moneda, punto decimal y de separador de miles que se use en este computador corriendo Windows. Luego considerando la cantidad de decimales especificada como parámetro opcional (valor por defecto cero, rechazando valores negativos como error de valor), se debe redondear el valor con esa especificación de decimales. Si no se puede convertir a número, entregar error de valor.\n*Nota de implementación:* Se deben utilizar las funcionalidades de la librería `locale` como se describió antes en la sección [Especificación de implementación de formatos](#especificación-de-implementación-de-formatos).\n\n### Acciones del usuario\n\n| Botón / Acción                | Comportamiento esperado                                                                     |\n|-------------------------------|---------------------------------------------------------------------------------------------|\n| Clic Botón de cierre en control emergente para mensajes | Cierra el control emergente, sin actualizar el estado del control vinculado. |\n| Clic Botón Grabar Cotización  | Validar todos los campos visibles. Si son válidos, generar archivo PDF.                     |\n| Clic Botón Cerrar             | Cierra la aplicación. Si hay cambios no guardados debe mostrar un diálogo de confirmación.  |\n| Clic Botón Limpiar Datos      | Elimina todas las filas de la tabla y reinicia el campo “Suma Total” a cero.                |\n| Clic `▶ / ▼` Detalle de Productos  | Alterna la visibilidad del panel de tabla de productos.                                |\n| Clic `▶ / ▼` Visualizar Cotización | Muestra/oculta el panel de previsualización, pero solo si ya hay datos disponibles.    |\n| Edición de celda de tabla     | Al modificar celda de cantidad o precio, recalcular celda “Total” de la fila, actualizar “Suma Total” y  “Cantidad Items”. Si se modifica celda producto, validar nombre. Si se actualiza “Cantidad Items”, se debe validar estado activación de Botón Visualizar Cotización. |\n| Clic en fila de tabla         | Selecciona la fila, permitiendo eliminarla con el botón de eliminación.                     |\n| Clic en ícono inserción tabla | Inserta una nueva fila vacía debajo de la fila actual. Posiciona el cursor en la primera celda editable. |\n| Clic en ícono eliminación tabla | Elimina la fila seleccionada, mostrando confirmación si la fila contiene datos.           |\n\n## 6. Referencias\n\n- Herramienta web para crear bosquejos: <https://asciiflow.com/>\n````\n</attachment>\n\n</attachments>\n<context>\nThe current date is 6 de agosto de 2025.\nNo active tasks or terminals found.\n</context>\n<editorContext>\nThe user's current file is c:\\Users\\Antonio\\gitrepos\\Test_UI_v3\\docs\\Especificaciones_UI.md. \n</editorContext>\n<repoContext>\nBelow is the information about the current repository. You can use this information when you need to calculate diffs or compare changes with the default branch.\nRepository name: Test_UI\nOwner: gatuno1\nCurrent branch: main\n\n</repoContext>\n<reminderInstructions>\nWhen using the insert_edit_into_file tool, avoid repeating existing code, instead use a line comment with \\`...existing code...\\` to represent regions of unchanged code.\nWhen using the replace_string_in_file tool, include 3-5 lines of unchanged code before and after the string you want to replace, to make it unambiguous which part of the file should be edited.\nIt is much faster to edit using the replace_string_in_file tool. Prefer replace_string_in_file for making edits and only fall back to insert_edit_into_file if it fails.\n</reminderInstructions>\n<userRequest>\nUtilízala La herramienta MCP Para obtener el ID de la librería de código fuente CustomTkinter\n</userRequest>\n"
            },
            {
              "type": 3,
              "cacheType": "ephemeral"
            }
          ],
          "renderedGlobalContext": [
            {
              "type": 1,
              "text": "<environment_info>\nThe user's current OS is: Windows\nThe user's default shell is: \"powershell.exe\" (Windows PowerShell v5.1). When you generate terminal commands, please generate them correctly for this shell. Use the `;` character if joining commands on a single line is needed.\n</environment_info>\n<workspace_info>\nThe following tasks can be executed using the run_vs_code_task tool if they are not already running:\n<workspaceFolder path=\"c:\\\\Users\\\\Antonio\\\\gitrepos\\\\Test_UI_v3\">\n<task id=\"shell: build\">\n{\n\t\"label\": \"build\",\n\t\"type\": \"shell\",\n\t\"command\": \"msbuild\",\n\t\"args\": [\n\t\t\"/property:GenerateFullPaths=true\",\n\t\t\"/t:build\",\n\t\t\"/consoleloggerparameters:NoSummary\"\n\t],\n\t\"group\": \"build\"\n}\n</task>\n\n</workspaceFolder>\nI am working in a workspace with the following folders:\n- c:\\Users\\Antonio\\gitrepos\\Test_UI_v3 \nI am working in a workspace that has the following structure:\n```\nCLAUDE.md\nGEMINI.md\nREADME.md\nrequirements-dev.txt\nrequirements.txt\ndocs/\n\tAI_Project_Assistant_Instructions.md\n\tAnalisis_temas_CustomTkinter copy.md\n\tAnalisis_temas_CustomTkinter.md\n\tDefiniciones_UI copy.md\n\tDefiniciones_UI.md\n\tEspecificaciones_UI.md\n\tEvaluacion_Customtkinter.md\n\treferences/\n\t\tColor and Themes _ CustomTkinter.url\n\t\tEjemplo_colores_web.png\n\t\tOceanix.json\n\t\tPaleta_demo.css\n\t\tPocketFlow _ Pocket Flow.url\n\t\tTema_dark-blue.png\n\t\tTema_dark-oceanix.png\n\t\tTema_light-blue.png\n\t\tTema_light-oceanix.png\n\t\tThe-Pocket_PocketFlow_ Pocket Flow_ 100-line LLM framework. Let Agents build Agents!.url\n\t\tTomSchimansky_CustomTkinter_ A modern and customizable python UI-library based on Tkinter.url\n\t\tTutorial - CustomTkinter.url\n\tTemas_ejemplo/\n\t\tBlue.json\n\t\tcomplex_example.py\n\t\tEjemplo_complejo_blue-dark.png\n\t\tEjemplo_complejo_blue-light.png\n\t\tEjemplo_complejo_oceanix-dark.png\n\t\tEjemplo_complejo_oceanix-light.png\n\t\tOceanix.json\nglobal_templates/\n\tcotizacion.html\nsrc/\ntests/\n```\nThis is the state of the context at this point in the conversation. The view of the workspace structure may be truncated. You can use tools to collect more context if needed.\n</workspace_info>\n"
            },
            {
              "type": 3,
              "cacheType": "ephemeral"
            }
          ],
          "toolCallRounds": [
            {
              "response": "Te ayudo a obtener el ID de la librería CustomTkinter usando la herramienta MCP Context7. ",
              "toolCalls": [
                {
                  "name": "mcp_context7_resolve-library-id",
                  "arguments": "{\"libraryName\": \"CustomTkinter\"}",
                  "id": "toolu_01XENLBkQi9YhCkQ69Fefz9j__vscode-1754493045779"
                }
              ],
              "toolInputRetry": 0,
              "id": "be3ecd4b-5f87-425c-a889-05579ca9e21d"
            },
            {
              "response": "**ID de la librería CustomTkinter encontrado:**\n\nEl ID de la librería CustomTkinter compatible con Context7 es:\n\n**`/tomschimansky/customtkinter`**\n\n**Detalles de la librería:**\n- **Nombre:** CustomTkinter\n- **Descripción:** Una librería moderna y personalizable de interfaz de usuario de Python basada en Tkinter\n- **Ejemplos de código disponibles:** 3\n- **Puntuación de confianza:** 8.7 (muy alta)\n\nEsta es la librería oficial de CustomTkinter desarrollada por Tom Schimansky, que es exactamente lo que necesitas para tu proyecto según las especificaciones que tienes en el archivo `Especificaciones_UI.md`. La alta puntuación de confianza (8.7) y el hecho de que sea el repositorio oficial lo confirman como la opción correcta.\n\nSi necesitas obtener la documentación específica de CustomTkinter, puedo usar este ID para acceder a los recursos y ejemplos de código disponibles.",
              "toolCalls": [],
              "toolInputRetry": 0,
              "id": "2d29e9ee-65c3-43d0-9910-eab38596030e"
            }
          ],
          "toolCallResults": {
            "toolu_01XENLBkQi9YhCkQ69Fefz9j__vscode-1754493045779": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 21,
                  "value": "Available Libraries (top matches):\n\nEach result includes:\n- Library ID: Context7-compatible identifier (format: /org/project)\n- Name: Library or package name\n- Description: Short summary\n- Code Snippets: Number of available code examples\n- Trust Score: Authority indicator\n- Versions: List of versions if available. Use one of those versions if and only if the user explicitly provides a version in their query.\n\nFor best results, select libraries based on name match, trust score, snippet coverage, and relevance to your use case.\n\n----------\n\n- Title: CustomTkinter\n- Context7-compatible library ID: /tomschimansky/customtkinter\n- Description: A modern and customizable python UI-library based on Tkinter\n- Code Snippets: 3\n- Trust Score: 8.7\n----------\n- Title: Lightspeed X-Series API\n- Context7-compatible library ID: /context7/x-series-api_lightspeedhq_com-reference-listcustomers\n- Description: The Lightspeed X-Series API provides programmatic access to manage retail operations, including customers, products, sales, and inventory, for Lightspeed POS systems.\n- Code Snippets: 6354\n----------\n- Title: GitHub Copilot Customization\n- Context7-compatible library ID: /context7/code_visualstudio\n- Description: Learn to customize GitHub Copilot's AI responses in Visual Studio Code, allowing you to tailor generated code and chat interactions to your specific coding practices and project requirements.\n- Code Snippets: 1984\n- Trust Score: 7.5\n----------\n- Title: Filament Custom Fields\n- Context7-compatible library ID: /context7/custom-fields_relaticle\n- Description: Add unlimited custom fields to any Filament resource dynamically without database migrations. Allows users to customize data through an intuitive admin panel, eliminating the need for developer intervention and deployments.\n- Code Snippets: 46\n- Trust Score: 7.5\n----------\n- Title: Jumpseller Liquid Theme Customization\n- Context7-compatible library ID: /context7/jumpseller_com-support-liquid\n- Description: This documentation details how to customize Jumpseller online stores using the Liquid markup language, enabling dynamic content and design modifications for themes.\n- Code Snippets: 466\n- Trust Score: 7.5\n----------\n- Title: S6 Overlay\n- Context7-compatible library ID: /just-containers/s6-overlay\n- Description: s6 overlay for containers (includes execline, s6-linux-utils & a custom init)\n- Code Snippets: 35\n- Trust Score: 6.3\n----------\n- Title: Kaseya Automation Team\n- Context7-compatible library ID: /kaseya-automation-team/kaseya-automation-team\n- Description: \n- Code Snippets: 2\n- Trust Score: 3.2\n----------\n- Title: NVIDIA AI Workbench SDXL Customization Example\n- Context7-compatible library ID: /nvidia/workbench-example-sdxl-customization\n- Description: An NVIDIA AI Workbench example project for customizing an SDXL model\n- Code Snippets: 20\n----------\n- Title: OpenLR\n- Context7-compatible library ID: /tomtom-international/openlr\n- Description: Reference implementation of OpenLR.  A map agnostic, dynamic location referencing method.\n- Code Snippets: 13\n- Trust Score: 8.7\n----------\n- Title: VTEX Product Customizer\n- Context7-compatible library ID: /vtex-apps/product-customizer\n- Description: VTEX product customizer app\n- Code Snippets: 9\n- Trust Score: 9.2\n----------\n- Title: Ecowittcustom Driver and Weewx Seasons Skin\n- Context7-compatible library ID: /wernerkr/ecowitt-or-davis-stations-and-season-skin\n- Description: Ecowittcustom driver and modified Weewx Seasons skin and Ecowitt stations/devices support with all available sensors (and DAVIS Weatherlink Live, VantagePro, AirLink too)\n- Code Snippets: 69\n- Trust Score: 5\n----------\n- Title: McCustomSkinLoader\n- Context7-compatible library ID: /xfl03/mccustomskinloader\n- Description: Customize Skin, Cape and Elytra in Minecraft 1.8-1.21\n- Code Snippets: 9\n- Trust Score: 9.8\n----------\n- Title: Apache Storm\n- Context7-compatible library ID: /apache/storm-site\n- Description: Mirror of Apache storm website Git repo\n- Code Snippets: 142\n- Trust Score: 9.1\n----------\n- Title: Atomizer\n- Context7-compatible library ID: /acss-io/atomizer\n- Description: A library to create small, reusable CSS that scales as your website grows.\n- Code Snippets: 321\n- Trust Score: 6.3\n----------\n- Title: Advanced Custom Fields\n- Context7-compatible library ID: /advancedcustomfields/acf\n- Description: Advanced Custom Fields \n- Code Snippets: 16\n- Trust Score: 7.4\n----------\n- Title: Voyage AI\n- Context7-compatible library ID: /austinfhunter/voyageai\n- Description: \n- Code Snippets: 6\n- Trust Score: 5.3\n----------\n- Title: Node Canvas\n- Context7-compatible library ID: /automattic/node-canvas\n- Description: Node canvas is a Cairo backed Canvas implementation for NodeJS.\n- Code Snippets: 51\n- Trust Score: 8.4\n----------\n- Title: Document Intelligence\n- Context7-compatible library ID: /azure-samples/document-intelligence-code-samples\n- Description: Sample site for Document Intelligence code samples and associated media.\n- Code Snippets: 210\n- Trust Score: 8.6\n----------\n- Title: Azure Verified Modules Network NetworkInterface\n- Context7-compatible library ID: /azure/terraform-azurerm-avm-res-network-networkinterface\n- Description: \n- Code Snippets: 63\n- Trust Score: 9.6\n----------\n- Title: BrowserAutomationStudio\n- Context7-compatible library ID: /bablosoft/bas\n- Description: BrowserAutomationStudio can automate everything that Chrome can.\n- Code Snippets: 153\n- Trust Score: 5.7\n----------\n- Title: Bitrix24 App Template Automation Rules\n- Context7-compatible library ID: /bitrix24/app-template-automation-rules\n- Description: \n- Code Snippets: 27\n- Trust Score: 7.2\n----------\n- Title: ATProto Interop Tests\n- Context7-compatible library ID: /bluesky-social/atproto-interop-tests\n- Description: Implementation-neutral test data for atproto\n- Code Snippets: 37\n- Trust Score: 7.4\n----------\n- Title: bpmn-js\n- Context7-compatible library ID: /bpmn-io/bpmn-js-example-custom-elements\n- Description: An example of how to support custom elements in bpmn-js while ensuring BPMN 2.0 compatibility.\n- Code Snippets: 5\n- Trust Score: 9\n----------\n- Title: JCommander\n- Context7-compatible library ID: /cbeust/jcommander\n- Description: Command line parsing framework for Java\n- Code Snippets: 4\n- Trust Score: 9.1\n----------\n- Title: CATIA Automation Interface\n- Context7-compatible library ID: /chenl126/catautomationinterface\n- Description: CATIA Development Documents\n- Code Snippets: 1464\n- Trust Score: 3.4\n----------\n- Title: Genie Parser\n- Context7-compatible library ID: /ciscotestautomation/genieparser\n- Description: sub-component of Genie that parse the device output into structured datastructure\n- Code Snippets: 3898\n- Trust Score: 8\n----------\n- Title: Resolve Node Configs Hierarchy\n- Context7-compatible library ID: /constantiner/resolve-node-configs-hierarchy\n- Description: Fight configuration headaches for different environments without pain\n- Code Snippets: 30\n- Trust Score: 6.9\n----------\n- Title: Zohar\n- Context7-compatible library ID: /constantiner/zohar\n- Description: A functional type-safe event emitter library with zero dependencies\n- Code Snippets: 23\n- Trust Score: 6.9\n----------\n- Title: Astro Integration Kit\n- Context7-compatible library ID: /context7/astro-integration-kit_netlify_app\n- Description: A package providing utilities to simplify and enhance the development of Astro integrations.\n- Code Snippets: 96\n- Trust Score: 7.5\n----------\n- Title: Azure AI Document Intelligence Client Library for Python\n- Context7-compatible library ID: /context7/azuresdkdocs_z19_web_core_windows_net-python-azure-ai-documentintelligence\n- Description: The Azure AI Document Intelligence client library for Python enables analysis of text and structured data from documents using machine learning. It supports layout extraction, key-value pair analysis, prebuilt and custom model analysis, and document classification.\n- Code Snippets: 607\n- Trust Score: 7.5\n----------\n- Title: Brian Dunning's FileMaker Custom Functions\n- Context7-compatible library ID: /context7/briandunning-filemaker-custom-functions\n- Description: Brian Dunning's FileMaker Custom Functions is a free, community-driven online library providing a large collection of custom functions for FileMaker users and developers.\n- Code Snippets: 12\n- Trust Score: 7.5\n----------\n- Title: Customer.io Expo SDK\n- Context7-compatible library ID: /context7/customer_io-integrations-sdk-expo\n- Description: Integrate Customer.io's powerful messaging and automation features into your Expo mobile applications with this dedicated SDK. Facilitates user tracking, event logging, and push notification delivery.\n- Code Snippets: 66\n- Trust Score: 7.5\n----------\n- Title: Customer Journey Analytics API\n- Context7-compatible library ID: /context7/developer_adobe_com-cja-apis-docs-api\n- Description: The Customer Journey Analytics API provides programmatic access to Adobe's Customer Journey Analytics, enabling developers to integrate and leverage customer journey data and insights.\n- Code Snippets: 210\n- Trust Score: 7.5\n----------\n- Title: DeDust SDK\n- Context7-compatible library ID: /context7/docs_dedust_io-docs-getting-started\n- Description: The DeDust SDK is a TypeScript/JavaScript toolkit designed for seamless interaction with the DeDust Protocol. It provides functionalities for contract actions, calculations, and access to the DeDust API.\n- Code Snippets: 23\n- Trust Score: 7.5\n----------\n- Title: Upmind\n- Context7-compatible library ID: /context7/docs_upmind_com-docs-getting-started\n- Description: Upmind is a comprehensive business automation platform for managing clients, services, billing, and support, offering extensive configuration and payment gateway integrations.\n- Code Snippets: 129\n- Trust Score: 7.5\n----------\n- Title: Tradier API\n- Context7-compatible library ID: /context7/documentation_tradier_com\n- Description: The Tradier API provides comprehensive tools for trading US-based equities and options, accessing real-time and historical market data, and managing brokerage accounts.\n- Code Snippets: 1596\n- Trust Score: 7.5\n----------\n- Title: Smartlook Integrations\n- Context7-compatible library ID: /context7/integrations_smartlook\n- Description: Smartlook Integrations provides a comprehensive suite of connections and installations for Smartlook, enabling users to integrate with various third-party technologies, tools, and platforms to gain deeper insights into user actions on websites and apps.\n- Code Snippets: 224\n- Trust Score: 7.5\n----------\n- Title: DFX\n- Context7-compatible library ID: /context7/internetcomputer_org-docs-building-apps-developer-tools-dfx\n- Description: DFX is the DFINITY command-line execution environment, serving as the primary tool for creating, deploying, and managing decentralized applications (dapps) on the Internet Computer platform.\n- Code Snippets: 3527\n- Trust Score: 7.5\n----------\n- Title: itBaima Library Document Center\n- Context7-compatible library ID: /context7/itbaima_cn-en-us-document\n- Description: A comprehensive document center for itBaima's course materials, covering JavaSE, JavaWeb, Spring, C language, Kotlin, and web front-end development, along with other technical notes and app recommendations.\n- Code Snippets: 7\n- Trust Score: 7.5\n----------\n- Title: Jest\n- Context7-compatible library ID: /context7/jestjs_io-docs-getting-started\n- Description: Jest is a delightful JavaScript Testing Framework designed for simplicity and ease of use. It enables developers to write and run tests for their JavaScript and TypeScript codebases.\n- Code Snippets: 2062\n- Trust Score: 7.5\n----------\n- Title: Azure AI Document Intelligence\n- Context7-compatible library ID: /context7/learn_microsoft-en-us-azure-ai-services-document-intelligence\n- Description: Azure AI Document Intelligence is a cloud-based Azure AI service that uses machine-learning models to automate data processing in applications and workflows, enhancing data-driven strategies and document search capabilities.\n- Code Snippets: 847\n- Trust Score: 7.5\n----------\n- Title: LangChain OllamaLLM\n- Context7-compatible library ID: /context7/python_langchain_com-docs-integrations-llms-ollama\n- Description: An integration within the LangChain framework that allows users to connect and interact with Large Language Models (LLMs) served locally using Ollama.\n- Code Snippets: 15567\n- Trust Score: 7.5\n----------\n- Title: O*NET Web Services\n- Context7-compatible library ID: /context7/services_onetcenter\n- Description: O*NET Web Services provides an API for developers to integrate O*NET data into their applications, offering tools like occupation keyword search and access to the Interest Profiler.\n- Code Snippets: 1\n- Trust Score: 7.5\n----------\n- Title: O*NET Web Services Reference Manual\n- Context7-compatible library ID: /context7/services_onetcenter-reference\n- Description: Documentation for O*NET Web Services, providing access to O*NET data through a RESTful API. Supports JSON and XML formats with sample code and error handling information.\n- Code Snippets: 728\n- Trust Score: 7.5\n----------\n- Title: usehooks-ts\n- Context7-compatible library ID: /context7/usehooks-ts_com-introduction\n- Description: usehooks-ts is a React hooks library written in TypeScript, providing a ready-to-use, tree-shakable set of hooks to build React applications faster and follow DRY principles.\n- Code Snippets: 116\n----------\n- Title: Valetudo MQTT Integration\n- Context7-compatible library ID: /context7/valetudo_cloud-pages\n- Description: Integrate your Valetudo-powered robot vacuum with MQTT brokers for seamless control and monitoring via home automation software like Home Assistant, openHAB, and Node-RED.\n- Code Snippets: 132\n- Trust Score: 7.5\n----------\n- Title: Artelys Knitro\n- Context7-compatible library ID: /context7/www_artelys_com-app-docs-knitro-1_introduction.html\n- Description: Artelys Knitro is a powerful software for numerical optimization. This documentation provides an overview of its capabilities, installation, and usage for solving complex optimization problems.\n- Code Snippets: 1019\n----------\n- Title: rosbag.js\n- Context7-compatible library ID: /cruise-automation/rosbag.js\n- Description: ROS bag file reader for JavaScript 👜\n- Code Snippets: 10\n- Trust Score: 8.6\n----------\n- Title: Pyscript\n- Context7-compatible library ID: /custom-components/pyscript\n- Description: Pyscript adds rich Python scripting to HASS\n- Code Snippets: 124\n- Trust Score: 9\n----------\n- Title: Customer.io CDP Analytics JS\n- Context7-compatible library ID: /customerio/cdp-analytics-js\n- Description: Customer.io Data Pipelines analytics client for Javascript (Browsers + Node.js)\n- Code Snippets: 7\n- Trust Score: 9.1"
                }
              ]
            }
          },
          "modelMessageId": "fae6d9c0-1619-4150-83b2-a42b28a8e94b",
          "responseId": "f652366f-833a-497a-8c7d-4152a172f575",
          "sessionId": "d0b79f6a-4104-4a90-b0bd-bbcad6f76644",
          "agentId": "github.copilot.editsAgent"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editsAgent",
        "description": "Edición de archivos en el área de trabajo en modo agente",
        "when": "config.chat.agent.enabled",
        "metadata": {
          "themeIcon": {
            "id": "tools"
          },
          "hasFollowups": false,
          "supportIssueReporting": false
        },
        "name": "agent",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "locations": [
          "panel"
        ],
        "modes": [
          "agent"
        ],
        "slashCommands": [
          {
            "name": "list"
          }
        ],
        "disambiguation": []
      },
      "contentReferences": [],
      "codeCitations": [],
      "timestamp": 1754514039777,
      "modelId": "github.copilot-chat/claude-sonnet-4"
    },
    {
      "requestId": "request_6581c37e-4a18-47b2-806e-bb4c5493fcd7",
      "message": {
        "text": "Si obtén la documentación de esta librería, para clarificar si los widget de esta librería tienen un atributo genérico para habilitar o deshabilitar, y en el caso de un CtkScrollableFrame si también lo tiene y cómo se representa eso gráficamente para el control",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 261
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 262
            },
            "text": "Si obtén la documentación de esta librería, para clarificar si los widget de esta librería tienen un atributo genérico para habilitar o deshabilitar, y en el caso de un CtkScrollableFrame si también lo tiene y cómo se representa eso gráficamente para el control",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": [
          {
            "kind": "file",
            "id": "vscode.implicit.viewport",
            "name": "file:Especificaciones_UI.md",
            "value": {
              "uri": {
                "$mid": 1,
                "fsPath": "c:\\Users\\Antonio\\gitrepos\\Test_UI_v3\\docs\\Especificaciones_UI.md",
                "_sep": 1,
                "external": "file:///c%3A/Users/Antonio/gitrepos/Test_UI_v3/docs/Especificaciones_UI.md",
                "path": "/c:/Users/Antonio/gitrepos/Test_UI_v3/docs/Especificaciones_UI.md",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 550,
                "startColumn": 128,
                "endLineNumber": 577,
                "endColumn": 1
              }
            },
            "modelDescription": "User's current visible code"
          }
        ]
      },
      "response": [
        {
          "value": "Te ayudo a obtener la documentación de CustomTkinter para clarificar sobre los atributos de habilitación/deshabilitación de widgets y específicamente del CtkScrollableFrame. ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/c:/Users/Antonio/gitrepos/Test_UI_v3/",
            "scheme": "file"
          }
        },
        {
          "kind": "prepareToolInvocation",
          "toolName": "mcp_context7_get-library-docs"
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": {
            "value": "Ejecutando `get-library-docs`",
            "isTrusted": false,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "pastTenseMessage": {
            "value": "Se ejecutó `get-library-docs` ",
            "isTrusted": false,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "originMessage": {
            "value": "[Servidor MCP: context7](command:workbench.mcp.showConfiguration?%255B%2522mcp.config.usrlocal%2522%252C%2522mcp.config.usrlocal.context7%2522%255D)",
            "isTrusted": true,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "isConfirmed": true,
          "isComplete": true,
          "resultDetails": {
            "input": "{\n  \"context7CompatibleLibraryID\": \"/tomschimansky/customtkinter\",\n  \"topic\": \"widget attributes enable disable state CtkScrollableFrame\",\n  \"tokens\": 15000\n}",
            "output": [
              {
                "isText": true,
                "value": "========================\nCODE SNIPPETS\n========================\nTITLE: Create a Basic CustomTkinter Window with a Button\nDESCRIPTION: A simple Python example demonstrating how to initialize a CustomTkinter application window, set its appearance mode (system, light, dark) and default color theme (blue, dark-blue, green). It then creates a `CTkButton` and places it in the center of the window, defining a simple function to be called on button press.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/Readme.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport customtkinter\n\ncustomtkinter.set_appearance_mode(\"System\")  # Modes: system (default), light, dark\ncustomtkinter.set_default_color_theme(\"blue\")  # Themes: blue (default), dark-blue, green\n\napp = customtkinter.CTk()  # create CTk window like you do with the Tk window\napp.geometry(\"400x240\")\n\ndef button_function():\n    print(\"button pressed\")\n\n# Use CTkButton instead of tkinter Button\nbutton = customtkinter.CTkButton(master=app, text=\"CTkButton\", command=button_function)\nbutton.place(relx=0.5, rely=0.5, anchor=customtkinter.CENTER)\n\napp.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Set Window Icon using Tkinter PhotoImage\nDESCRIPTION: This snippet demonstrates how to set the window icon in a CustomTkinter application. It utilizes the underlying Tkinter `wm iconphoto` method, typically called on the main window object, and requires a `tkinter.PhotoImage` object loaded from an image file.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.call(\"wm\", \"iconphoto\", self._w, tkinter.PhotoImage(file=\"test_images/CustomTkinter_logo_single.png\"))\n```\n\n----------------------------------------\n\nTITLE: Install and Update CustomTkinter Library\nDESCRIPTION: Instructions for installing the CustomTkinter UI library using pip. This includes the initial installation command and the command to upgrade an existing installation to the latest version, emphasizing frequent updates due to active development.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/Readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip3 install customtkinter\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip3 install customtkinter --upgrade\n```"
              }
            ],
            "isError": false
          },
          "toolSpecificData": {
            "kind": "input",
            "rawInput": {
              "context7CompatibleLibraryID": "/tomschimansky/customtkinter",
              "topic": "widget attributes enable disable state CtkScrollableFrame",
              "tokens": 15000
            }
          },
          "toolCallId": "47df4794-d346-4e0d-a47d-5155fa40fff6",
          "toolId": "mcp_context7_get-library-docs"
        },
        {
          "value": "La documentación inicial es limitada. Permíteme buscar información más específica sobre los atributos de estado y el CtkScrollableFrame: ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/c:/Users/Antonio/gitrepos/Test_UI_v3/",
            "scheme": "file"
          }
        },
        {
          "kind": "prepareToolInvocation",
          "toolName": "mcp_context7_get-library-docs"
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": {
            "value": "Ejecutando `get-library-docs`",
            "isTrusted": false,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "pastTenseMessage": {
            "value": "Se ejecutó `get-library-docs` ",
            "isTrusted": false,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "originMessage": {
            "value": "[Servidor MCP: context7](command:workbench.mcp.showConfiguration?%255B%2522mcp.config.usrlocal%2522%252C%2522mcp.config.usrlocal.context7%2522%255D)",
            "isTrusted": true,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "isConfirmed": true,
          "isComplete": true,
          "resultDetails": {
            "input": "{\n  \"context7CompatibleLibraryID\": \"/tomschimansky/customtkinter\",\n  \"tokens\": 20000,\n  \"topic\": \"CTkScrollableFrame widget properties attributes state enabled disabled normal appearance\"\n}",
            "output": [
              {
                "isText": true,
                "value": "========================\nCODE SNIPPETS\n========================\nTITLE: Create a Basic CustomTkinter Window with a Button\nDESCRIPTION: A simple Python example demonstrating how to initialize a CustomTkinter application window, set its appearance mode (system, light, dark) and default color theme (blue, dark-blue, green). It then creates a `CTkButton` and places it in the center of the window, defining a simple function to be called on button press.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/Readme.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport customtkinter\n\ncustomtkinter.set_appearance_mode(\"System\")  # Modes: system (default), light, dark\ncustomtkinter.set_default_color_theme(\"blue\")  # Themes: blue (default), dark-blue, green\n\napp = customtkinter.CTk()  # create CTk window like you do with the Tk window\napp.geometry(\"400x240\")\n\ndef button_function():\n    print(\"button pressed\")\n\n# Use CTkButton instead of tkinter Button\nbutton = customtkinter.CTkButton(master=app, text=\"CTkButton\", command=button_function)\nbutton.place(relx=0.5, rely=0.5, anchor=customtkinter.CENTER)\n\napp.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Set Window Icon using Tkinter PhotoImage\nDESCRIPTION: This snippet demonstrates how to set the window icon in a CustomTkinter application. It utilizes the underlying Tkinter `wm iconphoto` method, typically called on the main window object, and requires a `tkinter.PhotoImage` object loaded from an image file.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.call(\"wm\", \"iconphoto\", self._w, tkinter.PhotoImage(file=\"test_images/CustomTkinter_logo_single.png\"))\n```\n\n----------------------------------------\n\nTITLE: Install and Update CustomTkinter Library\nDESCRIPTION: Instructions for installing the CustomTkinter UI library using pip. This includes the initial installation command and the command to upgrade an existing installation to the latest version, emphasizing frequent updates due to active development.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/Readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip3 install customtkinter\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip3 install customtkinter --upgrade\n```"
              }
            ],
            "isError": false
          },
          "toolSpecificData": {
            "kind": "input",
            "rawInput": {
              "context7CompatibleLibraryID": "/tomschimansky/customtkinter",
              "tokens": 20000,
              "topic": "CTkScrollableFrame widget properties attributes state enabled disabled normal appearance"
            }
          },
          "toolCallId": "170d7f10-1db9-4478-8756-6abd84391b28",
          "toolId": "mcp_context7_get-library-docs"
        },
        {
          "value": "Permíteme buscar información más específica sobre widgets de CustomTkinter y sus propiedades: ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/c:/Users/Antonio/gitrepos/Test_UI_v3/",
            "scheme": "file"
          }
        },
        {
          "kind": "prepareToolInvocation",
          "toolName": "mcp_context7_get-library-docs"
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": {
            "value": "Ejecutando `get-library-docs`",
            "isTrusted": false,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "pastTenseMessage": {
            "value": "Se ejecutó `get-library-docs` ",
            "isTrusted": false,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "originMessage": {
            "value": "[Servidor MCP: context7](command:workbench.mcp.showConfiguration?%255B%2522mcp.config.usrlocal%2522%252C%2522mcp.config.usrlocal.context7%2522%255D)",
            "isTrusted": true,
            "supportThemeIcons": false,
            "supportHtml": false
          },
          "isConfirmed": true,
          "isComplete": true,
          "resultDetails": {
            "input": "{\n  \"context7CompatibleLibraryID\": \"/tomschimansky/customtkinter\",\n  \"tokens\": 25000,\n  \"topic\": \"CustomTkinter widgets CTkButton CTkEntry CTkFrame configuration options state normal disabled\"\n}",
            "output": [
              {
                "isText": true,
                "value": "========================\nCODE SNIPPETS\n========================\nTITLE: Create a Basic CustomTkinter Window with a Button\nDESCRIPTION: A simple Python example demonstrating how to initialize a CustomTkinter application window, set its appearance mode (system, light, dark) and default color theme (blue, dark-blue, green). It then creates a `CTkButton` and places it in the center of the window, defining a simple function to be called on button press.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/Readme.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport customtkinter\n\ncustomtkinter.set_appearance_mode(\"System\")  # Modes: system (default), light, dark\ncustomtkinter.set_default_color_theme(\"blue\")  # Themes: blue (default), dark-blue, green\n\napp = customtkinter.CTk()  # create CTk window like you do with the Tk window\napp.geometry(\"400x240\")\n\ndef button_function():\n    print(\"button pressed\")\n\n# Use CTkButton instead of tkinter Button\nbutton = customtkinter.CTkButton(master=app, text=\"CTkButton\", command=button_function)\nbutton.place(relx=0.5, rely=0.5, anchor=customtkinter.CENTER)\n\napp.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Set Window Icon using Tkinter PhotoImage\nDESCRIPTION: This snippet demonstrates how to set the window icon in a CustomTkinter application. It utilizes the underlying Tkinter `wm iconphoto` method, typically called on the main window object, and requires a `tkinter.PhotoImage` object loaded from an image file.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.call(\"wm\", \"iconphoto\", self._w, tkinter.PhotoImage(file=\"test_images/CustomTkinter_logo_single.png\"))\n```\n\n----------------------------------------\n\nTITLE: Install and Update CustomTkinter Library\nDESCRIPTION: Instructions for installing the CustomTkinter UI library using pip. This includes the initial installation command and the command to upgrade an existing installation to the latest version, emphasizing frequent updates due to active development.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/Readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip3 install customtkinter\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip3 install customtkinter --upgrade\n```"
              }
            ],
            "isError": false
          },
          "toolSpecificData": {
            "kind": "input",
            "rawInput": {
              "context7CompatibleLibraryID": "/tomschimansky/customtkinter",
              "tokens": 25000,
              "topic": "CustomTkinter widgets CTkButton CTkEntry CTkFrame configuration options state normal disabled"
            }
          },
          "toolCallId": "0043b739-0a45-46e5-ba8f-a16c1f17ea5b",
          "toolId": "mcp_context7_get-library-docs"
        },
        {
          "value": "Parece que la documentación disponible en Context7 es muy limitada para CustomTkinter. Permíteme buscar directamente información del repositorio de GitHub para obtener más detalles sobre las propiedades de los widgets: ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/c:/Users/Antonio/gitrepos/Test_UI_v3/",
            "scheme": "file"
          }
        },
        {
          "kind": "prepareToolInvocation",
          "toolName": "copilot_githubRepo"
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": "Buscando fragmentos de código relevantes en \"TomSchimansky/CustomTkinter\"",
          "pastTenseMessage": {
            "value": "Se ha buscado tomschimansky/customtkinter para obtener \"CTkScrollableFrame widget properties attributes state enable disable configuration\", 64 resultados",
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {}
          },
          "isConfirmed": true,
          "isComplete": true,
          "resultDetails": [
            {
              "uri": {
                "$mid": 1,
                "fsPath": "\\tomschimansky\\customtkinter\\tree\\main\\customtkinter\\windows\\widgets\\ctk_checkbox.py",
                "_sep": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L247-L272",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L247-L272"
              },
              "range": {
                "startLineNumber": 248,
                "startColumn": 1,
                "endLineNumber": 273,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "\\tomschimansky\\customtkinter\\tree\\main\\customtkinter\\windows\\widgets\\ctk_checkbox.py",
                "_sep": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L384-L399",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L384-L399"
              },
              "range": {
                "startLineNumber": 385,
                "startColumn": 1,
                "endLineNumber": 400,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "\\tomschimansky\\customtkinter\\tree\\main\\customtkinter\\windows\\widgets\\ctk_entry.py",
                "_sep": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L194-L218",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L194-L218"
              },
              "range": {
                "startLineNumber": 195,
                "startColumn": 1,
                "endLineNumber": 219,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "\\tomschimansky\\customtkinter\\tree\\main\\customtkinter\\windows\\widgets\\ctk_frame.py",
                "_sep": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L109-L127",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L109-L127"
              },
              "range": {
                "startLineNumber": 110,
                "startColumn": 1,
                "endLineNumber": 128,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "\\tomschimansky\\customtkinter\\tree\\main\\customtkinter\\windows\\widgets\\ctk_frame.py",
                "_sep": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L127-L132",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L127-L132"
              },
              "range": {
                "startLineNumber": 128,
                "startColumn": 1,
                "endLineNumber": 133,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "\\tomschimansky\\customtkinter\\tree\\main\\customtkinter\\windows\\widgets\\ctk_frame.py",
                "_sep": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L134-L155",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L134-L155"
              },
              "range": {
                "startLineNumber": 135,
                "startColumn": 1,
                "endLineNumber": 156,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L155-L167",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L155-L167"
              },
              "range": {
                "startLineNumber": 156,
                "startColumn": 1,
                "endLineNumber": 168,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L16-L35",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L16-L35"
              },
              "range": {
                "startLineNumber": 17,
                "startColumn": 1,
                "endLineNumber": 36,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L35-L53",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L35-L53"
              },
              "range": {
                "startLineNumber": 36,
                "startColumn": 1,
                "endLineNumber": 54,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L53-L65",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L53-L65"
              },
              "range": {
                "startLineNumber": 54,
                "startColumn": 1,
                "endLineNumber": 66,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L94-L108",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L94-L108"
              },
              "range": {
                "startLineNumber": 95,
                "startColumn": 1,
                "endLineNumber": 109,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L0-L19",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L0-L19"
              },
              "range": {
                "startLineNumber": 1,
                "startColumn": 1,
                "endLineNumber": 20,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L112-L121",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L112-L121"
              },
              "range": {
                "startLineNumber": 113,
                "startColumn": 1,
                "endLineNumber": 122,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L122-L137",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L122-L137"
              },
              "range": {
                "startLineNumber": 123,
                "startColumn": 1,
                "endLineNumber": 138,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L138-L146",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L138-L146"
              },
              "range": {
                "startLineNumber": 139,
                "startColumn": 1,
                "endLineNumber": 147,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L148-L169",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L148-L169"
              },
              "range": {
                "startLineNumber": 149,
                "startColumn": 1,
                "endLineNumber": 170,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L169-L184",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L169-L184"
              },
              "range": {
                "startLineNumber": 170,
                "startColumn": 1,
                "endLineNumber": 185,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L185-L206",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L185-L206"
              },
              "range": {
                "startLineNumber": 186,
                "startColumn": 1,
                "endLineNumber": 207,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L19-L34",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L19-L34"
              },
              "range": {
                "startLineNumber": 20,
                "startColumn": 1,
                "endLineNumber": 35,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L208-L229",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L208-L229"
              },
              "range": {
                "startLineNumber": 209,
                "startColumn": 1,
                "endLineNumber": 230,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L229-L233",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L229-L233"
              },
              "range": {
                "startLineNumber": 230,
                "startColumn": 1,
                "endLineNumber": 234,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L234-L245",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L234-L245"
              },
              "range": {
                "startLineNumber": 235,
                "startColumn": 1,
                "endLineNumber": 246,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L247-L261",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L247-L261"
              },
              "range": {
                "startLineNumber": 248,
                "startColumn": 1,
                "endLineNumber": 262,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L261-L269",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L261-L269"
              },
              "range": {
                "startLineNumber": 262,
                "startColumn": 1,
                "endLineNumber": 270,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L270-L301",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L270-L301"
              },
              "range": {
                "startLineNumber": 271,
                "startColumn": 1,
                "endLineNumber": 302,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L273-L315",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L273-L315"
              },
              "range": {
                "startLineNumber": 274,
                "startColumn": 1,
                "endLineNumber": 316,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L302-L316",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L302-L316"
              },
              "range": {
                "startLineNumber": 303,
                "startColumn": 1,
                "endLineNumber": 317,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L35-L271",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L35-L271"
              },
              "range": {
                "startLineNumber": 36,
                "startColumn": 1,
                "endLineNumber": 272,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L35-L52",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L35-L52"
              },
              "range": {
                "startLineNumber": 36,
                "startColumn": 1,
                "endLineNumber": 53,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L52-L63",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L52-L63"
              },
              "range": {
                "startLineNumber": 53,
                "startColumn": 1,
                "endLineNumber": 64,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L63-L78",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L63-L78"
              },
              "range": {
                "startLineNumber": 64,
                "startColumn": 1,
                "endLineNumber": 79,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L78-L89",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L78-L89"
              },
              "range": {
                "startLineNumber": 79,
                "startColumn": 1,
                "endLineNumber": 90,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L90-L91",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L90-L91"
              },
              "range": {
                "startLineNumber": 91,
                "startColumn": 1,
                "endLineNumber": 92,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L92-L96",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L92-L96"
              },
              "range": {
                "startLineNumber": 93,
                "startColumn": 1,
                "endLineNumber": 97,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L98-L112",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L98-L112"
              },
              "range": {
                "startLineNumber": 99,
                "startColumn": 1,
                "endLineNumber": 113,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L147-L161",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L147-L161"
              },
              "range": {
                "startLineNumber": 148,
                "startColumn": 1,
                "endLineNumber": 162,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L16-L41",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L16-L41"
              },
              "range": {
                "startLineNumber": 17,
                "startColumn": 1,
                "endLineNumber": 42,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L163-L188",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L163-L188"
              },
              "range": {
                "startLineNumber": 164,
                "startColumn": 1,
                "endLineNumber": 189,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L189-L190",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L189-L190"
              },
              "range": {
                "startLineNumber": 190,
                "startColumn": 1,
                "endLineNumber": 191,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L216-L228",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L216-L228"
              },
              "range": {
                "startLineNumber": 217,
                "startColumn": 1,
                "endLineNumber": 229,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L41-L56",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L41-L56"
              },
              "range": {
                "startLineNumber": 42,
                "startColumn": 1,
                "endLineNumber": 57,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L56-L75",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L56-L75"
              },
              "range": {
                "startLineNumber": 57,
                "startColumn": 1,
                "endLineNumber": 76,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L76-L257",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L76-L257"
              },
              "range": {
                "startLineNumber": 77,
                "startColumn": 1,
                "endLineNumber": 258,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L76-L88",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L76-L88"
              },
              "range": {
                "startLineNumber": 77,
                "startColumn": 1,
                "endLineNumber": 89,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L201-L226",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L201-L226"
              },
              "range": {
                "startLineNumber": 202,
                "startColumn": 1,
                "endLineNumber": 227,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L226-L252",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L226-L252"
              },
              "range": {
                "startLineNumber": 227,
                "startColumn": 1,
                "endLineNumber": 253,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L252-L274",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L252-L274"
              },
              "range": {
                "startLineNumber": 253,
                "startColumn": 1,
                "endLineNumber": 275,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L33-L276",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L33-L276"
              },
              "range": {
                "startLineNumber": 34,
                "startColumn": 1,
                "endLineNumber": 277,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L257-L282",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L257-L282"
              },
              "range": {
                "startLineNumber": 258,
                "startColumn": 1,
                "endLineNumber": 283,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L283-L306",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L283-L306"
              },
              "range": {
                "startLineNumber": 284,
                "startColumn": 1,
                "endLineNumber": 307,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L193-L213",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L193-L213"
              },
              "range": {
                "startLineNumber": 194,
                "startColumn": 1,
                "endLineNumber": 214,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L248-L266",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L248-L266"
              },
              "range": {
                "startLineNumber": 249,
                "startColumn": 1,
                "endLineNumber": 267,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L266-L278",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L266-L278"
              },
              "range": {
                "startLineNumber": 267,
                "startColumn": 1,
                "endLineNumber": 279,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L278-L290",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L278-L290"
              },
              "range": {
                "startLineNumber": 279,
                "startColumn": 1,
                "endLineNumber": 291,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L39-L59",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L39-L59"
              },
              "range": {
                "startLineNumber": 40,
                "startColumn": 1,
                "endLineNumber": 60,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_textbox.py#L253-L272",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_textbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L253-L272"
              },
              "range": {
                "startLineNumber": 254,
                "startColumn": 1,
                "endLineNumber": 273,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_textbox.py#L49-L308",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_textbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L49-L308"
              },
              "range": {
                "startLineNumber": 50,
                "startColumn": 1,
                "endLineNumber": 309,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L108-L118",
                "path": "/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L108-L118"
              },
              "range": {
                "startLineNumber": 109,
                "startColumn": 1,
                "endLineNumber": 119,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L5-L30",
                "path": "/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L5-L30"
              },
              "range": {
                "startLineNumber": 6,
                "startColumn": 1,
                "endLineNumber": 31,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L91-L126",
                "path": "/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L91-L126"
              },
              "range": {
                "startLineNumber": 92,
                "startColumn": 1,
                "endLineNumber": 127,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L92-L108",
                "path": "/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L92-L108"
              },
              "range": {
                "startLineNumber": 93,
                "startColumn": 1,
                "endLineNumber": 109,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py#L0-L19",
                "path": "/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L0-L19"
              },
              "range": {
                "startLineNumber": 1,
                "startColumn": 1,
                "endLineNumber": 20,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py#L20-L34",
                "path": "/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L20-L34"
              },
              "range": {
                "startLineNumber": 21,
                "startColumn": 1,
                "endLineNumber": 35,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py#L34-L39",
                "path": "/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L34-L39"
              },
              "range": {
                "startLineNumber": 35,
                "startColumn": 1,
                "endLineNumber": 40,
                "endColumn": 1
              }
            }
          ],
          "toolCallId": "58f25b30-f870-4ce9-bf76-42962eb2b02f",
          "toolId": "copilot_githubRepo"
        },
        {
          "value": "Ahora busquemos información más específica sobre el atributo `state` en los widgets: ",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/c:/Users/Antonio/gitrepos/Test_UI_v3/",
            "scheme": "file"
          }
        },
        {
          "kind": "prepareToolInvocation",
          "toolName": "copilot_githubRepo"
        },
        {
          "kind": "toolInvocationSerialized",
          "invocationMessage": "Buscando fragmentos de código relevantes en \"TomSchimansky/CustomTkinter\"",
          "pastTenseMessage": {
            "value": "Se ha buscado tomschimansky/customtkinter para obtener \"CTkButton CTkEntry CTkCheckBox state attribute normal disabled configuration\", 64 resultados",
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {}
          },
          "isConfirmed": true,
          "isComplete": true,
          "resultDetails": [
            {
              "uri": {
                "$mid": 1,
                "fsPath": "\\tomschimansky\\customtkinter\\tree\\main\\customtkinter\\windows\\widgets\\ctk_button.py",
                "_sep": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L266-L284",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L266-L284"
              },
              "range": {
                "startLineNumber": 267,
                "startColumn": 1,
                "endLineNumber": 285,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "\\tomschimansky\\customtkinter\\tree\\main\\customtkinter\\windows\\widgets\\ctk_button.py",
                "_sep": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L352-L377",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L352-L377"
              },
              "range": {
                "startLineNumber": 353,
                "startColumn": 1,
                "endLineNumber": 378,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "\\tomschimansky\\customtkinter\\tree\\main\\customtkinter\\windows\\widgets\\ctk_button.py",
                "_sep": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L377-L401",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L377-L401"
              },
              "range": {
                "startLineNumber": 378,
                "startColumn": 1,
                "endLineNumber": 402,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "\\tomschimansky\\customtkinter\\tree\\main\\customtkinter\\windows\\widgets\\ctk_button.py",
                "_sep": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L401-L424",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L401-L424"
              },
              "range": {
                "startLineNumber": 402,
                "startColumn": 1,
                "endLineNumber": 425,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "\\tomschimansky\\customtkinter\\tree\\main\\customtkinter\\windows\\widgets\\ctk_button.py",
                "_sep": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L425-L442",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L425-L442"
              },
              "range": {
                "startLineNumber": 426,
                "startColumn": 1,
                "endLineNumber": 443,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "fsPath": "\\tomschimansky\\customtkinter\\tree\\main\\customtkinter\\windows\\widgets\\ctk_button.py",
                "_sep": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L444-L471",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L444-L471"
              },
              "range": {
                "startLineNumber": 445,
                "startColumn": 1,
                "endLineNumber": 472,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L471-L484",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L471-L484"
              },
              "range": {
                "startLineNumber": 472,
                "startColumn": 1,
                "endLineNumber": 485,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L485-L498",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L485-L498"
              },
              "range": {
                "startLineNumber": 486,
                "startColumn": 1,
                "endLineNumber": 499,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L519-L543",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L519-L543"
              },
              "range": {
                "startLineNumber": 520,
                "startColumn": 1,
                "endLineNumber": 544,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L64-L77",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L64-L77"
              },
              "range": {
                "startLineNumber": 65,
                "startColumn": 1,
                "endLineNumber": 78,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L77-L99",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L77-L99"
              },
              "range": {
                "startLineNumber": 78,
                "startColumn": 1,
                "endLineNumber": 100,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L110-L124",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L110-L124"
              },
              "range": {
                "startLineNumber": 111,
                "startColumn": 1,
                "endLineNumber": 125,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L125-L136",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L125-L136"
              },
              "range": {
                "startLineNumber": 126,
                "startColumn": 1,
                "endLineNumber": 137,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L166-L447",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L166-L447"
              },
              "range": {
                "startLineNumber": 167,
                "startColumn": 1,
                "endLineNumber": 448,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L17-L35",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L17-L35"
              },
              "range": {
                "startLineNumber": 18,
                "startColumn": 1,
                "endLineNumber": 36,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L176-L193",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L176-L193"
              },
              "range": {
                "startLineNumber": 177,
                "startColumn": 1,
                "endLineNumber": 194,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L193-L211",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L193-L211"
              },
              "range": {
                "startLineNumber": 194,
                "startColumn": 1,
                "endLineNumber": 212,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L211-L221",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L211-L221"
              },
              "range": {
                "startLineNumber": 212,
                "startColumn": 1,
                "endLineNumber": 222,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L223-L247",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L223-L247"
              },
              "range": {
                "startLineNumber": 224,
                "startColumn": 1,
                "endLineNumber": 248,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L247-L272",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L247-L272"
              },
              "range": {
                "startLineNumber": 248,
                "startColumn": 1,
                "endLineNumber": 273,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L272-L295",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L272-L295"
              },
              "range": {
                "startLineNumber": 273,
                "startColumn": 1,
                "endLineNumber": 296,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L295-L305",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L295-L305"
              },
              "range": {
                "startLineNumber": 296,
                "startColumn": 1,
                "endLineNumber": 306,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L307-L334",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L307-L334"
              },
              "range": {
                "startLineNumber": 308,
                "startColumn": 1,
                "endLineNumber": 335,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L334-L347",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L334-L347"
              },
              "range": {
                "startLineNumber": 335,
                "startColumn": 1,
                "endLineNumber": 348,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L34-L158",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L34-L158"
              },
              "range": {
                "startLineNumber": 35,
                "startColumn": 1,
                "endLineNumber": 159,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L348-L369",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L348-L369"
              },
              "range": {
                "startLineNumber": 349,
                "startColumn": 1,
                "endLineNumber": 370,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L35-L54",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L35-L54"
              },
              "range": {
                "startLineNumber": 36,
                "startColumn": 1,
                "endLineNumber": 55,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L370-L383",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L370-L383"
              },
              "range": {
                "startLineNumber": 371,
                "startColumn": 1,
                "endLineNumber": 384,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L384-L399",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L384-L399"
              },
              "range": {
                "startLineNumber": 385,
                "startColumn": 1,
                "endLineNumber": 400,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L400-L423",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L400-L423"
              },
              "range": {
                "startLineNumber": 401,
                "startColumn": 1,
                "endLineNumber": 424,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L424-L444",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L424-L444"
              },
              "range": {
                "startLineNumber": 425,
                "startColumn": 1,
                "endLineNumber": 445,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L461-L469",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L461-L469"
              },
              "range": {
                "startLineNumber": 462,
                "startColumn": 1,
                "endLineNumber": 470,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L54-L66",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L54-L66"
              },
              "range": {
                "startLineNumber": 55,
                "startColumn": 1,
                "endLineNumber": 67,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L66-L88",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L66-L88"
              },
              "range": {
                "startLineNumber": 67,
                "startColumn": 1,
                "endLineNumber": 89,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L88-L110",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L88-L110"
              },
              "range": {
                "startLineNumber": 89,
                "startColumn": 1,
                "endLineNumber": 111,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L170-L187",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L170-L187"
              },
              "range": {
                "startLineNumber": 171,
                "startColumn": 1,
                "endLineNumber": 188,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L194-L218",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L194-L218"
              },
              "range": {
                "startLineNumber": 195,
                "startColumn": 1,
                "endLineNumber": 219,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L219-L242",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L219-L242"
              },
              "range": {
                "startLineNumber": 220,
                "startColumn": 1,
                "endLineNumber": 243,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L243-L253",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L243-L253"
              },
              "range": {
                "startLineNumber": 244,
                "startColumn": 1,
                "endLineNumber": 254,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L308-L331",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L308-L331"
              },
              "range": {
                "startLineNumber": 309,
                "startColumn": 1,
                "endLineNumber": 332,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L346-L383",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L346-L383"
              },
              "range": {
                "startLineNumber": 347,
                "startColumn": 1,
                "endLineNumber": 384,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L231-L255",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L231-L255"
              },
              "range": {
                "startLineNumber": 232,
                "startColumn": 1,
                "endLineNumber": 256,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L256-L280",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L256-L280"
              },
              "range": {
                "startLineNumber": 257,
                "startColumn": 1,
                "endLineNumber": 281,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L280-L290",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L280-L290"
              },
              "range": {
                "startLineNumber": 281,
                "startColumn": 1,
                "endLineNumber": 291,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L318-L333",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L318-L333"
              },
              "range": {
                "startLineNumber": 319,
                "startColumn": 1,
                "endLineNumber": 334,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L334-L355",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L334-L355"
              },
              "range": {
                "startLineNumber": 335,
                "startColumn": 1,
                "endLineNumber": 356,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L356-L378",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L356-L378"
              },
              "range": {
                "startLineNumber": 357,
                "startColumn": 1,
                "endLineNumber": 379,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L379-L405",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L379-L405"
              },
              "range": {
                "startLineNumber": 380,
                "startColumn": 1,
                "endLineNumber": 406,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L65-L85",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L65-L85"
              },
              "range": {
                "startLineNumber": 66,
                "startColumn": 1,
                "endLineNumber": 86,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_segmented_button.py#L341-L357",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_segmented_button.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L341-L357"
              },
              "range": {
                "startLineNumber": 342,
                "startColumn": 1,
                "endLineNumber": 358,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L257-L282",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L257-L282"
              },
              "range": {
                "startLineNumber": 258,
                "startColumn": 1,
                "endLineNumber": 283,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L283-L306",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L283-L306"
              },
              "range": {
                "startLineNumber": 284,
                "startColumn": 1,
                "endLineNumber": 307,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L306-L329",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L306-L329"
              },
              "range": {
                "startLineNumber": 307,
                "startColumn": 1,
                "endLineNumber": 330,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L329-L347",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L329-L347"
              },
              "range": {
                "startLineNumber": 330,
                "startColumn": 1,
                "endLineNumber": 348,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L34-L55",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L34-L55"
              },
              "range": {
                "startLineNumber": 35,
                "startColumn": 1,
                "endLineNumber": 56,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L349-L374",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L349-L374"
              },
              "range": {
                "startLineNumber": 350,
                "startColumn": 1,
                "endLineNumber": 375,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L375-L396",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L375-L396"
              },
              "range": {
                "startLineNumber": 376,
                "startColumn": 1,
                "endLineNumber": 397,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L397-L424",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L397-L424"
              },
              "range": {
                "startLineNumber": 398,
                "startColumn": 1,
                "endLineNumber": 425,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L425-L445",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L425-L445"
              },
              "range": {
                "startLineNumber": 426,
                "startColumn": 1,
                "endLineNumber": 446,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L55-L62",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L55-L62"
              },
              "range": {
                "startLineNumber": 56,
                "startColumn": 1,
                "endLineNumber": 63,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L63-L84",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L63-L84"
              },
              "range": {
                "startLineNumber": 64,
                "startColumn": 1,
                "endLineNumber": 85,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L266-L278",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L266-L278"
              },
              "range": {
                "startLineNumber": 267,
                "startColumn": 1,
                "endLineNumber": 279,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L278-L290",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L278-L290"
              },
              "range": {
                "startLineNumber": 279,
                "startColumn": 1,
                "endLineNumber": 291,
                "endColumn": 1
              }
            },
            {
              "uri": {
                "$mid": 1,
                "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L312-L325",
                "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                "scheme": "https",
                "authority": "github.com",
                "fragment": "L312-L325"
              },
              "range": {
                "startLineNumber": 313,
                "startColumn": 1,
                "endLineNumber": 326,
                "endColumn": 1
              }
            }
          ],
          "toolCallId": "9cf4763e-44d8-459e-b0d1-fb0bc7c2798a",
          "toolId": "copilot_githubRepo"
        },
        {
          "value": "Basado en la información obtenida de la documentación y el código fuente de CustomTkinter, puedo proporcionarte clarificaciones importantes sobre los atributos de habilitación/deshabilitación:\n\n## **Atributos de Estado en CustomTkinter**\n\n### **1. Atributo `state` genérico**\n\n**SÍ**, los widgets de CustomTkinter tienen un atributo genérico `state` para habilitar/deshabilitar. Este atributo acepta los valores estándar de tkinter:\n\n- `tkinter.NORMAL` (habilitado)\n- `tkinter.DISABLED` (deshabilitado)\n\n**Widgets que soportan el atributo `state`:**\n- `CTkButton`\n- `CTkEntry` \n- `CTkCheckBox`\n- `CTkRadioButton`\n- `CTkSwitch`\n- `CTkSlider`\n- `CTkTabview`\n\n### **2. CTkScrollableFrame y el atributo `state`**\n\n**NO**, el `CTkScrollableFrame` **NO tiene** un atributo `state` propio. Esto es importante porque:\n\n1. `CTkScrollableFrame` hereda de `tkinter.Frame`, no de `CTkBaseClass`\n2. Es un contenedor compuesto por varios elementos internos\n3. No implementa lógica de habilitación/deshabilitación propia\n\n### **3. Representación Visual del Estado Deshabilitado**\n\nCuando un widget está deshabilitado (`state=tkinter.DISABLED`):\n\n**Cambios visuales:**\n- **Cursor**: Cambia a \"arrow\" (flecha normal) en lugar del cursor interactivo\n- **Color de texto**: Usa `text_color_disabled` en lugar de `text_color`\n- **Eventos**: No responde a clics ni interacciones del usuario\n- **Apariencia**: Algunos widgets pueden cambiar su apariencia visual\n\n**Ejemplo de uso:**\n```python\nimport customtkinter\nimport tkinter\n\n# Crear widgets\nbutton = customtkinter.CTkButton(root, text=\"Mi Botón\")\nentry = customtkinter.CTkEntry(root)\ncheckbox = customtkinter.CTkCheckBox(root, text=\"Mi CheckBox\")\n\n# Deshabilitar widgets\nbutton.configure(state=tkinter.DISABLED)\nentry.configure(state=tkinter.DISABLED)  \ncheckbox.configure(state=tkinter.DISABLED)\n\n# Habilitar widgets\nbutton.configure(state=tkinter.NORMAL)\nentry.configure(state=tkinter.NORMAL)\ncheckbox.configure(state=tkinter.NORMAL)\n```\n\n### **4. Alternativa para CTkScrollableFrame**\n\nPara simular habilitación/deshabilitación en un `CTkScrollableFrame`, tendrías que:\n\n1. **Deshabilitar manualmente** todos los widgets hijos dentro del frame\n2. **Cambiar visualmente** los colores del frame padre\n3. **Bloquear eventos** de scroll si es necesario\n\n```python\ndef disable_scrollable_frame(frame):\n    # Deshabilitar todos los widgets hijos\n    for child in frame.winfo_children():\n        if hasattr(child, 'configure') and hasattr(child, 'cget'):\n            try:\n                child.configure(state=tkinter.DISABLED)\n            except tkinter.TclError:\n                pass  # El widget no soporta state\n```\n\n### **Conclusión**\n\nPara tu implementación según las especificaciones:\n- **Usa `state=tkinter.DISABLED/tkinter.NORMAL`** para widgets individuales\n- **CTkScrollableFrame no tiene atributo `state` nativo**\n- **La representación visual del estado deshabilitado** incluye cambios en cursor, colores de texto y comportamiento interactivo",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/c:/Users/Antonio/gitrepos/Test_UI_v3/",
            "scheme": "file"
          }
        }
      ],
      "responseId": "response_3257c9f2-9213-435d-9e07-bd0a70bf253e",
      "result": {
        "timings": {
          "firstProgress": 5429,
          "totalElapsed": 92820
        },
        "metadata": {
          "codeBlocks": [
            {
              "code": "import customtkinter\nimport tkinter\n\n# Crear widgets\nbutton = customtkinter.CTkButton(root, text=\"Mi Botón\")\nentry = customtkinter.CTkEntry(root)\ncheckbox = customtkinter.CTkCheckBox(root, text=\"Mi CheckBox\")\n\n# Deshabilitar widgets\nbutton.configure(state=tkinter.DISABLED)\nentry.configure(state=tkinter.DISABLED)  \ncheckbox.configure(state=tkinter.DISABLED)\n\n# Habilitar widgets\nbutton.configure(state=tkinter.NORMAL)\nentry.configure(state=tkinter.NORMAL)\ncheckbox.configure(state=tkinter.NORMAL)\n",
              "language": "python",
              "markdownBeforeBlock": "Basado en la información obtenida de la documentación y el código fuente de CustomTkinter, puedo proporcionarte clarificaciones importantes sobre los atributos de habilitación/deshabilitación:\n\n## **Atributos de Estado en CustomTkinter**\n\n### **1. Atributo `state` genérico**\n\n**SÍ**, los widgets de CustomTkinter tienen un atributo genérico `state` para habilitar/deshabilitar. Este atributo acepta los valores estándar de tkinter:\n\n- `tkinter.NORMAL` (habilitado)\n- `tkinter.DISABLED` (deshabilitado)\n\n**Widgets que soportan el atributo `state`:**\n- `CTkButton`\n- `CTkEntry` \n- `CTkCheckBox`\n- `CTkRadioButton`\n- `CTkSwitch`\n- `CTkSlider`\n- `CTkTabview`\n\n### **2. CTkScrollableFrame y el atributo `state`**\n\n**NO**, el `CTkScrollableFrame` **NO tiene** un atributo `state` propio. Esto es importante porque:\n\n1. `CTkScrollableFrame` hereda de `tkinter.Frame`, no de `CTkBaseClass`\n2. Es un contenedor compuesto por varios elementos internos\n3. No implementa lógica de habilitación/deshabilitación propia\n\n### **3. Representación Visual del Estado Deshabilitado**\n\nCuando un widget está deshabilitado (`state=tkinter.DISABLED`):\n\n**Cambios visuales:**\n- **Cursor**: Cambia a \"arrow\" (flecha normal) en lugar del cursor interactivo\n- **Color de texto**: Usa `text_color_disabled` en lugar de `text_color`\n- **Eventos**: No responde a clics ni interacciones del usuario\n- **Apariencia**: Algunos widgets pueden cambiar su apariencia visual\n\n**Ejemplo de uso:**\n"
            },
            {
              "code": "def disable_scrollable_frame(frame):\n    # Deshabilitar todos los widgets hijos\n    for child in frame.winfo_children():\n        if hasattr(child, 'configure') and hasattr(child, 'cget'):\n            try:\n                child.configure(state=tkinter.DISABLED)\n            except tkinter.TclError:\n                pass  # El widget no soporta state\n",
              "language": "python",
              "markdownBeforeBlock": "\n### **4. Alternativa para CTkScrollableFrame**\n\nPara simular habilitación/deshabilitación en un `CTkScrollableFrame`, tendrías que:\n\n1. **Deshabilitar manualmente** todos los widgets hijos dentro del frame\n2. **Cambiar visualmente** los colores del frame padre\n3. **Bloquear eventos** de scroll si es necesario\n\n"
            }
          ],
          "renderedUserMessage": [
            {
              "type": 1,
              "text": "<attachments>\n<attachment id=\"file:Especificaciones_UI.md\">\nUser's current visible code, this should be the main focus:\nExcerpt from Especificaciones_UI.md, lines 550 to 577:\n```markdown\nplegados.\n\n  En el ejemplo siguiente, la etiqueta \"Total general\" y campo \"Total\" se muestran en ambos casos. Además, la etiqueta de la cantidad de ítems \"Cantidad Items\" está oculta en la vista desplegada, pero al plegarse sí se muestra. Se ocultan el Botón \"Limpiar datos\" y la Tabla \"Detalle de productos\".\n\n  > ```asciiart\n  > ┌─Datos─Cliente─────────────────────────────────────────────────┐▲\n  > │        ┌────────────────────────────────────────────────────┐ ││\n  > │{Nombre}│                                                    │ ││\n  > │        └────────────────────────────────────────────────────┘ ││\n  > └───────────────────────────────────────────────────────────────┘│\n  > ┌─ ▶ Detalle─Productos──────────────────────────────────────────┐│\n  > │                                              ┌──────────────┐ ││\n  > │ {Cantidad Items}              {Total general}│  <Suma Total>│ ││\n  > │                                              └──────────────┘ ││\n  > └───────────────────────────────────────────────────────────────┘│\n  > ┌─ ▶ Visualizar─Cotización──────────────────────────────────────┐│\n  > └───────────────────────────────────────────────────────────────┘▼\n  > ┌────────────────────────────────────────────────────────────────┐\n  > │        ┌───────────────────┐      ┌───────────────────┐        │\n  > │        │ Grabar Cotización │      │      Cerrar       │        │\n  > │        └───────────────────┘      └───────────────────┘        │\n  > └────────────────────────────────────────────────────────────────┘\n  > ```\n\n## 4. Comportamiento responsivo esperado\n\nEsta sección detalla el comportamiento responsivo de la interfaz, complementando las definiciones generales de \"Características comunes\", \"Tablas\", \"Paneles\" y \"Especificaciones adicionales\".\n```\n</attachment>\n<attachment filePath=\"c:\\\\Users\\\\Antonio\\\\gitrepos\\\\Test_UI_v3\\\\docs\\\\Especificaciones_UI.md\">\nUser's active file for additional context:\n````markdown\n# Especificaciones interfaz de usuario\n\nEste documento describe las especificaciones de la interfaz de usuario para el proyecto de demostración de diferentes frameworks de Python.\nSe requiere comparar e implementar los siguientes:\n\n- CustomTkinter\n- Flet\n- Kivy\n- PySide6\n- QtQuick\n- Tkinter + ttk\n- wxPython\n\n## Introducción\n\nEste documento presenta una propuesta genérica de especificaciones de interfaz de usuario que debe ser evaluada respecto a cada framework de Python. Es fundamental determinar si cada elemento de detalle descrito puede ser implementado de forma natural por cada plataforma o si requiere extensiones o modificaciones específicas para soportarlo adecuadamente.\n\nLa implementación de estas especificaciones puede variar significativamente entre frameworks. Algunos elementos pueden estar disponibles de manera nativa, mientras que otros requerirán desarrollo personalizado o el uso de librerías adicionales.\n\nSe recomienda revisar cada especificación contra las capacidades nativas del framework objetivo antes de proceder con la implementación, identificando qué funcionalidades requieren desarrollo adicional y cuáles pueden aprovecharse directamente.\n\n## 1. Diseño de elementos gráficos - Reglas generales\n\n## 1.1. Pautas de Accesibilidad Universal\n\n- **Conformidad con WCAG 2.1 nivel AA:**\n  - **Perceptible:** Contraste de colores mínimo 4.5:1 para texto normal, 3:1 para texto grande (>18pt). Contenido no dependiente únicamente del color. Texto redimensionable hasta 200% sin pérdida de funcionalidad.\n  - **Operable:** Navegación completa por teclado con orden lógico (Tab, Shift+Tab). Indicadores de foco visibles con borde de 2px. Sin contenido que cause convulsiones. Área mínima de toque 44x44px para elementos interactivos.\n  - **Comprensible:** Texto legible y claro. Funcionalidad predecible. Mensajes de error claros y asociados semánticamente con elementos. Ayuda contextual en entrada de datos complejos.\n  - **Robusto:** Compatible con tecnologías asistivas (lectores de pantalla, magnificadores). Código semánticamente correcto con roles y etiquetas ARIA apropiadas.\n\n- **Soporte para tecnologías asistivas:**\n  - Lectores de pantalla (NVDA, JAWS, Orca) con anuncios apropiados de cambios de estado y contenido.\n  - Magnificadores de pantalla con contenido que se adapta al zoom.\n  - Software de reconocimiento de voz con comandos accesibles.\n  - Dispositivos de entrada alternativos (switch, eye-tracking).\n\n- **Navegación por teclado universal:**\n  - Tab/Shift+Tab para navegación entre elementos interactivos.\n  - Enter/Espacio para activar botones y controles.\n  - Flechas para navegación dentro de componentes complejos (tablas, listas).\n  - Escape para cancelar acciones o cerrar diálogos.\n  - Home/End para ir al inicio/final de contenido.\n\n- **Espaciado y dimensiones accesibles:**\n  - Espaciado mínimo de 8px entre elementos interactivos adyacentes.\n  - Márgenes de contenido mínimo de 16px desde bordes de contenedores.\n  - Altura mínima de 32px para campos de texto y controles de formulario.\n  - Área de toque mínima 44x44px con separación de 8px en interfaces táctiles.\n\n- **Indicación de estados accesibles:**\n  - Estados de foco, hover, activo y deshabilitado claramente diferenciados visual y programáticamente.\n  - Cambios de estado anunciados a tecnologías asistivas.\n  - Indicadores de validación accesibles tanto visual como programáticamente.\n\n- TODO: Definir patrones de prueba de accesibilidad durante desarrollo.\n\n## 1.2. Características Comunes de Elementos Gráficos\n\n- **Características comunes:**\n  - Todos los elementos gráficos deben tener un diseño consistente y seguir las pautas de estilo del tema visual definido.\n  - Deben ser fácilmente identificables y accesibles para el usuario, con color de fondo y borde definido (salvo que se especifique lo contrario).\n  - Deben tener tamaño mínimo y alto suficiente para mostrar su contenido, incluso si está vacío, considerando DPI y accesibilidad para pantallas táctiles, mouse y teclado.\n  - Deben presentar contraste suficiente entre texto y fondo para garantizar la legibilidad.\n  - Deben mantener espaciado adecuado entre sí para evitar solapamientos y mejorar la usabilidad, usando márgenes y rellenos (padding) adecuados. *Nota de implementación:* Utilizar un *Layout manager* nativo del framework para la distribución, alineación y espaciado.\n  - Deben mostrar un estado visual claro para indicar si están activos, inactivos, seleccionados o deshabilitados.\n  - Deben ser responsivos, adaptándose al tamaño de la ventana, contenido visible y a la interacción del usuario (hover, clic, selección, etc.). Por defecto, todos los elementos gráficos cambian color de fondo y/o borde al hacer hover, clic o estar seleccionados, salvo que se especifique lo contrario.\n  - No deben responder a arrastre, salvo que se especifique lo contrario.\n  - El redimensionamiento manual debe estar habilitado solo si se especifica, mostrando borde de selección o indicador visual para arrastrar, cambiando color al hacer hover o arrastrar. Por defecto, no se permite redimensionamiento manual.\n  - Elementos interactivos como botones o campos de texto deben tener tamaño mínimo para facilitar la interacción.\n  - Elementos con validación de datos deben mostrar mensajes de error claros y visibles cerca del elemento afectado, no en diálogos separados.\n  - Todos los elementos gráficos deben tener atributo de visibilidad (`True` por defecto, `False` para ocultar), y si están ocultos no ocupan espacio ni son interactivos.\n  - Todos los elementos gráficos deben tener atributo de habilitación (`True` por defecto, `False` para deshabilitar), mostrando estado visual claro si no están disponibles.\n  - Todos los elementos gráficos deben tener atributo de anclaje (`None` por defecto), que puede modificarse para anclar a un borde o a otro elemento, manteniendo posición relativa al redimensionar.\n  - Elementos pueden tener atributo para ser seleccionados por teclado (`False` por defecto, `True` para permitir foco y navegación con Tab), mostrando estado visual claro al recibir foco. Se debe implementar navegación por Tab y acciones específicas según el tipo de elemento.\n  - TASK: Completar detalles según el framework elegido.\n\n- **Tema visual:**\n  - Bordes del elemento gráfico:\n    - Color: Activo, deshabilitado, resaltado.\n    - Grosor\n    - Permite bordes redondeados: Verdadero/Falso.\n    - Radio Bordes redondeados: En caso de soportarse.\n  - Los iconos existen en 3 tamaños: pequeño, mediano y grande.\n  - TASK: Completar detalles según el framework elegido:\n    - Definir paleta de colores principal y secundaria para fondo, texto, bordes y estados (activo, deshabilitado, resaltado).\n    - Definir estilos de iconos (línea, relleno, tamaños en píxeles para cada categoría de tamaño).\n    - Definir tipografía principal y secundaria, tamaños de fuente, negritas y cursivas.\n    - Definir espaciado mínimo entre elementos, márgenes y rellenos.\n\n- **Ventana:**\n  - Tamaño mínimo de ventana: 800x600 píxeles.\n  - Al inicializarse debe estar en estado maximizado por defecto.\n  - Permite redimensionamiento por parte del usuario.\n  - Muestra barra de desplazamiento vertical u horizontal si el contenido excede el área visible.\n  - No cambia color de fondo o bordes al hacer hover, clic o arrastrar en el espacio vacío de la ventana.\n  - Se debe implementar soporte para zoom de ventana sin pérdida de funcionalidad hasta 200%.\n  - TASK: Falta definir color de fondo, color de borde y espaciado interno.\n\n- **Etiquetas:**\n  - Tamaño de fuente por defecto igual al texto normal, con alineación a la izquierda por defecto.\n  - Sin borde ni color de fondo distintivo, no cambian de color al hacer hover o clic, salvo que se especifique lo contrario.\n  - La alineación puede ser a la izquierda, derecha o centrada.\n  - Permiten ajuste de palabras (wordwrap) y multi-línea si es necesario.\n  - No son interactivos ni seleccionables, salvo que se especifique lo contrario.\n  - Para el lector de pantalla, considerar etiqueta ARIA que diga \"{Nombre de la etiqueta}\" para indicar que es una etiqueta informativa.\n  - TASK: Falta definir color de texto y alineación por defecto.\n\n- **Botones:**\n  - Color de fondo cambia al hacer hover o clic.\n  - Texto centrado por defecto, puede alinearse según se requiera.\n  - Solo se usan botones con texto descriptivo, o con íconos si son acciones simples.\n  - Al hacer hover, se muestra una etiqueta emergente con descripción alternativa de la acción del botón.\n  - Para el lector de pantalla, considerar etiqueta ARIA que diga \"Botón {Nombre del botón}\" para indicar que es un botón interactivo.\n  - TASK: Falta definir borde, tamaño y color de texto, colores de fondo para estados normal/hover/clic, y estilo de etiqueta emergente descriptiva.\n\n- **Campos de texto:**\n  - Texto alineado según se requiera, izquierda por defecto.\n  - Permiten ajuste de palabras (wordwrap) y texto multi-línea si es necesario.\n  - Si es editable, el usuario puede modificar el texto; si no, solo puede seleccionarlo.\n  - Al hacer hover, clic o recibir foco por teclado: el borde cambia de color para indicar interactividad.\n  - Al estar en edición, colores de fondo y texto cambian según estado editable o no.\n  - Al recibir foco por clic o teclado:\n    - Si el campo está vacío, el cursor se posiciona al inicio.\n    - Si tiene texto, el texto se muestra preseleccionado por completo, con el cursor en la posición del clic, o al final si se llegó por teclado.\n  - Validación al perder foco o presionar Enter. Si es inválido mostrando control emergente de mensajes con estado y descripción de error.\n  - Edición puede terminar con Escape o Tab, restaurando el valor anterior si es inválido.\n  - Para lector de pantalla, considerar etiqueta ARIA que diga \"{Nombre del campo}, campo de texto\" para indicar que es un campo editable. Si no es editable, usar \"{Nombre del campo}, etiqueta de texto\" para indicar que es solo informativo.\n  - TASK: Definir color de fondo y color de texto para estados editable/no editable, color de borde para estados normal/hover/clic/foco/edición, y estilo de control emergente de validación.\n\n- **Control emergente para mensajes:**\n  - Se muestra cerca del elemento vinculado, afectado por validación o error.\n  - El control emerge del borde del elemento gráfico que genera el mensaje, anclándose a los bordes de este:\n    - Por defecto anclado en el borde inferior del elemento vinculado, con ambos alineados en su margen izquierdo.\n    - En cambio, si el elemento está cerca del borde derecho del contenedor del elemento vinculado, el control se alinea con el borde derecho del elemento.\n    - Si el elemento está en el límite inferior visible, el control se ancla en el borde superior del elemento vinculado.\n    - Debe mantener un margen específico respecto al otro control.\n  - El Control tiene borde y color de fondo específicos.\n    - Al hacer hover, clic o recibir foco por teclado: el borde cambia de color desde normal a resaltado, para indicar interactividad.\n    - El color de fondo es fijo según el tipo de Estado a representar (Error, Advertencia, Información) y se mantiene mientras el control esté visible.\n  - El área interna del control contiene una grilla de alineamiento horizontal, sin margen respecto al borde.\n    - El área izquierda está destinada al icono de Estado, mientras el área derecha se divide en la sección superior que contiene el botón de cierre y la inferior donde está la etiqueta con Mensaje.\n    - Ícono de Estado está anclado al borde superior izquierdo de la grilla, con un margen adecuado.\n    - Botón de cierre está anclado al borde superior derecho de la grilla con un margen de 0px respecto a ambos bordes.\n    - La etiqueta con mensaje va anclada al borde inferior derecho de la grilla, con un margen adecuado.\n  - El ícono de estado es de tamaño mediano según categoría: Error (  ), Advertencia (  ), Información (  ).\n  - La etiqueta con Mensaje permite texto multilínea y con Word wrap habilitado.\n  - Botón de cierre con ícono pequeño (  ) para ocultar el mensaje mediante clic o teclado.\n  - Cuando el control recibe el foco por clic o teclado, se selecciona el botón de cierre. *Nota de implementación:* Los eventos de teclado en cualquier parte del control se redirigen automáticamente al botón de cierre para su procesamiento.\n  - *Nota de implementación:* El control sólo expone las siguientes propiedades, escondiendo los detalles de implementación del resto:\n    - Control vinculado\n    - Texto de categoría de mensaje: Valores válidos \"error\", \"advertencia\", \"información\". Si el framework contiene constante para estas categorías, utilizarlas para la implementación.\n    - Mensaje: Texto a mostrar en la etiquetas con Mensaje.\n    - Colores para borde del control: Etiquetas de color para estados normal y resaltado. Utilizar sistemas de color y tipos de datos que utilice el framework.\n    - Colores para categoría de mensaje: Etiquetas de color según cada categoría, para mostrar como color de fondo del control. Utilizar sistemas de color y tipos de datos que utilice el framework.\n    - Estilo de texto del mensaje: Color, familia de fuente, tamaño de fuente, estilo (normal, negrita, cursiva).\n    - Alto y ancho mínimos del control: Valores de solo lectura en píxeles.\n    - Los demás atributos específicos que requiera o hereda por ser elemento gráfico en cada framework.\n  - Debe ser accesible por tecnologías asistivas, incluyendo etiquetas ARIA apropiadas (nombre del campo asociado, estado del mensaje, texto del mensaje).\n  - TASK: Definir colores específicos para fondo fijo por tipo de mensaje (error/advertencia/información), colores de borde para estados normal vs. resaltado, estilo de texto, margen respecto al control vinculado, márgenes internos de la grilla y elementos, tiempo de auto-ocultación (opcional), animaciones de aparición/desaparición del control emergente.\n\n- **Barra de desplazamiento:**\n  - Visible solo si el contenido excede el área visible.\n  - Cambia de color al hacer hover, clic o arrastrar.\n  - Implementar navegación alternativa con teclas Page Up/Down, Home/End.\n  - TASK: Falta definir color, grosor y estilo de la barra, colores para estados normal/hover/clic/arrastrar.\n\n- **Indicador de plegado:**\n  - Icono definido y visible en el borde superior izquierdo del panel.\n  - Ícono indica estado: plegado (`▶`) o desplegado (`▼`).\n  - Al hacer clic, alterna entre estados.\n  - Cambia color al hacer hover o clic.\n  - Para lector de pantalla, considerar etiqueta ARIA que diga \"Indicador de plegado, estado {estado actual}\" para indicar el estado del panel.\n  - TASK: Falta definir color, tamaño y estilo del icono, colores para estados normal/hover/clic.\n\n- **Paneles:**\n  - Puede tener título en la parte superior, alineado a la izquierda por defecto.\n  - Paneles plegables muestran indicador de plegado.\n  - Fondo que contraste con texto y elementos internos.\n  - Por defecto sin borde, salvo que se especifique.\n  - Para accesibilidad implementar estructura de encabezados jerárquica (h1, h2, h3) y derivando landmarks ARIA para navegación rápida.\n  - TASK: Falta definir color de fondo, color de borde y espaciado interno.\n\n- **Tablas:**\n  - Permite desplazamiento horizontal y vertical si el contenido excede el área visible.\n  - Encabezado distinguible, con fondo y texto contrastantes, no permite cambiar nombre, orden ni alto.\n  - Encabezado tiene alto fijo y siempre visible al hacer scroll vertical (anclado arriba).\n  - Filas alternan colores para legibilidad.\n  - Alto mínimo para mostrar encabezado y fila vacía al final; atributo para cantidad de filas visibles (por defecto 3, mínimo 1).\n  - Al cargar datos, genera filas según datos y siempre incluye una fila vacía al final para agregar nuevos registros, sin usar campos de texto aparte.\n  - Filas cambian de color al estar seleccionadas o al hacer hover.\n  - Filas sin bordes entre ellas, pero con margen especificado como atributo.\n  - Alto de fila determinado por celda más alta, no cambia al hacer scroll. Incluso sin datos, la fila debe tener alto mínimo suficiente para mostrar una línea de texto.\n  - Columnas tienen borde entre ellas, con margen entre celdas, especificado como atributo.\n  - Columnas permiten redimensionamiento manual de ancho, salvo indicación contraria, y se autoajustan al hacer clic en el borde entre ellas.\n  - Ancho mínimo calculado automáticamente según contenido, no cambia al hacer scroll horizontal.\n  - Celdas no permiten modificar alto manualmente, pero sí indirectamente por contenido.\n  - Celdas tienen mismo comportamiento que campos de texto respecto a interacción, validaciones y mensajes de error.\n  - Implementar navegación por teclas de flechas entre celdas, permitiendo edición de celdas con Enter.\n  - Para el lector de pantalla, asegurar encabezados asociados semánticamente con celdas de datos (por ejemplo, al navegar a celda en columna producto, fila 3, se anuncia \"Producto {contenido celda}, fila 3 de {número total de filas con datos A ver}\").\n  - Uso de tecla Tab para navegar entre filas, seleccionándolas.\n  - Las filas deben reservar espacio extra en el borde izquierdo y derecho de la tabla para mostrar un ícono en cualquiera de los costados. Este espacio se rellena del mismo color de fondo, y permite implementar elementos gráficos para insertar o eliminar filas.\n  - TASK: Falta definir color de fondo de celdas, color de texto, color de bordes, estilo de encabezado, colores alternados para filas, colores para estados seleccionada/hover de filas, y color de fondo para espacio extra de íconos.\n\n- **Botón de inserción de fila:**\n  - Se muestra como un ícono (por ejemplo, `+`) únicamente al hacer hover con el mouse sobre el espacio entre filas, no sobre una fila.\n  - El ícono debe ser claramente visible y cambiar de color al hacer hover.\n  - Al hacer clic en el ícono o usar Ctrl+Insert, se inserta una nueva fila vacía en la posición correspondiente.\n  - Al tener una fila seleccionada y presionar Ctrl+Insert, se inserta una nueva fila vacía justo debajo de la fila seleccionada.\n  - El botón debe mostrar un estado visual de activación al hacer clic.\n  - La nueva fila debe crearse con celdas vacías y lista para edición inmediata, posicionando el cursor en la primera celda editable de la nueva fila.\n  - No debe mostrar el ícono de inserción ni activarse por teclado entre la penúltima fila de datos y la fila vacía al final de la tabla.\n  - TASK: Definir color, tamaño y estilo del ícono de inserción, colores para estados normal/hover/activación.\n\n- **Botón de eliminación de fila:**\n  - Se muestra como un ícono (por ejemplo, de basurero `🗑` o `-`) al hacer hover con el mouse sobre el borde de la fila, o teniendo la fila seleccionada.\n  - Solo al tener la fila seleccionada, es accesible mediante navegación por teclado.\n  - Al hacer clic o usar la tecla Suprimir (según punto anterior), elimina la fila correspondiente, mostrando confirmación previa solo si la fila contiene datos.\n  - Confirmación de eliminación muestra cuadro de diálogo del sistema (estilo advertencia), con botones \"Cancelar\" y \"Eliminar\" con foco en botón de Cancelar. Debe ser accesible por teclado.\n  - El ícono debe ser claramente visible y cambiar de color al hacer hover.\n  - Debe tener tamaño suficiente para ser fácilmente interactuable en pantallas táctiles y con mouse.\n  - El botón debe mostrar un estado visual de activación al hacer clic.\n  - No debe permitir eliminar la última fila vacía destinada a agregar nuevos datos.\n  - TASK: Definir color, tamaño y estilo del ícono de eliminación, colores para estados normal/hover/activación.\n\n---\n\n## 2. Requisitos específicos de la interfaz de usuario\n\n- La interfaz a construir debe ser intuitiva y fácil de usar, siguiendo las mejores prácticas de UI/UX.\n- Debe mostrar características responsivas y adaptarse a diferentes tamaños de ventana (ver \"Características comunes\" y \"Comportamiento responsivo esperado\").\n- Se requiere implementar como un formulario con varias secciones que agrupan *widgets* de interfaz gráfica, como etiquetas, iconos, campos de texto, botones, barra de desplazamiento, tablas o paneles.\n- Debe permitir la visualización de una previsualización de la cotización dentro de un panel dedicado.\n- Algunos paneles deben permitir el plegado y despliegue de contenido para mostrar todo o sólo algunos elementos.\n\n### Simbología utilizada en los Diagramas\n\nLa interfaz de usuario requerida se describe por medio de diagramas ASCII que representan gráficamente diferentes elementos de la interfaz, la relación entre ellos, como que un panel está ubicado antes que otro, la relación entre padre e hijos cuando un elemento contiene a otros dentro de su espacio, o la alineación y ubicación relativa de elementos gráficos.\n\n- **Caracteres:**\n\n  Los caracteres ASCII se utilizan para crear bordes, líneas y otros elementos gráficos de la interfaz. Estos caracteres permiten representar visualmente los componentes de la interfaz de usuario de manera clara y organizada.\n\n  - Bordes: `┌─`, `└─`, `─┐`, `─┘`, `│`.\n  - Líneas horizontales: `─`.\n  - Líneas verticales: `│`.\n  - Espacios en blanco: ` ` (espacio).\n\n- **Texto:**\n\n  El texto se representa con llaves `{}` para etiquetas, y con signos de menor y mayor `< >` para campos de texto. Los textos dentro de los botones no llevan signos.\n\n  - Etiqueta: `{Etiqueta}`.\n  - Campo de texto: `<Campo de texto>`.\n  - Botón: `Botón`.\n\n- **Bordes:**\n\n  Los bordes de la ventana, botones, campos de texto, etiquetas y secciones se muestran con caracteres ASCII específicos para crear una interfaz visualmente clara y organizada.\n\n  - Bordes de la ventana: `┌─`, `└─`, `─┐`, `─┘`.\n  - Bordes verticales: `│`.\n  - Bordes horizontales: `─`.\n\n- **Ventana:**\n\n  La ventana es el contenedor principal de la interfaz, y se representa con un borde completo.\n\n  - Borde completo: `┌─`, `└─`, `─┐`, `─┘`.\n\n- **Etiqueta:**\n\n  Una etiqueta es un texto que se muestra sin bordes dentro de un panel, y se representa entre llaves '{}'. Sirve para mostrar información estática que no requiere interacción del usuario y pueden estar alineadas a la izquierda, derecha o centradas, según se requiera.\n\n  El ejemplo siguiente muestra una etiqueta con el texto \"Etiqueta 1\", dentro de un panel alineada a la izquierda en sentido horizontal, y al centro en sentido vertical.\n\n  > ```asciiart\n  > ┌────────────────────────────┐\n  > │                            │\n  > │ {Etiqueta 1}               │\n  > │                            │\n  > └────────────────────────────┘\n  > ```\n\n- **Botones:**\n\n  El texto dentro de los botones se representa sin signos en esta especificación de interfaz, y el borde del botón es completo.\n\n  El ejemplo siguiente muestra primero un botón con el texto \"Botón 1\" y después uno sólo con ícono de borrado (representado como basurero `🗑`).\n\n  > ```asciiart\n  > ┌───────────────┐\n  > │    Botón 1    │\n  > └───────────────┘\n  > ┌───────────────┐\n  > │      🗑        │\n  > └───────────────┘\n  > ```\n\n- **Campo de texto:**\n\n  Los campos de texto también se representan con un borde completo, pero se diferencian de los botones por mostrar el nombre del campo entre signos de menor y mayor '<>'. Además, la posición del texto dentro del campo de texto muestra la alineación requerida para los datos del campo.\n\n  El ejemplo siguiente muestra tres campos de texto, alineados al borde izquierdo, centrado y derecho, respectivamente.\n\n  > ```asciiart\n  > ┌─────────────────────────────────────────────┐\n  > │ <Campo de texto alineado a la izquierda>    │\n  > └─────────────────────────────────────────────┘\n  > ┌─────────────────────────────────────────────┐\n  > │           <Campo de texto centrado>         │\n  > └─────────────────────────────────────────────┘\n  > ┌─────────────────────────────────────────────┐\n  > │      <Campo de texto alineado a la derecha> │\n  > └─────────────────────────────────────────────┘\n  > ```\n\n- **Control emergente para mensajes:**\n\n  El control emergente para mensajes se representa como un cuadro con borde que emerge del borde del elemento gráfico que genera el mensaje.\n\n  El ejemplo siguiente muestra un panel que contiene un cuadro de texto, con el control emergente con un mensaje de error, considerando que tiene espacio suficiente para mostrarse hacia abajo y la derecha, que es el comportamiento por defecto.\n\n  > ```asciiart\n  > ┌───────────────────────────────────────────┐\n  > │        ┌─────────┐                        │\n  > │  Costo:│  -$1.234│                        │\n  > │        └─────────┘────────────────┐      │\n  > │        │   {Etiqueta con mensaje} │      │\n  > │        └───────────────────────────┘      │\n  > │                                           │\n  > └───────────────────────────────────────────┘\n  > ```\n\nSi en cambio, el elemento gráfico del cual emerge está en el límite inferior visible de la ventana o panel, el control emergente debería mostrarse hacia arriba del elemento gráfico.\n\n  > ```asciiart\n  > ┌────────────────────────────────────────────────┐\n  > │                                                │\n  > │        ┌───────────────────────────────┐      │\n  > │        │   Error: El costo debe ser un │      │\n  > │        │    un valor superior a cero.   │      │\n  > │        ┌─────────┐──────────────────────┘      │\n  > │  Costo:│  -$1.234│                             │\n  > │        └─────────┘                             │\n  > └────────────────────────────────────────────────┘\n  > ```\n\nSin embargo, si dada la posición o alineación del elemento gráfico del que emerge este se encuentra por ejemplo al borde derecho de la ventana o del panel, el control emergente debe alinearse con el borde derecho del elemento gráfico. En el siguiente diagrama de ejemplo ambos efectos ocurren simultáneamente.\n\n  > ```asciiart\n  > ┌────────────────────────────────────────────────┐\n  > │                                                │\n  > │                ┌─────────────────────────────┐│\n  > │                │  Error: El costo debe ser un││\n  > │                │   un valor superior a cero.  ││\n  > │                └────────────────────┌─────────┐│\n  > │                               Costo:│  -$1.234││\n  > │                                     └─────────┘│\n  > └────────────────────────────────────────────────┘\n  > ```\n\n- **Barra de desplazamiento:**\n\n  La barra de desplazamiento permite al usuario desplazarse verticalmente (y opcionalmente horizontalmente) por el contenido de un formulario o panel cuando este excede el área visible de la ventana o contenedor.\n\n  Se representa como una banda vertical o horizontal ubicada en el borde derecho o inferior del área desplazable, respectivamente.\n\n- **Indicador de plegado**\n\n  Este indicador implementa un icono en el programa a construir, que representa si un panel está plegado o desplegado.\n  Cuando una sección se muestra desplegada, significa que se deben mostrar todos los componentes gráficos que tienen activado el atributo `MOSTRAR_DESPLEGADO`, mientras que los que no lo tienen activado se deben ocultar. A su vez, cuando la sección se muestra plegada, significa que se deben mostrar todos los componentes gráficos con el atributo `MOSTRAR_PLEGADO`, y ocultar los que no lo tengan activo.\n\n  La tabla muestra el símbolo y las acciones a realizar cuando se hace clic en cada uno:\n\n  | Símbolo | Significado en diagrama                    | Acción al hacer clic en ícono |\n  |:-------:|--------------------------------------------|-------------------------------|\n  |   `▼`   | Indica mostrar una sección como desplegada | Plegar la sección             |\n  |   `▶`   | Indica mostrar una sección como plegada    | Desplegar la sección          |\n\n  - Sugerencia de implementación para atributo:\n    Clase `TipoPlegado` - Implementar como una clase que herede de `enum`, especificando que actúan como flag, con instancias `NEUTRO`, `MOSTRAR_DESPLEGADO`,  `MOSTRAR_PLEGADO`.\n\n- **Panel:**\n\n  Un Panel puede contener etiquetas, campos de texto, botones o tablas. Puede tener un título o no, y puede ser plegable o no.\n\n  Los paneles se representan aquí con un borde completo, y un indicador de plegado si tienen capacidad de desplegarse/plegarse. Los paneles que no tienen capacidad de plegado se muestran sin ese indicador.\n\n  - **Ejemplo de panel sin título**\n\n    Si el panel no tiene título, se representa con un borde completo y los elementos contenidos en éste. Los elementos se muestran alineados según se requiera.\n\n    > ```asciiart\n    > ┌─────────────────────────────────────────────────┐\n    > │                ┌──────────────┐ ┌─────────────┐ │\n    > │  {Etiqueta 1}  │    Botón 1   │ │   Botón 2   │ │\n    > │                └──────────────┘ └─────────────┘ │\n    > └─────────────────────────────────────────────────┘\n    > ```\n\n  - **Ejemplo de panel con título**\n\n    Si el panel tiene un título, este se muestra en la parte superior del elemento gráfico, seguido de los elementos contenidos en ella. El título se muestra con el texto alineado según se requiera (izquierda, centrado, derecha).\n\n    > ```asciiart\n    > ┌─Título─de─sección───────────────────────────────┐\n    > │                ┌──────────────┐ ┌─────────────┐ │\n    > │  {Etiqueta 1}  │    Botón 1   │ │   Botón 2   │ │\n    > │                └──────────────┘ └─────────────┘ │\n    > └─────────────────────────────────────────────────┘\n    > ```\n\n  - **Ejemplo de Panel Desplegado**\n\n    Si el panel está desplegado, el indicador se muestra apuntando hacia la derecha en el borde superior izquierdo.\n\n    > ```asciiart\n    > ┌─ ▼ Título─de─sección────────────────────────────┐\n    > │                ┌──────────────┐ ┌─────────────┐ │\n    > │  {Etiqueta 1}  │    Botón 1   │ │   Botón 2   │ │\n    > │                └──────────────┘ └─────────────┘ │\n    > └─────────────────────────────────────────────────┘\n    > ```\n\n  - **Ejemplo de Panel Plegado**\n\n    Si el panel está plegado, el indicador se representa apuntando hacia abajo en el borde superior izquierdo.\n\n    Los elementos contenidos en la sección plegada se pueden mostrar o no, dependiendo si se establece que deben mostrarse al estar plegados, que deben ser implementados como una propiedad de los elementos gráficos contenidos dentro de este panel.\n\n    En el ejemplo siguiente, se considera que es el mismo panel del ejemplo anterior,salvo que ahora está plegada y en cambio muestra dos etiquetas. La etiqueta de \"Etiqueta 1\" tiene la propiedad de mostrarse tanto al estar plegada como desplegada, mientras que la etiqueta de \"Etiqueta 2\" sólo se muestra al estar plegada. Por otro lado, los botones no se muestran al estar plegada la sección, pues en este ejemplo no se ha establecido que deban mostrarse al estar plegados.\n\n    > ```asciiart\n    > ┌─ ▶ Título─de─sección────────────────────────────┐\n    > │  {Etiqueta 1}                     {Etiqueta 2}  │\n    > └─────────────────────────────────────────────────┘\n    > ```\n\n- **Tabla:**\n\n  Una tabla es un elemento gráfico que contiene otros elementos gráficos: una fila de encabezados y múltiples filas de datos alineados en una grilla. En sentido vertical, contiene encabezados de columna en la primera fila, y luego continúan celdas de datos alineadas en una grilla.\n\n  La tabla se representa en esta especificación con un borde completo alrededor, las columnas se representan con caracteres `|` entre las celdas, mientras que las filas de la grilla sólo se representan con cambios de línea y bordes horizontales.\n\n  La especificación de una tabla contiene los encabezados de columna en la primera fila, la segunda fila la alineación de cada columna, y luego siguen las filas de datos. Los encabezados especifican el nombre de cada columna y también siguen la alineación especificada para cada columna.\n\n  - **Alineación de datos en la Tabla**\n\n    Los datos en la tabla pueden alinearse a la izquierda, derecha o centrados. La alineación se indica con guiones precedidos o terminados con dos puntos ':' al borde izquierdo o derecho de la celda. Así, ':----' indica que los datos están alineados a la izquierda, '----:' indica que están alineados a la derecha, y ':---:' indica que están centrados. Adicionalmente, si no se especifica la alineación, como en '-----', se asume que los datos están alineados a la izquierda.\n\n    En el siguiente ejemplo, se muestra una tabla con tres columnas: \"Item\" tiene alineación a la derecha, \"Producto\" a la izquierda, y \"Cantidad\" especifica datos centrados.\n\n    > ```asciiart\n    > ┌───────────────────────────────┐\n    > │   Item|Producto  |  Cantidad  │\n    > │------:|:---------|:----------:│\n    > │      1|ABC       |     3      │\n    > │      2|XYZ       |     9      │\n    > └───────────────────────────────┘\n    > ```\n\n## 3. Diagramas con especificación de interfaz para el programa\n\nA continuación, cada diagrama especifica las características de la interfaz el usuario a construir, en sus diferentes estados. Cada elemento gráfico a construir debe tomar su atributos y estados iniciales a partir de lo descrito en estos diagramas. así valores como el nombre, tipo de objeto gráfico, alineación, pertenencia a otro elemento gráfico, anclaje al borde u otro objeto gráfico, visibilidad al desplegarse o plegarse el panel, descripción de que acción hace un botón, u otros, deben determinarse a partir de estos diagramas.\n\n- Formulario dentro de ventana de la aplicación\n\n  La ventana de la aplicación primeramente tiene un panel que contiene la etiqueta con el Título del programa -centrada respecto al ancho de la ventana-, que para cada programa debe variar según el nombre del framework utilizado, Ejemplo, \"Cotizador De productos - customtkinter\", \"Cotizador De productos - Flet\", etcétera. Este panel está anclado al borde superior de la ventana, y tiene la capacidad de achicar su alto cuando el usuario vaya desplazándose hacia abajo en el formulario, manteniéndose en una capa flotante superior respecto al formulario.\n\n  Luego sigue un panel \"Datos cliente\", otro panel \"Detalle productos\", y un panel \"Previsualización\" -escondido por defecto-. Estos paneles constituyen el cuerpo del formulario que se desplaza debajo de los paneles superior e inferior, mostrando una barra de desplazamiento en el lado derecho, que muestra al usuario la posición de este.  El panel de \"Detalle de Productos\" contiene una tabla \"Productos Cotizados\".\n\n  Finalmente, existe un panel \"Botones de acción\" que esta anclado al borde inferior de la ventana, manteniéndose también en una capa flotante superior respecto al resto del formulario.\n\n  > ```asciiart\n  > ┌──────────────────────────────────────────────────────────────────┐\n  > │┌────────────────────────────────────────────────────────────────┐│\n  > ││         {Cotizador de Productos - <Nombre framework>}          ││\n  > │└────────────────────────────────────────────────────────────────┘│\n  > │┌─Datos─Cliente─────────────────────────────────────────────────┐▲│\n  > ││        ┌────────────────────────────────────────────────────┐ │││\n  > ││{Nombre}│ <Cliente>                                          │ │││\n  > ││        └────────────────────────────────────────────────────┘ │││\n  > │└───────────────────────────────────────────────────────────────┘││\n  > │┌─ ▼ Detalle─Productos──────────────────────────────────────────┐││\n  > ││ {Productos Cotizados}                                         │││\n  > ││ ┌───────────────────────────────────────────────────────────┐ │││\n  > ││ │  Item|Producto  | Cantidad |  Precio Unitario|       Total│ │││\n  > ││ │-----:|:---------|:--------:|----------------:|-----------:│ │││\n  > ││ │      |          |          |                 |            │ │││\n  > ││ │      |          |          |                 |            │ │││\n  > ││ └───────────────────────────────────────────────────────────┘ │││\n  > ││ ┌─────────────────┐                          ┌──────────────┐ │││\n  > ││ │  Limpiar Datos  │           {Total general}│  <Suma Total>│ │││\n  > ││ └─────────────────┘                          └──────────────┘ │││\n  > │└───────────────────────────────────────────────────────────────┘││\n  > │┌─ ▶ Visualizar─Cotización──────────────────────────────────────┐││\n  > │└───────────────────────────────────────────────────────────────┘▼│\n  > │┌────────────────────────────────────────────────────────────────┐│\n  > ││        ┌───────────────────┐      ┌───────────────────┐        ││\n  > ││        │ Grabar Cotización │      │      Cerrar       │        ││\n  > ││        └───────────────────┘      └───────────────────┘        ││\n  > │└────────────────────────────────────────────────────────────────┘│\n  > └──────────────────────────────────────────────────────────────────┘\n  > ```\n\n- Formulario con sección de previsualización visible\n\n  La sección de previsualización debe aparecer completa entre las sección de detalle de productos y el panel inferior con los botones. Este diagrama muestra parte de la ventana y como se representa el formulario con este panel desplegado.\n\n  > ```asciiart\n  > ┌─Datos─Cliente─────────────────────────────────────────────────┐▲\n  > │        ┌────────────────────────────────────────────────────┐ ││\n  > │{Nombre}│                                                    │ ││\n  > │        └────────────────────────────────────────────────────┘ ││\n  > └───────────────────────────────────────────────────────────────┘│\n  > ┌─ ▼ Detalle─Productos──────────────────────────────────────────┐│\n  > │ {Productos Cotizados}                                         ││\n  > │ ┌───────────────────────────────────────────────────────────┐ ││\n  > │ │  Item|Producto  | Cantidad |  Precio Unitario|       Total│ ││\n  > │ │-----:|:---------|:--------:|----------------:|-----------:│ ││\n  > │ │      |          |          |                 |            │ ││\n  > │ │      |          |          |                 |            │ ││\n  > │ └───────────────────────────────────────────────────────────┘ ││\n  > │ ┌─────────────────┐                          ┌──────────────┐ ││\n  > │ │  Limpiar Datos  │           {Total general}│  <Suma Total>│ ││\n  > │ └─────────────────┘                          └──────────────┘ ││\n  > └───────────────────────────────────────────────────────────────┘│\n  > ┌─ ▼ Visualizar─Cotización──────────────────────────────────────┐│\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > │                                                               ││\n  > └───────────────────────────────────────────────────────────────┘▼\n  > ┌────────────────────────────────────────────────────────────────┐\n  > │        ┌───────────────────┐      ┌───────────────────┐        │\n  > │        │ Grabar Cotización │      │      Cerrar       │        │\n  > │        └───────────────────┘      └───────────────────┘        │\n  > └────────────────────────────────────────────────────────────────┘\n  > ```\n\n- Formulario con sección de Detalle de productos plegado\n\n  Para la sección de detalle de productos existen ciertos ciertos campos o etiquetas que se muestran de todas maneras al estar plegados.\n\n  En el ejemplo siguiente, la etiqueta \"Total general\" y campo \"Total\" se muestran en ambos casos. Además, la etiqueta de la cantidad de ítems \"Cantidad Items\" está oculta en la vista desplegada, pero al plegarse sí se muestra. Se ocultan el Botón \"Limpiar datos\" y la Tabla \"Detalle de productos\".\n\n  > ```asciiart\n  > ┌─Datos─Cliente─────────────────────────────────────────────────┐▲\n  > │        ┌────────────────────────────────────────────────────┐ ││\n  > │{Nombre}│                                                    │ ││\n  > │        └────────────────────────────────────────────────────┘ ││\n  > └───────────────────────────────────────────────────────────────┘│\n  > ┌─ ▶ Detalle─Productos──────────────────────────────────────────┐│\n  > │                                              ┌──────────────┐ ││\n  > │ {Cantidad Items}              {Total general}│  <Suma Total>│ ││\n  > │                                              └──────────────┘ ││\n  > └───────────────────────────────────────────────────────────────┘│\n  > ┌─ ▶ Visualizar─Cotización──────────────────────────────────────┐│\n  > └───────────────────────────────────────────────────────────────┘▼\n  > ┌────────────────────────────────────────────────────────────────┐\n  > │        ┌───────────────────┐      ┌───────────────────┐        │\n  > │        │ Grabar Cotización │      │      Cerrar       │        │\n  > │        └───────────────────┘      └───────────────────┘        │\n  > └────────────────────────────────────────────────────────────────┘\n  > ```\n\n## 4. Comportamiento responsivo esperado\n\nEsta sección detalla el comportamiento responsivo de la interfaz, complementando las definiciones generales de \"Características comunes\", \"Tablas\", \"Paneles\" y \"Especificaciones adicionales\".\n\n- El formulario debe mostrar scroll vertical si el contenido excede el alto visible (ver \"Características comunes\" y \"Barra de desplazamiento\").\n- Todos los paneles principales deben estirarse horizontalmente según el ancho de la ventana (ver \"Características comunes\").\n- El panel de título y el panel de botones deben permanecer fijos (flotantes) anclados al borde superior e inferior de la ventana, respectivamente (ver atributo de anclaje en \"Características comunes\").\n- El panel de título puede reducir su altura y/o fuente si la ventana es muy pequeña, pero sólo hasta modificar el título hasta el tamaño de fuente del texto normal con negritas, manteniendo márgenes verticales mínimos de 5px.\n- Las columnas de la tabla Detalle de Productos deben:\n  - Mantener proporciones al modificar el ancho de la ventana (ver \"Tablas\").\n  - Las columnas \"Cantidad\", \"Precio Unitario\" y \"Total\" pueden expandirse proporcionalmente, pero solo reducirse hasta el ancho mínimo necesario para mostrar su contenido más largo.\n  - La columna \"Producto\" puede expandirse solo hasta que las otras columnas alcancen su ancho mínimo, pero sus celdas pueden aumentar en altura usando texto multi-línea con ajuste de palabras (wordwrap).\n  - Permitir redimensionamiento manual arrastrando los bordes entre columnas, respetando las limitaciones anteriores (ver \"Tablas\").\n  - Activar scroll horizontal si no caben.\n- Las filas de la tabla Detalle de Productos deben:\n  - Activar scroll vertical si no caben (ver \"Tablas\").\n  - No permitir redimensionamiento manual de altura por parte del usuario.\n- Para el panel \"Detalle productos\":\n  - Los elementos mantienen su distribución según los diagramas y \"Especificaciones adicionales\", respetando márgenes sin solaparse.\n  - Estado desplegado: muestra tabla, etiqueta \"Productos Cotizados\", botón \"Limpiar datos\", etiqueta \"Total general\" y campo \"Suma Total\".\n  - Estado plegado: sólo muestra etiquetas \"Cantidad Ítems\" y \"Total general\", más el campo \"Suma Total\".\n  - La etiqueta \"Cantidad Items\" se ajusta automáticamente a su contenido sin truncarse.\n  - El campo \"Suma total\" mantiene como ancho, el mínimo entre el de la columna \"Total\" de la tabla y el ancho del texto del mismo campo.\n  - Activar scroll horizontal si los elementos no caben en el ancho disponible.\n- Para panel Visualizar Cotización:\n  - Si el panel está en Estado plegado, el botón de cierre debe habilitarse o deshabilitarse según el resultado de la validación 'Items Válidos en Detalle Productos'.\n  - En cambio Si el panel está desplegado, \n\n---\n\n## 5. Especificaciones adicionales\n\n### Detalles adicionales de campos\n\nPara especificar detalles que no pueden ser descritos en los diagramas, la tabla siguiente contiene detalles adicionales de campos:\n\n|Campo    | Tipo objeto gráfico, Tipo de datos | Detalles                         |\n|---------|:----------------------------------:|----------------------------------|\n|Cliente  | Campo de texto, Texto | Nombre del cliente, debe usar Validación Nombre Cliente, y recortar caracteres de espacio al principio y al final. |\n|Item     | Celda de tabla, Número entero | Generado automáticamente por el sistema (comienza en 1 numerando consecutivamente cada fila de la tabla), usa formato de cantidad sin decimales. |\n|Producto | Celda de tabla, Texto | Ingresado Por el usuario, debe usar Validación Nombre Producto y recortar caracteres de espacio al principio y al final. |\n|Cantidad | Celda de tabla, Número Entero | Ingresado por el usuario con *Parse de Cantidad*, *Validación de Cantidad* con valor positivo, para mostrarse usa formato de cantidad sin decimales. |\n|Precio Unitario | Celda de tabla, Cantidad monetaria | Ingresado por el usuario con *Parse de Formato Monetario* (si se ingresa con decimales se acepta redondeo de hasta dos dígitos), Validación de moneda con monto positivo, para mostrarse usa Formato Monetario hasta dos decimales. |\n|Total    | Celda de tabla, Cantidad monetaria | Calculado por el sistema cuando se ingresan producto, cantidad y precio unitario en la misma fila, es decir el resultado de `Cantidad * Precio Unitario` redondeado a cero decimales. Para mostrarse usa Formato Monetario sin decimales. |\n|Suma total | Campo de texto, cantidad monetaria | Calculado por el sistema luego de ingresado o modificado algún registro de la tabla, para mostrarse usa Formato Monetario sin decimales. |\n|Cantidad Items | Etiqueta, Texto | Calculado por el sistema luego de ingresar, modificar o eliminar algún registro de la tabla, para mostrarse usa formato de cantidad sin decimales. Solo considera celdas con datos; si tabla está vacía, mostrar \"Sin ítems\". Habiendo al menos un ítem, mostrar \"X Ítems\" o \"1 Ítem\" según corresponda. |\n\n### Reglas de cálculo automático\n\n| Campo calculado  | Fórmula o lógica                             | Evento que lo activa                 |\n|------------------|----------------------------------------------|--------------------------------------|\n| Total (por fila) | `Cantidad * Precio Unitario`                 | Cuando se modifica cantidad o precio |\n| Suma Total       | Suma de todos los campos \"Total\" de la tabla | Cuando se modifica una fila          |\n| Cantidad Ítems   | Concatenar valor de cantidad de ítems de la tabla con el texto \" Ítems\" o \" Ítem\" si hay 0 o 1 ítem en total. Restricción: Conteo de filas con producto válido y cantidad > 0 | Al agregar o quitar una fila válida      |\n\n### Especificación de implementación de formatos\n\n*Nota de implementación:* Para la representación en string de los formatos, tanto del de Cantidad, como del Monetario, se debe utilizar las funcionalidades de la librería `locale`, estableciéndose la utilización de esos formatos como constantes en todo el programa.\nComo se muestra en el siguiente ejemplo de código, se debe utilizar la constante `FORMATO_CANTIDAD` en todo el programa:\n\n```python\n  import locale\n  locale.setlocale(locale.LC_ALL, 'es_CL.UTF-8')  # Configuración para chile\n  numero = 1234567\n  FORMATO_CANTIDAD: str = \":n\"\n\n  formatted = f\"{numero{FORMATO_CANTIDAD}}\"  # \"1.234.567\"\n```\n\n### Detalle de Validaciones y Funciones de *Parse*\n\n- **Validación Nombre Cliente**\n  Esta validación implica que un texto debe ser de al menos una palabra que debe partir una letra (no importando si es mayúscula, minúscula o con acento), teniendo al menos tres caracteres. Ejemplo de valores válidos: \"Juan Pérez\", \"ABC\", \"Sociedad comercial S.A.\". Ejemplos no válidos: \"123\", \"A\", \"#ana\".\n\n- **Validación Nombre Producto**\n  Un texto debe tener al menos 3 caracteres partiendo por una letra (no importando si es mayúscula, minúscula o con acento).\n  Ejemplo de valores válidos: \"Jabón pollito\", \"BIC\", \"Lápiz #3\". Ejemplos no válidos: \"321\", \"Z\", \"?AB\".\n\n- **Validación de Cantidad con valor positivo**\n  Consiste en validar que es un número entero o de puntos flotante pero con valores mayores a cero.\n  *Nota de implementación:* Considerar que parámetro de entrada es de tipo int o float.\n  Ejemplo de valores válidos: `10000`, `123.00`. Ejemplos no válidos: `0`, `-123`, `math.inf`, `math.nan`.\n\n- **Validación de Moneda con monto positivo**\n  Consiste en validar que el monto de un valor monetario es un número entero o de punto flotante pero con valor mayor a cero.\n  *Nota de implementación:* Considerar que parámetro de entrada es de tipo int o float.\n  Ejemplo de valores válidos: `10000`, `123.00`. Ejemplos no válidos: `0`, `-123`, `math.inf`, `math.nan`.\n\n- **Validación Items Válidos en Detalle Productos**\n  Se debe validar que la tabla de Detalle Productos tenga registros válidos, es decir que existan filas con totales calculados, ignorando filas vacías que se muestren en pantalla o registros incompletos que no permitan calcular aún el total de la fila. La validación deben resultar falsa si los registros validos son cero, verdadera si hay al menos uno.\n\n- ***Parse* de Cantidad**\n  Al recibirse el texto, lo primero es recortar todos los caracteres de espacio al principio y al final. Luego, tratar de convertir al número entero o de punto flotante, pero respetando las convenciones de caracteres de punto decimal y de separador de miles que se use en este computador corriendo Windows. Si el texto entregado se puede transformar a un número en punto flotante, se debe usar la función de truncar con cero decimales. Si no se puede convertir a número, entregar error de valor.\n  *Nota de implementación:* Se deben utilizar las funcionalidades de la librería `locale` como se describió antes en la sección [Especificación de implementación de formatos](#especificación-de-implementación-de-formatos).\n\n- ***Parse* de Formato Monetario**\n  Al recibirse el texto, lo primero es recortar todos los caracteres de espacio al principio y al final. Luego, tratar de convertir al número entero o de punto flotante, pero respetando las convenciones de caracteres de moneda, punto decimal y de separador de miles que se use en este computador corriendo Windows. Luego considerando la cantidad de decimales especificada como parámetro opcional (valor por defecto cero, rechazando valores negativos como error de valor), se debe redondear el valor con esa especificación de decimales. Si no se puede convertir a número, entregar error de valor.\n*Nota de implementación:* Se deben utilizar las funcionalidades de la librería `locale` como se describió antes en la sección [Especificación de implementación de formatos](#especificación-de-implementación-de-formatos).\n\n### Acciones del usuario\n\n| Botón / Acción                | Comportamiento esperado                                                                     |\n|-------------------------------|---------------------------------------------------------------------------------------------|\n| Clic Botón de cierre en control emergente para mensajes | Cierra el control emergente, sin actualizar el estado del control vinculado. |\n| Clic Botón Grabar Cotización  | Validar todos los campos visibles. Si son válidos, generar archivo PDF.                     |\n| Clic Botón Cerrar             | Cierra la aplicación. Si hay cambios no guardados debe mostrar un diálogo de confirmación.  |\n| Clic Botón Limpiar Datos      | Elimina todas las filas de la tabla y reinicia el campo “Suma Total” a cero.                |\n| Clic `▶ / ▼` Detalle de Productos  | Alterna la visibilidad del panel de tabla de productos.                                |\n| Clic `▶ / ▼` Visualizar Cotización | Muestra/oculta el panel de previsualización, pero solo si ya hay datos disponibles.    |\n| Edición de celda de tabla     | Al modificar celda de cantidad o precio, recalcular celda “Total” de la fila, actualizar “Suma Total” y  “Cantidad Items”. Si se modifica celda producto, validar nombre. Si se actualiza “Cantidad Items”, se debe validar estado activación de Botón Visualizar Cotización. |\n| Clic en fila de tabla         | Selecciona la fila, permitiendo eliminarla con el botón de eliminación.                     |\n| Clic en ícono inserción tabla | Inserta una nueva fila vacía debajo de la fila actual. Posiciona el cursor en la primera celda editable. |\n| Clic en ícono eliminación tabla | Elimina la fila seleccionada, mostrando confirmación si la fila contiene datos.           |\n\n## 6. Referencias\n\n- Herramienta web para crear bosquejos: <https://asciiflow.com/>\n````\n</attachment>\n\n</attachments>\n<context>\nThe current date is 6 de agosto de 2025.\nNo active tasks or terminals found.\n</context>\n<editorContext>\nThe user's current file is c:\\Users\\Antonio\\gitrepos\\Test_UI_v3\\docs\\Especificaciones_UI.md. \n</editorContext>\n<repoContext>\nBelow is the information about the current repository. You can use this information when you need to calculate diffs or compare changes with the default branch.\nRepository name: Test_UI\nOwner: gatuno1\nCurrent branch: main\n\n</repoContext>\n<reminderInstructions>\nWhen using the insert_edit_into_file tool, avoid repeating existing code, instead use a line comment with \\`...existing code...\\` to represent regions of unchanged code.\nWhen using the replace_string_in_file tool, include 3-5 lines of unchanged code before and after the string you want to replace, to make it unambiguous which part of the file should be edited.\nIt is much faster to edit using the replace_string_in_file tool. Prefer replace_string_in_file for making edits and only fall back to insert_edit_into_file if it fails.\n</reminderInstructions>\n<userRequest>\nSi obtén la documentación de esta librería, para clarificar si los widget de esta librería tienen un atributo genérico para habilitar o deshabilitar, y en el caso de un CtkScrollableFrame si también lo tiene y cómo se representa eso gráficamente para el control\n</userRequest>\n"
            },
            {
              "type": 3,
              "cacheType": "ephemeral"
            }
          ],
          "toolCallRounds": [
            {
              "response": "Te ayudo a obtener la documentación de CustomTkinter para clarificar sobre los atributos de habilitación/deshabilitación de widgets y específicamente del CtkScrollableFrame. ",
              "toolCalls": [
                {
                  "name": "mcp_context7_get-library-docs",
                  "arguments": "{\"context7CompatibleLibraryID\": \"/tomschimansky/customtkinter\", \"topic\": \"widget attributes enable disable state CtkScrollableFrame\", \"tokens\": 15000}",
                  "id": "toolu_01127q8sdRf6GkPPApeyWUKd__vscode-1754493045780"
                }
              ],
              "toolInputRetry": 0,
              "id": "0e75858c-4284-4c50-ae91-f232fe2df7ed"
            },
            {
              "response": "La documentación inicial es limitada. Permíteme buscar información más específica sobre los atributos de estado y el CtkScrollableFrame: ",
              "toolCalls": [
                {
                  "name": "mcp_context7_get-library-docs",
                  "arguments": "{\"context7CompatibleLibraryID\": \"/tomschimansky/customtkinter\", \"tokens\": 20000, \"topic\": \"CTkScrollableFrame widget properties attributes state enabled disabled normal appearance\"}",
                  "id": "toolu_016MHNPYqZHFJBEAAMGMTzaJ__vscode-1754493045781"
                }
              ],
              "toolInputRetry": 0,
              "id": "d3ac3fab-bfd4-413f-8911-a7f72effb804"
            },
            {
              "response": "Permíteme buscar información más específica sobre widgets de CustomTkinter y sus propiedades: ",
              "toolCalls": [
                {
                  "name": "mcp_context7_get-library-docs",
                  "arguments": "{\"context7CompatibleLibraryID\": \"/tomschimansky/customtkinter\", \"tokens\": 25000, \"topic\": \"CustomTkinter widgets CTkButton CTkEntry CTkFrame configuration options state normal disabled\"}",
                  "id": "toolu_01Pjf95hBEb7KwaKdYWwgn8q__vscode-1754493045782"
                }
              ],
              "toolInputRetry": 0,
              "id": "28e4ed76-8a69-4eea-b436-709ae8196487"
            },
            {
              "response": "Parece que la documentación disponible en Context7 es muy limitada para CustomTkinter. Permíteme buscar directamente información del repositorio de GitHub para obtener más detalles sobre las propiedades de los widgets: ",
              "toolCalls": [
                {
                  "name": "github_repo",
                  "arguments": "{\"repo\": \"TomSchimansky/CustomTkinter\", \"query\": \"CTkScrollableFrame widget properties attributes state enable disable configuration\"}",
                  "id": "toolu_019rUxKQYsEddAsmis5KUg4A__vscode-1754493045783"
                }
              ],
              "toolInputRetry": 0,
              "id": "68686bfb-35bc-405a-b2f8-2eb3239baf78"
            },
            {
              "response": "Ahora busquemos información más específica sobre el atributo `state` en los widgets: ",
              "toolCalls": [
                {
                  "name": "github_repo",
                  "arguments": "{\"query\": \"CTkButton CTkEntry CTkCheckBox state attribute normal disabled configuration\", \"repo\": \"TomSchimansky/CustomTkinter\"}",
                  "id": "toolu_01CoFntaqoJXEWzJJgS7aQfv__vscode-1754493045784"
                }
              ],
              "toolInputRetry": 0,
              "id": "5843384b-20f2-4d07-b667-74ecb36534ef"
            },
            {
              "response": "Basado en la información obtenida de la documentación y el código fuente de CustomTkinter, puedo proporcionarte clarificaciones importantes sobre los atributos de habilitación/deshabilitación:\n\n## **Atributos de Estado en CustomTkinter**\n\n### **1. Atributo `state` genérico**\n\n**SÍ**, los widgets de CustomTkinter tienen un atributo genérico `state` para habilitar/deshabilitar. Este atributo acepta los valores estándar de tkinter:\n\n- `tkinter.NORMAL` (habilitado)\n- `tkinter.DISABLED` (deshabilitado)\n\n**Widgets que soportan el atributo `state`:**\n- `CTkButton`\n- `CTkEntry` \n- `CTkCheckBox`\n- `CTkRadioButton`\n- `CTkSwitch`\n- `CTkSlider`\n- `CTkTabview`\n\n### **2. CTkScrollableFrame y el atributo `state`**\n\n**NO**, el `CTkScrollableFrame` **NO tiene** un atributo `state` propio. Esto es importante porque:\n\n1. `CTkScrollableFrame` hereda de `tkinter.Frame`, no de `CTkBaseClass`\n2. Es un contenedor compuesto por varios elementos internos\n3. No implementa lógica de habilitación/deshabilitación propia\n\n### **3. Representación Visual del Estado Deshabilitado**\n\nCuando un widget está deshabilitado (`state=tkinter.DISABLED`):\n\n**Cambios visuales:**\n- **Cursor**: Cambia a \"arrow\" (flecha normal) en lugar del cursor interactivo\n- **Color de texto**: Usa `text_color_disabled` en lugar de `text_color`\n- **Eventos**: No responde a clics ni interacciones del usuario\n- **Apariencia**: Algunos widgets pueden cambiar su apariencia visual\n\n**Ejemplo de uso:**\n```python\nimport customtkinter\nimport tkinter\n\n# Crear widgets\nbutton = customtkinter.CTkButton(root, text=\"Mi Botón\")\nentry = customtkinter.CTkEntry(root)\ncheckbox = customtkinter.CTkCheckBox(root, text=\"Mi CheckBox\")\n\n# Deshabilitar widgets\nbutton.configure(state=tkinter.DISABLED)\nentry.configure(state=tkinter.DISABLED)  \ncheckbox.configure(state=tkinter.DISABLED)\n\n# Habilitar widgets\nbutton.configure(state=tkinter.NORMAL)\nentry.configure(state=tkinter.NORMAL)\ncheckbox.configure(state=tkinter.NORMAL)\n```\n\n### **4. Alternativa para CTkScrollableFrame**\n\nPara simular habilitación/deshabilitación en un `CTkScrollableFrame`, tendrías que:\n\n1. **Deshabilitar manualmente** todos los widgets hijos dentro del frame\n2. **Cambiar visualmente** los colores del frame padre\n3. **Bloquear eventos** de scroll si es necesario\n\n```python\ndef disable_scrollable_frame(frame):\n    # Deshabilitar todos los widgets hijos\n    for child in frame.winfo_children():\n        if hasattr(child, 'configure') and hasattr(child, 'cget'):\n            try:\n                child.configure(state=tkinter.DISABLED)\n            except tkinter.TclError:\n                pass  # El widget no soporta state\n```\n\n### **Conclusión**\n\nPara tu implementación según las especificaciones:\n- **Usa `state=tkinter.DISABLED/tkinter.NORMAL`** para widgets individuales\n- **CTkScrollableFrame no tiene atributo `state` nativo**\n- **La representación visual del estado deshabilitado** incluye cambios en cursor, colores de texto y comportamiento interactivo",
              "toolCalls": [],
              "toolInputRetry": 0,
              "id": "9c4ac849-7cf6-41ae-8c24-89b701a4d2e0"
            }
          ],
          "toolCallResults": {
            "toolu_01127q8sdRf6GkPPApeyWUKd__vscode-1754493045780": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 21,
                  "value": "========================\nCODE SNIPPETS\n========================\nTITLE: Create a Basic CustomTkinter Window with a Button\nDESCRIPTION: A simple Python example demonstrating how to initialize a CustomTkinter application window, set its appearance mode (system, light, dark) and default color theme (blue, dark-blue, green). It then creates a `CTkButton` and places it in the center of the window, defining a simple function to be called on button press.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/Readme.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport customtkinter\n\ncustomtkinter.set_appearance_mode(\"System\")  # Modes: system (default), light, dark\ncustomtkinter.set_default_color_theme(\"blue\")  # Themes: blue (default), dark-blue, green\n\napp = customtkinter.CTk()  # create CTk window like you do with the Tk window\napp.geometry(\"400x240\")\n\ndef button_function():\n    print(\"button pressed\")\n\n# Use CTkButton instead of tkinter Button\nbutton = customtkinter.CTkButton(master=app, text=\"CTkButton\", command=button_function)\nbutton.place(relx=0.5, rely=0.5, anchor=customtkinter.CENTER)\n\napp.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Set Window Icon using Tkinter PhotoImage\nDESCRIPTION: This snippet demonstrates how to set the window icon in a CustomTkinter application. It utilizes the underlying Tkinter `wm iconphoto` method, typically called on the main window object, and requires a `tkinter.PhotoImage` object loaded from an image file.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.call(\"wm\", \"iconphoto\", self._w, tkinter.PhotoImage(file=\"test_images/CustomTkinter_logo_single.png\"))\n```\n\n----------------------------------------\n\nTITLE: Install and Update CustomTkinter Library\nDESCRIPTION: Instructions for installing the CustomTkinter UI library using pip. This includes the initial installation command and the command to upgrade an existing installation to the latest version, emphasizing frequent updates due to active development.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/Readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip3 install customtkinter\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip3 install customtkinter --upgrade\n```"
                }
              ]
            },
            "toolu_016MHNPYqZHFJBEAAMGMTzaJ__vscode-1754493045781": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 21,
                  "value": "========================\nCODE SNIPPETS\n========================\nTITLE: Create a Basic CustomTkinter Window with a Button\nDESCRIPTION: A simple Python example demonstrating how to initialize a CustomTkinter application window, set its appearance mode (system, light, dark) and default color theme (blue, dark-blue, green). It then creates a `CTkButton` and places it in the center of the window, defining a simple function to be called on button press.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/Readme.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport customtkinter\n\ncustomtkinter.set_appearance_mode(\"System\")  # Modes: system (default), light, dark\ncustomtkinter.set_default_color_theme(\"blue\")  # Themes: blue (default), dark-blue, green\n\napp = customtkinter.CTk()  # create CTk window like you do with the Tk window\napp.geometry(\"400x240\")\n\ndef button_function():\n    print(\"button pressed\")\n\n# Use CTkButton instead of tkinter Button\nbutton = customtkinter.CTkButton(master=app, text=\"CTkButton\", command=button_function)\nbutton.place(relx=0.5, rely=0.5, anchor=customtkinter.CENTER)\n\napp.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Set Window Icon using Tkinter PhotoImage\nDESCRIPTION: This snippet demonstrates how to set the window icon in a CustomTkinter application. It utilizes the underlying Tkinter `wm iconphoto` method, typically called on the main window object, and requires a `tkinter.PhotoImage` object loaded from an image file.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.call(\"wm\", \"iconphoto\", self._w, tkinter.PhotoImage(file=\"test_images/CustomTkinter_logo_single.png\"))\n```\n\n----------------------------------------\n\nTITLE: Install and Update CustomTkinter Library\nDESCRIPTION: Instructions for installing the CustomTkinter UI library using pip. This includes the initial installation command and the command to upgrade an existing installation to the latest version, emphasizing frequent updates due to active development.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/Readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip3 install customtkinter\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip3 install customtkinter --upgrade\n```"
                }
              ]
            },
            "toolu_01Pjf95hBEb7KwaKdYWwgn8q__vscode-1754493045782": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 21,
                  "value": "========================\nCODE SNIPPETS\n========================\nTITLE: Create a Basic CustomTkinter Window with a Button\nDESCRIPTION: A simple Python example demonstrating how to initialize a CustomTkinter application window, set its appearance mode (system, light, dark) and default color theme (blue, dark-blue, green). It then creates a `CTkButton` and places it in the center of the window, defining a simple function to be called on button press.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/Readme.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport customtkinter\n\ncustomtkinter.set_appearance_mode(\"System\")  # Modes: system (default), light, dark\ncustomtkinter.set_default_color_theme(\"blue\")  # Themes: blue (default), dark-blue, green\n\napp = customtkinter.CTk()  # create CTk window like you do with the Tk window\napp.geometry(\"400x240\")\n\ndef button_function():\n    print(\"button pressed\")\n\n# Use CTkButton instead of tkinter Button\nbutton = customtkinter.CTkButton(master=app, text=\"CTkButton\", command=button_function)\nbutton.place(relx=0.5, rely=0.5, anchor=customtkinter.CENTER)\n\napp.mainloop()\n```\n\n----------------------------------------\n\nTITLE: Set Window Icon using Tkinter PhotoImage\nDESCRIPTION: This snippet demonstrates how to set the window icon in a CustomTkinter application. It utilizes the underlying Tkinter `wm iconphoto` method, typically called on the main window object, and requires a `tkinter.PhotoImage` object loaded from an image file.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nself.call(\"wm\", \"iconphoto\", self._w, tkinter.PhotoImage(file=\"test_images/CustomTkinter_logo_single.png\"))\n```\n\n----------------------------------------\n\nTITLE: Install and Update CustomTkinter Library\nDESCRIPTION: Instructions for installing the CustomTkinter UI library using pip. This includes the initial installation command and the command to upgrade an existing installation to the latest version, emphasizing frequent updates due to active development.\n\nSOURCE: https://github.com/tomschimansky/customtkinter/blob/master/Readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip3 install customtkinter\n```\n\nLANGUAGE: Shell\nCODE:\n```\npip3 install customtkinter --upgrade\n```"
                }
              ]
            },
            "toolu_019rUxKQYsEddAsmis5KUg4A__vscode-1754493045783": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 22,
                  "value": {
                    "node": {
                      "type": 1,
                      "ctor": 2,
                      "ctorName": "lFe",
                      "children": [
                        {
                          "type": 1,
                          "ctor": 2,
                          "ctorName": "AP",
                          "children": [
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L108-L118` starting at line 108:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L108-L118\n#...\nclass App(customtkinter.CTk):\n    def __init__(self):\n        #...\n        self.scrollable_radiobutton_frame.grid(row=0, column=1, padx=15, pady=15, sticky=\"ns\")\n        self.scrollable_radiobutton_frame.configure(width=200)\n        self.scrollable_radiobutton_frame.remove_item(\"item 3\")\n\n        # create scrollable label and button frame\n        current_dir = os.path.dirname(os.path.abspath(__file__))\n        self.scrollable_label_button_frame = ScrollableLabelButtonFrame(master=self, width=300, command=self.label_button_frame_event, corner_radius=0)\n        self.scrollable_label_button_frame.grid(row=0, column=2, padx=0, pady=0, sticky=\"nsew\")\n        for i in range(20):  # add items with images\n            self.scrollable_label_button_frame.add_item(f\"image and item {i}\", image=customtkinter.CTkImage(Image.open(os.path.join(current_dir, \"test_images\", \"chat_light.png\"))))\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L41-L56` starting at line 41:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L41-L56\n#...\nclass CTkScrollbar(CTkBaseClass):\n    #...\n            if orientation.lower() == \"horizontal\":\n                height = 16\n            else:\n                height = 200\n\n        # transfer basic functionality (_bg_color, size, __appearance_mode, scaling) to CTkBaseClass\n        super().__init__(master=master, bg_color=bg_color, width=width, height=height, **kwargs)\n\n        # color\n        self._fg_color = ThemeManager.theme[\"CTkScrollbar\"][\"fg_color\"] if fg_color is None else self._check_color_type(fg_color, transparency=True)\n        self._button_color = ThemeManager.theme[\"CTkScrollbar\"][\"button_color\"] if button_color is None else self._check_color_type(button_color)\n        self._button_hover_color = ThemeManager.theme[\"CTkScrollbar\"][\"button_hover_color\"] if button_hover_color is None else self._check_color_type(button_hover_color)\n\n        # shape\n        self._corner_radius = ThemeManager.theme[\"CTkScrollbar\"][\"corner_radius\"] if corner_radius is None else corner_radius\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L16-L41` starting at line 16:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L16-L41\n#...\nclass CTkScrollbar(CTkBaseClass):\n    #...\n    def __init__(self,\n                 master: Any,\n                 width: Optional[Union[int, str]] = None,\n                 height: Optional[Union[int, str]] = None,\n                 corner_radius: Optional[int] = None,\n                 border_spacing: Optional[int] = None,\n                 minimum_pixel_length: int = 20,\n\n                 bg_color: Union[str, Tuple[str, str]] = \"transparent\",\n                 fg_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 button_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 button_hover_color: Optional[Union[str, Tuple[str, str]]] = None,\n\n                 hover: bool = True,\n                 command: Union[Callable, Any] = None,\n                 orientation: str = \"vertical\",\n                 **kwargs):\n\n        # set default dimensions according to orientation\n        if width is None:\n            if orientation.lower() == \"vertical\":\n                width = 16\n            else:\n                width = 200\n        if height is None:\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L252-L274` starting at line 252:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L252-L274\n#...\nclass CTkSlider(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n            self._hover = kwargs.pop(\"hover\")\n\n        if \"command\" in kwargs:\n            self._command = kwargs.pop(\"command\")\n\n        if \"variable\" in kwargs:\n            if self._variable is not None:\n                self._variable.trace_remove(\"write\", self._variable_callback_name)\n\n            self._variable = kwargs.pop(\"variable\")\n\n            if self._variable is not None and self._variable != \"\":\n                self._variable_callback_name = self._variable.trace_add(\"write\", self._variable_callback)\n                self.set(self._variable.get(), from_variable_callback=True)\n            else:\n                self._variable = None\n\n        if \"orientation\" in kwargs:\n            self._orientation = kwargs.pop(\"orientation\")\n            require_redraw = True\n\n        super().configure(require_redraw=require_redraw, **kwargs)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_textbox.py#L49-L308` starting at line 49:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_textbox.py#L49-L308\n#...\nclass CTkTextbox(CTkBaseClass):\n    #...\n                 activate_scrollbars: bool = True,\n                 **kwargs):\n        #...\n    def _create_grid_for_text_and_scrollbars(self, re_grid_textbox=False, re_grid_x_scrollbar=False, re_grid_y_scrollbar=False):\n        #...\n    def _check_if_scrollbars_needed(self, event=None, continue_loop: bool = False):\n        \"\"\" Method hides or places the scrollbars if they are needed on key release event of tkinter.text widget \"\"\"\n        #...\n    def _set_scaling(self, *args, **kwargs):\n        #...\n    def _set_dimensions(self, width=None, height=None):\n        #...\n    def _update_font(self):\n        \"\"\" pass font to tkinter widgets with applied font scaling and update grid with workaround \"\"\"\n        #...\n    def destroy(self):\n        #...\n    def _draw(self, no_color_updates=False):\n        #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n    def cget(self, attribute_name: str) -> any:\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L56-L75` starting at line 56:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L56-L75\n#...\nclass CTkScrollbar(CTkBaseClass):\n    #...\n        self._border_spacing = ThemeManager.theme[\"CTkScrollbar\"][\"border_spacing\"] if border_spacing is None else border_spacing\n\n        self._hover = hover\n        self._hover_state: bool = False\n        self._command = command\n        self._orientation = orientation\n        self._start_value: float = 0  # 0 to 1\n        self._end_value: float = 1  # 0 to 1\n        self._minimum_pixel_length = minimum_pixel_length\n\n        self._canvas = CTkCanvas(master=self,\n                                 highlightthickness=0,\n                                 width=self._apply_widget_scaling(self._current_width),\n                                 height=self._apply_widget_scaling(self._current_height))\n        self._canvas.place(x=0, y=0, relwidth=1, relheight=1)\n        self._draw_engine = DrawEngine(self._canvas)\n\n        self._create_bindings()\n        self._draw()\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L147-L161` starting at line 147:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L147-L161\n#...\nclass CTkScrollbar(CTkBaseClass):\n    #...\n    def _draw(self, no_color_updates=False):\n        #...\n                                        outline=self._apply_appearance_mode(self._button_color))\n\n            if self._fg_color == \"transparent\":\n                self._canvas.configure(bg=self._apply_appearance_mode(self._bg_color))\n                self._canvas.itemconfig(\"border_parts\",\n                                        fill=self._apply_appearance_mode(self._bg_color),\n                                        outline=self._apply_appearance_mode(self._bg_color))\n            else:\n                self._canvas.configure(bg=self._apply_appearance_mode(self._fg_color))\n                self._canvas.itemconfig(\"border_parts\",\n                                        fill=self._apply_appearance_mode(self._fg_color),\n                                        outline=self._apply_appearance_mode(self._fg_color))\n\n        self._canvas.update_idletasks()\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L91-L126` starting at line 91:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L91-L126\n#...\nclass App(customtkinter.CTk):\n    def __init__(self):\n        #...\n    def checkbox_frame_event(self):\n        #...\n    def radiobutton_frame_event(self):\n        #...\n    def label_button_frame_event(self, item):\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L257-L282` starting at line 257:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L257-L282\n#...\nclass CTkSwitch(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        if \"corner_radius\" in kwargs:\n            self._corner_radius = kwargs.pop(\"corner_radius\")\n            require_redraw = True\n\n        if \"border_width\" in kwargs:\n            self._border_width = kwargs.pop(\"border_width\")\n            require_redraw = True\n\n        if \"button_length\" in kwargs:\n            self._button_length = kwargs.pop(\"button_length\")\n            require_redraw = True\n\n        if \"switch_width\" in kwargs:\n            self._switch_width = kwargs.pop(\"switch_width\")\n            self._canvas.configure(width=self._apply_widget_scaling(self._switch_width))\n            require_redraw = True\n\n        if \"switch_height\" in kwargs:\n            self._switch_height = kwargs.pop(\"switch_height\")\n            self._canvas.configure(height=self._apply_widget_scaling(self._switch_height))\n            require_redraw = True\n\n        if \"text\" in kwargs:\n            self._text = kwargs.pop(\"text\")\n            self._text_label.configure(text=self._text)\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L226-L252` starting at line 226:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L226-L252\n#...\nclass CTkSlider(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n            self._progress_color = self._check_color_type(kwargs.pop(\"progress_color\"), transparency=True)\n            require_redraw = True\n\n        if \"button_color\" in kwargs:\n            self._button_color = self._check_color_type(kwargs.pop(\"button_color\"))\n            require_redraw = True\n\n        if \"button_hover_color\" in kwargs:\n            self._button_hover_color = self._check_color_type(kwargs.pop(\"button_hover_color\"))\n            require_redraw = True\n\n        if \"from_\" in kwargs:\n            self._from_ = kwargs.pop(\"from_\")\n\n        if \"to\" in kwargs:\n            self._to = kwargs.pop(\"to\")\n\n        if \"state\" in kwargs:\n            self._state = kwargs.pop(\"state\")\n            self._set_cursor()\n            require_redraw = True\n\n        if \"number_of_steps\" in kwargs:\n            self._number_of_steps = kwargs.pop(\"number_of_steps\")\n\n        if \"hover\" in kwargs:\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L33-L276` starting at line 33:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L33-L276\n#...\nclass CTkSlider(CTkBaseClass):\n    #...\n                 to: int = 1,\n                 state: str = \"normal\",\n                 number_of_steps: Union[int, None] = None,\n                 hover: bool = True,\n                 command: Union[Callable[[float], Any], None] = None,\n                 variable: Union[tkinter.Variable, None] = None,\n                 orientation: str = \"horizontal\",\n                 **kwargs):\n        #...\n    def _create_bindings(self, sequence: Optional[str] = None):\n        \"\"\" set necessary bindings for functionality of widget, will overwrite other bindings \"\"\"\n        #...\n    def _set_scaling(self, *args, **kwargs):\n        #...\n    def _set_dimensions(self, width=None, height=None):\n        #...\n    def destroy(self):\n        #...\n    def _set_cursor(self):\n        #...\n    def _draw(self, no_color_updates=False):\n        #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n    def cget(self, attribute_name: str) -> any:\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L201-L226` starting at line 201:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L201-L226\n#...\nclass CTkSlider(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        if \"corner_radius\" in kwargs:\n            self._corner_radius = kwargs.pop(\"corner_radius\")\n            require_redraw = True\n\n        if \"button_corner_radius\" in kwargs:\n            self._button_corner_radius = kwargs.pop(\"button_corner_radius\")\n            require_redraw = True\n\n        if \"border_width\" in kwargs:\n            self._border_width = kwargs.pop(\"border_width\")\n            require_redraw = True\n\n        if \"button_length\" in kwargs:\n            self._button_length = kwargs.pop(\"button_length\")\n            require_redraw = True\n\n        if \"fg_color\" in kwargs:\n            self._fg_color = self._check_color_type(kwargs.pop(\"fg_color\"))\n            require_redraw = True\n\n        if \"border_color\" in kwargs:\n            self._border_color = self._check_color_type(kwargs.pop(\"border_color\"), transparency=True)\n            require_redraw = True\n\n        if \"progress_color\" in kwargs:\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L384-L399` starting at line 384:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L384-L399\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def _on_leave(self, event=0):\n        if self._check_state is True:\n            self._canvas.itemconfig(\"inner_parts\",\n                                    fill=self._apply_appearance_mode(self._fg_color),\n                                    outline=self._apply_appearance_mode(self._fg_color))\n            self._canvas.itemconfig(\"border_parts\",\n                                    fill=self._apply_appearance_mode(self._fg_color),\n                                    outline=self._apply_appearance_mode(self._fg_color))\n        else:\n            self._canvas.itemconfig(\"inner_parts\",\n                                    fill=self._apply_appearance_mode(self._bg_color),\n                                    outline=self._apply_appearance_mode(self._bg_color))\n            self._canvas.itemconfig(\"border_parts\",\n                                    fill=self._apply_appearance_mode(self._border_color),\n                                    outline=self._apply_appearance_mode(self._border_color))\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_textbox.py#L253-L272` starting at line 253:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_textbox.py#L253-L272\n#...\nclass CTkTextbox(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        if \"fg_color\" in kwargs:\n            self._fg_color = self._check_color_type(kwargs.pop(\"fg_color\"), transparency=True)\n            require_redraw = True\n\n            # check if CTk widgets are children of the frame and change their _bg_color to new frame fg_color\n            for child in self.winfo_children():\n                if isinstance(child, CTkBaseClass) and hasattr(child, \"_fg_color\"):\n                    child.configure(bg_color=self._fg_color)\n\n        if \"border_color\" in kwargs:\n            self._border_color = self._check_color_type(kwargs.pop(\"border_color\"))\n            require_redraw = True\n\n        if \"text_color\" in kwargs:\n            self._text_color = self._check_color_type(kwargs.pop(\"text_color\"))\n            require_redraw = True\n\n        if \"scrollbar_button_color\" in kwargs:\n            self._scrollbar_button_color = self._check_color_type(kwargs.pop(\"scrollbar_button_color\"))\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L76-L88` starting at line 76:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L76-L88\n#...\nclass CTkScrollbar(CTkBaseClass):\n    #...\n    def _create_bindings(self, sequence: Optional[str] = None):\n        \"\"\" set necessary bindings for functionality of widget, will overwrite other bindings \"\"\"\n        if sequence is None:\n            self._canvas.tag_bind(\"border_parts\", \"<Button-1>\", self._clicked)\n        if sequence is None or sequence == \"<Enter>\":\n            self._canvas.bind(\"<Enter>\", self._on_enter)\n        if sequence is None or sequence == \"<Leave>\":\n            self._canvas.bind(\"<Leave>\", self._on_leave)\n        if sequence is None or sequence == \"<B1-Motion>\":\n            self._canvas.bind(\"<B1-Motion>\", self._clicked)\n        if sequence is None or sequence == \"<MouseWheel>\":\n            self._canvas.bind(\"<MouseWheel>\", self._mouse_scroll_event)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L16-L35` starting at line 16:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L16-L35\n#...\nclass CTkFrame(CTkBaseClass):\n    #...\n    def __init__(self,\n                 master: Any,\n                 width: int = 200,\n                 height: int = 200,\n                 corner_radius: Optional[Union[int, str]] = None,\n                 border_width: Optional[Union[int, str]] = None,\n\n                 bg_color: Union[str, Tuple[str, str]] = \"transparent\",\n                 fg_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 border_color: Optional[Union[str, Tuple[str, str]]] = None,\n\n                 background_corner_colors: Union[Tuple[Union[str, Tuple[str, str]]], None] = None,\n                 overwrite_preferred_drawing_method: Union[str, None] = None,\n                 **kwargs):\n\n        # transfer basic functionality (_bg_color, size, __appearance_mode, scaling) to CTkBaseClass\n        super().__init__(master=master, bg_color=bg_color, width=width, height=height, **kwargs)\n\n        # color\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L216-L228` starting at line 216:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L216-L228\n#...\nclass CTkScrollbar(CTkBaseClass):\n    #...\n    def _on_enter(self, event=0):\n        if self._hover is True:\n            self._hover_state = True\n            self._canvas.itemconfig(\"scrollbar_parts\",\n                                    outline=self._apply_appearance_mode(self._button_hover_color),\n                                    fill=self._apply_appearance_mode(self._button_hover_color))\n\n    def _on_leave(self, event=0):\n        self._hover_state = False\n        self._canvas.itemconfig(\"scrollbar_parts\",\n                                outline=self._apply_appearance_mode(self._button_color),\n                                fill=self._apply_appearance_mode(self._button_color))\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L39-L59` starting at line 39:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L39-L59\n#...\nclass CTkTabview(CTkBaseClass):\n    #...\n                 text_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 text_color_disabled: Optional[Union[str, Tuple[str, str]]] = None,\n\n                 command: Union[Callable, Any] = None,\n                 anchor: str = \"center\",\n                 state: str = \"normal\",\n                 **kwargs):\n\n        # transfer some functionality to CTkFrame\n        super().__init__(master=master, bg_color=bg_color, width=width, height=height, **kwargs)\n\n        # color\n        self._border_color = ThemeManager.theme[\"CTkFrame\"][\"border_color\"] if border_color is None else self._check_color_type(border_color)\n\n        # determine fg_color of frame\n        if fg_color is None:\n            if isinstance(self.master, (CTkFrame, CTkTabview)):\n                if self.master.cget(\"fg_color\") == ThemeManager.theme[\"CTkFrame\"][\"fg_color\"]:\n                    self._fg_color = ThemeManager.theme[\"CTkFrame\"][\"top_fg_color\"]\n                else:\n                    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L247-L272` starting at line 247:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L247-L272\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n                self._font.remove_size_configure_callback(self._update_font)\n            self._font = self._check_font_type(kwargs.pop(\"font\"))\n            if isinstance(self._font, CTkFont):\n                self._font.add_size_configure_callback(self._update_font)\n\n            self._update_font()\n\n        if \"state\" in kwargs:\n            self._state = kwargs.pop(\"state\")\n            self._set_cursor()\n            require_redraw = True\n\n        if \"fg_color\" in kwargs:\n            self._fg_color = self._check_color_type(kwargs.pop(\"fg_color\"))\n            require_redraw = True\n\n        if \"hover_color\" in kwargs:\n            self._hover_color = self._check_color_type(kwargs.pop(\"hover_color\"))\n            require_redraw = True\n\n        if \"border_color\" in kwargs:\n            self._border_color = self._check_color_type(kwargs.pop(\"border_color\"))\n            require_redraw = True\n\n        if \"checkmark_color\" in kwargs:\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L266-L278` starting at line 266:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L266-L278\n#...\nclass CTkTabview(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n            self._segmented_button.configure(fg_color=kwargs.pop(\"segmented_button_fg_color\"))\n        if \"segmented_button_selected_color\" in kwargs:\n            self._segmented_button.configure(selected_color=kwargs.pop(\"segmented_button_selected_color\"))\n        if \"segmented_button_selected_hover_color\" in kwargs:\n            self._segmented_button.configure(selected_hover_color=kwargs.pop(\"segmented_button_selected_hover_color\"))\n        if \"segmented_button_unselected_color\" in kwargs:\n            self._segmented_button.configure(unselected_color=kwargs.pop(\"segmented_button_unselected_color\"))\n        if \"segmented_button_unselected_hover_color\" in kwargs:\n            self._segmented_button.configure(unselected_hover_color=kwargs.pop(\"segmented_button_unselected_hover_color\"))\n        if \"text_color\" in kwargs:\n            self._segmented_button.configure(text_color=kwargs.pop(\"text_color\"))\n        if \"text_color_disabled\" in kwargs:\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L194-L218` starting at line 194:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L194-L218\n#...\nclass CTkEntry(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        if \"state\" in kwargs:\n            self._state = kwargs.pop(\"state\")\n            self._entry.configure(state=self._state)\n\n        if \"fg_color\" in kwargs:\n            self._fg_color = self._check_color_type(kwargs.pop(\"fg_color\"))\n            require_redraw = True\n\n        if \"text_color\" in kwargs:\n            self._text_color = self._check_color_type(kwargs.pop(\"text_color\"))\n            require_redraw = True\n\n        if \"placeholder_text_color\" in kwargs:\n            self._placeholder_text_color = self._check_color_type(kwargs.pop(\"placeholder_text_color\"))\n            require_redraw = True\n\n        if \"border_color\" in kwargs:\n            self._border_color = self._check_color_type(kwargs.pop(\"border_color\"))\n            require_redraw = True\n\n        if \"border_width\" in kwargs:\n            self._border_width = kwargs.pop(\"border_width\")\n            self._create_grid()\n            require_redraw = True\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L248-L266` starting at line 248:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L248-L266\n#...\nclass CTkTabview(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        if \"corner_radius\" in kwargs:\n            self._corner_radius = kwargs.pop(\"corner_radius\")\n            self._set_grid_segmented_button()\n            self._set_grid_current_tab()\n            self._set_grid_canvas()\n            self._configure_segmented_button_background_corners()\n            self._segmented_button.configure(corner_radius=self._corner_radius)\n        if \"border_width\" in kwargs:\n            self._border_width = kwargs.pop(\"border_width\")\n            require_redraw = True\n        if \"fg_color\" in kwargs:\n            self._fg_color = self._check_color_type(kwargs.pop(\"fg_color\"), transparency=True)\n            self._configure_segmented_button_background_corners()\n            require_redraw = True\n        if \"border_color\" in kwargs:\n            self._border_color = self._check_color_type(kwargs.pop(\"border_color\"))\n            require_redraw = True\n        if \"segmented_button_fg_color\" in kwargs:\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L92-L108` starting at line 92:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L92-L108\n#...\nclass App(customtkinter.CTk):\n    def __init__(self):\n        super().__init__()\n\n        self.title(\"CTkScrollableFrame example\")\n        self.grid_rowconfigure(0, weight=1)\n        self.columnconfigure(2, weight=1)\n\n        # create scrollable checkbox frame\n        self.scrollable_checkbox_frame = ScrollableCheckBoxFrame(master=self, width=200, command=self.checkbox_frame_event,\n                                                                 item_list=[f\"item {i}\" for i in range(50)])\n        self.scrollable_checkbox_frame.grid(row=0, column=0, padx=15, pady=15, sticky=\"ns\")\n        self.scrollable_checkbox_frame.add_item(\"new item\")\n\n        # create scrollable radiobutton frame\n        self.scrollable_radiobutton_frame = ScrollableRadiobuttonFrame(master=self, width=500, command=self.radiobutton_frame_event,\n                                                                       item_list=[f\"item {i}\" for i in range(100)],\n                                                                       label_text=\"ScrollableRadiobuttonFrame\")\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L278-L290` starting at line 278:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L278-L290\n#...\nclass CTkTabview(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n            self._segmented_button.configure(text_color_disabled=kwargs.pop(\"text_color_disabled\"))\n\n        if \"command\" in kwargs:\n            self._command = kwargs.pop(\"command\")\n        if \"anchor\" in kwargs:\n            self._anchor = kwargs.pop(\"anchor\")\n            self._configure_grid()\n            self._set_grid_segmented_button()\n        if \"state\" in kwargs:\n            self._segmented_button.configure(state=kwargs.pop(\"state\"))\n\n        super().configure(require_redraw=require_redraw, **kwargs)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L94-L108` starting at line 94:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L94-L108\n#...\nclass CTkFrame(CTkBaseClass):\n    #...\n    def _draw(self, no_color_updates=False):\n        super()._draw(no_color_updates)\n\n        if not self._canvas.winfo_exists():\n            return\n\n        if self._background_corner_colors is not None:\n            self._draw_engine.draw_background_corners(self._apply_widget_scaling(self._current_width),\n                                                      self._apply_widget_scaling(self._current_height))\n            self._canvas.itemconfig(\"background_corner_top_left\", fill=self._apply_appearance_mode(self._background_corner_colors[0]))\n            self._canvas.itemconfig(\"background_corner_top_right\", fill=self._apply_appearance_mode(self._background_corner_colors[1]))\n            self._canvas.itemconfig(\"background_corner_bottom_right\", fill=self._apply_appearance_mode(self._background_corner_colors[2]))\n            self._canvas.itemconfig(\"background_corner_bottom_left\", fill=self._apply_appearance_mode(self._background_corner_colors[3]))\n        else:\n            self._canvas.delete(\"background_parts\")\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L283-L306` starting at line 283:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L283-L306\n#...\nclass CTkSwitch(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n        if \"font\" in kwargs:\n            if isinstance(self._font, CTkFont):\n                self._font.remove_size_configure_callback(self._update_font)\n            self._font = self._check_font_type(kwargs.pop(\"font\"))\n            if isinstance(self._font, CTkFont):\n                self._font.add_size_configure_callback(self._update_font)\n\n            self._update_font()\n\n        if \"state\" in kwargs:\n            self._state = kwargs.pop(\"state\")\n            self._set_cursor()\n            require_redraw = True\n\n        if \"fg_color\" in kwargs:\n            self._fg_color = self._check_color_type(kwargs.pop(\"fg_color\"))\n            require_redraw = True\n\n        if \"border_color\" in kwargs:\n            self._border_color = self._check_color_type(kwargs.pop(\"border_color\"), transparency=True)\n            require_redraw = True\n\n        if \"progress_color\" in kwargs:\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L193-L213` starting at line 193:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L193-L213\n#...\nclass CTkTabview(CTkBaseClass):\n    #...\n    def _grid_forget_all_tabs(self, exclude_name=None):\n        for name, frame in self._tab_dict.items():\n            if name != exclude_name:\n                frame.grid_forget()\n\n    def _create_tab(self) -> CTkFrame:\n        new_tab = CTkFrame(self,\n                           height=0,\n                           width=0,\n                           border_width=0,\n                           corner_radius=0)\n\n        if self._fg_color == \"transparent\":\n            new_tab.configure(fg_color=self._apply_appearance_mode(self._bg_color),\n                              bg_color=self._apply_appearance_mode(self._bg_color))\n        else:\n            new_tab.configure(fg_color=self._apply_appearance_mode(self._fg_color),\n                              bg_color=self._apply_appearance_mode(self._fg_color))\n\n        return new_tab\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py#L34-L39` starting at line 34:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py#L34-L39\n#...\n    customtkinter.CTkCheckBox(frame_4).grid(row=0, column=i, padx=10, pady=10)\n    customtkinter.CTkCheckBox(frame_5).grid(row=i, padx=10, pady=10)\n\n\napp.mainloop()\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L76-L257` starting at line 76:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L76-L257\n#...\nclass CTkScrollbar(CTkBaseClass):\n    #...\n    def _create_bindings(self, sequence: Optional[str] = None):\n        \"\"\" set necessary bindings for functionality of widget, will overwrite other bindings \"\"\"\n        #...\n    def _set_scaling(self, *args, **kwargs):\n        #...\n    def _set_dimensions(self, width=None, height=None):\n        #...\n    def _get_scrollbar_values_for_minimum_pixel_size(self):\n        #...\n    def _draw(self, no_color_updates=False):\n        #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n    def cget(self, attribute_name: str) -> any:\n        #...\n    def _on_enter(self, event=0):\n        #...\n    def _on_leave(self, event=0):\n        #...\n    def _clicked(self, event):\n        #...\n    def _mouse_scroll_event(self, event=None):\n        #...\n    def set(self, start_value: float, end_value: float):\n        #...\n    def get(self):\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L127-L132` starting at line 127:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L127-L132\n#...\nclass CTkFrame(CTkBaseClass):\n    #...\n    def _draw(self, no_color_updates=False):\n        #...\n                                    outline=self._apply_appearance_mode(self._border_color))\n            self._canvas.configure(bg=self._apply_appearance_mode(self._bg_color))\n\n        # self._canvas.tag_lower(\"inner_parts\")  # maybe unnecessary, I don't know ???\n        # self._canvas.tag_lower(\"border_parts\")\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L35-L53` starting at line 35:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L35-L53\n#...\nclass CTkFrame(CTkBaseClass):\n    #...\n        self._border_color = ThemeManager.theme[\"CTkFrame\"][\"border_color\"] if border_color is None else self._check_color_type(border_color)\n\n        # determine fg_color of frame\n        if fg_color is None:\n            if isinstance(self.master, CTkFrame):\n                if self.master._fg_color == ThemeManager.theme[\"CTkFrame\"][\"fg_color\"]:\n                    self._fg_color = ThemeManager.theme[\"CTkFrame\"][\"top_fg_color\"]\n                else:\n                    self._fg_color = ThemeManager.theme[\"CTkFrame\"][\"fg_color\"]\n            else:\n                self._fg_color = ThemeManager.theme[\"CTkFrame\"][\"fg_color\"]\n        else:\n            self._fg_color = self._check_color_type(fg_color, transparency=True)\n\n        self._background_corner_colors = background_corner_colors  # rendering options for DrawEngine\n\n        # shape\n        self._corner_radius = ThemeManager.theme[\"CTkFrame\"][\"corner_radius\"] if corner_radius is None else corner_radius\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L53-L65` starting at line 53:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L53-L65\n#...\nclass CTkFrame(CTkBaseClass):\n    #...\n        self._border_width = ThemeManager.theme[\"CTkFrame\"][\"border_width\"] if border_width is None else border_width\n\n        self._canvas = CTkCanvas(master=self,\n                                 highlightthickness=0,\n                                 width=self._apply_widget_scaling(self._current_width),\n                                 height=self._apply_widget_scaling(self._current_height))\n        self._canvas.place(x=0, y=0, relwidth=1, relheight=1)\n        self._canvas.configure(bg=self._apply_appearance_mode(self._bg_color))\n        self._draw_engine = DrawEngine(self._canvas)\n        self._overwrite_preferred_drawing_method = overwrite_preferred_drawing_method\n\n        self._draw(no_color_updates=True)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L109-L127` starting at line 109:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L109-L127\n#...\nclass CTkFrame(CTkBaseClass):\n    #...\n    def _draw(self, no_color_updates=False):\n        #...\n        requires_recoloring = self._draw_engine.draw_rounded_rect_with_border(self._apply_widget_scaling(self._current_width),\n                                                                              self._apply_widget_scaling(self._current_height),\n                                                                              self._apply_widget_scaling(self._corner_radius),\n                                                                              self._apply_widget_scaling(self._border_width),\n                                                                              overwrite_preferred_drawing_method=self._overwrite_preferred_drawing_method)\n\n        if no_color_updates is False or requires_recoloring:\n            if self._fg_color == \"transparent\":\n                self._canvas.itemconfig(\"inner_parts\",\n                                        fill=self._apply_appearance_mode(self._bg_color),\n                                        outline=self._apply_appearance_mode(self._bg_color))\n            else:\n                self._canvas.itemconfig(\"inner_parts\",\n                                        fill=self._apply_appearance_mode(self._fg_color),\n                                        outline=self._apply_appearance_mode(self._fg_color))\n\n            self._canvas.itemconfig(\"border_parts\",\n                                    fill=self._apply_appearance_mode(self._border_color),\n                                #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L5-L30` starting at line 5:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L5-L30\n#...\nclass ScrollableCheckBoxFrame(customtkinter.CTkScrollableFrame):\n    def __init__(self, master, item_list, command=None, **kwargs):\n        super().__init__(master, **kwargs)\n\n        self.command = command\n        self.checkbox_list = []\n        for i, item in enumerate(item_list):\n            self.add_item(item)\n\n    def add_item(self, item):\n        checkbox = customtkinter.CTkCheckBox(self, text=item)\n        if self.command is not None:\n            checkbox.configure(command=self.command)\n        checkbox.grid(row=len(self.checkbox_list), column=0, pady=(0, 10))\n        self.checkbox_list.append(checkbox)\n\n    def remove_item(self, item):\n        for checkbox in self.checkbox_list:\n            if item == checkbox.cget(\"text\"):\n                checkbox.destroy()\n                self.checkbox_list.remove(checkbox)\n                return\n\n    def get_checked_items(self):\n        return [checkbox.cget(\"text\") for checkbox in self.checkbox_list if checkbox.get() == 1]\n#...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L189-L190` starting at line 189:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L189-L190\n#...\nclass CTkScrollbar(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n        super().configure(require_redraw=require_redraw, **kwargs)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L163-L188` starting at line 163:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L163-L188\n#...\nclass CTkScrollbar(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        if \"fg_color\" in kwargs:\n            self._fg_color = self._check_color_type(kwargs.pop(\"fg_color\"), transparency=True)\n            require_redraw = True\n\n        if \"button_color\" in kwargs:\n            self._button_color = self._check_color_type(kwargs.pop(\"button_color\"))\n            require_redraw = True\n\n        if \"button_hover_color\" in kwargs:\n            self._button_hover_color = self._check_color_type(kwargs.pop(\"button_hover_color\"))\n            require_redraw = True\n\n        if \"hover\" in kwargs:\n            self._hover = kwargs.pop(\"hover\")\n\n        if \"command\" in kwargs:\n            self._command = kwargs.pop(\"command\")\n\n        if \"corner_radius\" in kwargs:\n            self._corner_radius = kwargs.pop(\"corner_radius\")\n            require_redraw = True\n\n        if \"border_spacing\" in kwargs:\n            self._border_spacing = kwargs.pop(\"border_spacing\")\n            require_redraw = True\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py#L20-L34` starting at line 20:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py#L20-L34\n#...\nframe_3 = customtkinter.CTkScrollableFrame(app, orientation=\"horizontal\")\nframe_3.grid(row=0, column=1, padx=20, pady=20)\n\nframe_4 = customtkinter.CTkScrollableFrame(app, orientation=\"horizontal\", label_fg_color=\"transparent\")\nframe_4.grid(row=1, column=1, padx=20, pady=20)\nframe_4.configure(label_text=\"CTkScrollableFrame\")\n\nframe_5 = customtkinter.CTkScrollableFrame(app, orientation=\"vertical\", label_text=\"CTkScrollableFrame\", corner_radius=0)\nframe_5.grid(row=0, column=2, rowspan=2, sticky=\"nsew\")\n\nfor i in range(100):\n    customtkinter.CTkCheckBox(frame_1).grid(row=i, padx=10, pady=10)\n    customtkinter.CTkCheckBox(frame_2).grid(row=i, padx=10, pady=10)\n    customtkinter.CTkCheckBox(frame_3).grid(row=0, column=i, padx=10, pady=10)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py#L0-L19` starting at line 0:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py#L0-L19\nimport customtkinter\n\ncustomtkinter.set_default_color_theme(\"dark-blue\")\n\n\napp = customtkinter.CTk()\napp.grid_columnconfigure(2, weight=1)\napp.grid_rowconfigure(1, weight=1)\n\ntoplevel = customtkinter.CTkToplevel()\nswitch = customtkinter.CTkSwitch(toplevel, text=\"Mode\", command=lambda: customtkinter.set_appearance_mode(\"dark\" if switch.get() == 1 else \"light\"))\nswitch.grid(row=0, column=0, padx=50, pady=50)\n\nframe_1 = customtkinter.CTkScrollableFrame(app, orientation=\"vertical\", label_text=\"should not appear\", fg_color=\"transparent\")\nframe_1.grid(row=0, column=0, padx=20, pady=20)\nframe_1.configure(label_text=None)\n\nframe_2 = customtkinter.CTkScrollableFrame(app, orientation=\"vertical\", label_text=\"CTkScrollableFrame\")\nframe_2.grid(row=1, column=0, padx=20, pady=20)\n#...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L0-L19` starting at line 0:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L0-L19\nfrom typing import Union, Tuple, Optional, Any\ntry:\n    from typing import Literal\nexcept ImportError:\n    from typing_extensions import Literal\nimport tkinter\nimport sys\n\nfrom .ctk_frame import CTkFrame\nfrom .ctk_scrollbar import CTkScrollbar\nfrom .appearance_mode import CTkAppearanceModeBaseClass\nfrom .scaling import CTkScalingBaseClass\nfrom .core_widget_classes import CTkBaseClass\nfrom .ctk_label import CTkLabel\nfrom .font import CTkFont\nfrom .theme import ThemeManager\n\n\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L155-L167` starting at line 155:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L155-L167\n#...\nclass CTkFrame(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n            self._background_corner_colors = kwargs.pop(\"background_corner_colors\")\n            require_redraw = True\n\n        if \"corner_radius\" in kwargs:\n            self._corner_radius = kwargs.pop(\"corner_radius\")\n            require_redraw = True\n\n        if \"border_width\" in kwargs:\n            self._border_width = kwargs.pop(\"border_width\")\n            require_redraw = True\n\n        super().configure(require_redraw=require_redraw, **kwargs)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L247-L261` starting at line 247:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L247-L261\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def _mouse_wheel_all(self, event):\n        if self.check_if_master_is_canvas(event.widget):\n            if sys.platform.startswith(\"win\"):\n                if self._shift_pressed:\n                    if self._parent_canvas.xview() != (0.0, 1.0):\n                        self._parent_canvas.xview(\"scroll\", -int(event.delta / 6), \"units\")\n                else:\n                    if self._parent_canvas.yview() != (0.0, 1.0):\n                        self._parent_canvas.yview(\"scroll\", -int(event.delta / 6), \"units\")\n            elif sys.platform == \"darwin\":\n                if self._shift_pressed:\n                    if self._parent_canvas.xview() != (0.0, 1.0):\n                        self._parent_canvas.xview(\"scroll\", -event.delta, \"units\")\n                else:\n                    if self._parent_canvas.yview() != (0.0, 1.0):\n                        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L134-L155` starting at line 134:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L134-L155\n#...\nclass CTkFrame(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        if \"fg_color\" in kwargs:\n            self._fg_color = self._check_color_type(kwargs.pop(\"fg_color\"), transparency=True)\n            require_redraw = True\n\n            # check if CTk widgets are children of the frame and change their bg_color to new frame fg_color\n            for child in self.winfo_children():\n                if isinstance(child, CTkBaseClass):\n                    child.configure(bg_color=self._fg_color)\n\n        if \"bg_color\" in kwargs:\n            # pass bg_color change to children if fg_color is \"transparent\"\n            if self._fg_color == \"transparent\":\n                for child in self.winfo_children():\n                    if isinstance(child, CTkBaseClass):\n                        child.configure(bg_color=self._fg_color)\n\n        if \"border_color\" in kwargs:\n            self._border_color = self._check_color_type(kwargs.pop(\"border_color\"))\n            require_redraw = True\n\n        if \"background_corner_colors\" in kwargs:\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L261-L269` starting at line 261:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L261-L269\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def _mouse_wheel_all(self, event):\n        #...\n                        self._parent_canvas.yview(\"scroll\", -event.delta, \"units\")\n            else:\n                if self._shift_pressed:\n                    if self._parent_canvas.xview() != (0.0, 1.0):\n                        self._parent_canvas.xview(\"scroll\", -event.delta, \"units\")\n                else:\n                    if self._parent_canvas.yview() != (0.0, 1.0):\n                        self._parent_canvas.yview(\"scroll\", -event.delta, \"units\")\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L234-L245` starting at line 234:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L234-L245\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def _fit_frame_dimensions_to_canvas(self, event):\n        if self._orientation == \"horizontal\":\n            self._parent_canvas.itemconfigure(self._create_window_id, height=self._parent_canvas.winfo_height())\n        elif self._orientation == \"vertical\":\n            self._parent_canvas.itemconfigure(self._create_window_id, width=self._parent_canvas.winfo_width())\n\n    def _set_scroll_increments(self):\n        if sys.platform.startswith(\"win\"):\n            self._parent_canvas.configure(xscrollincrement=1, yscrollincrement=1)\n        elif sys.platform == \"darwin\":\n            self._parent_canvas.configure(xscrollincrement=4, yscrollincrement=8)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L138-L146` starting at line 138:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L138-L146\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def _set_dimensions(self, width=None, height=None):\n        if width is not None:\n            self._desired_width = width\n        if height is not None:\n            self._desired_height = height\n\n        self._parent_canvas.configure(width=self._apply_widget_scaling(self._desired_width),\n                                      height=self._apply_widget_scaling(self._desired_height))\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L92-L96` starting at line 92:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L92-L96\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def destroy(self):\n        tkinter.Frame.destroy(self)\n        CTkAppearanceModeBaseClass.destroy(self)\n        CTkScalingBaseClass.destroy(self)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L35-L52` starting at line 35:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L35-L52\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n                 label_text: str = \"\",\n                 label_font: Optional[Union[tuple, CTkFont]] = None,\n                 label_anchor: str = \"center\",\n                 orientation: Literal[\"vertical\", \"horizontal\"] = \"vertical\"):\n\n        self._orientation = orientation\n\n        # dimensions independent of scaling\n        self._desired_width = width  # _desired_width and _desired_height, represent desired size set by width and height\n        self._desired_height = height\n\n        self._parent_frame = CTkFrame(master=master, width=0, height=0, corner_radius=corner_radius,\n                                      border_width=border_width, bg_color=bg_color, fg_color=fg_color, border_color=border_color)\n        self._parent_canvas = tkinter.Canvas(master=self._parent_frame, highlightthickness=0)\n        self._set_scroll_increments()\n\n        if self._orientation == \"horizontal\":\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L112-L121` starting at line 112:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L112-L121\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def _create_grid(self):\n        #...\n            self._parent_frame.grid_columnconfigure(0, weight=1)\n            self._parent_frame.grid_rowconfigure(1, weight=1)\n            self._parent_canvas.grid(row=1, column=0, sticky=\"nsew\", padx=(border_spacing, 0), pady=border_spacing)\n            self._scrollbar.grid(row=1, column=1, sticky=\"nsew\", pady=border_spacing)\n\n            if self._label_text is not None and self._label_text != \"\":\n                self._label.grid(row=0, column=0, columnspan=2, sticky=\"ew\", padx=border_spacing, pady=border_spacing)\n            else:\n                self._label.grid_forget()\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L229-L233` starting at line 229:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L229-L233\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def cget(self, attribute_name: str):\n        #...\n            return self._scrollbar.cget(\"button_hover_color\")\n\n        else:\n            return self._parent_frame.cget(attribute_name)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L208-L229` starting at line 208:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L208-L229\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def cget(self, attribute_name: str):\n        if attribute_name == \"width\":\n            return self._desired_width\n        elif attribute_name == \"height\":\n            return self._desired_height\n\n        elif attribute_name == \"label_text\":\n            return self._label_text\n        elif attribute_name == \"label_font\":\n            return self._label.cget(\"font\")\n        elif attribute_name == \"label_text_color\":\n            return self._label.cget(\"_text_color\")\n        elif attribute_name == \"label_fg_color\":\n            return self._label.cget(\"fg_color\")\n        elif attribute_name == \"label_anchor\":\n            return self._label.cget(\"anchor\")\n\n        elif attribute_name.startswith(\"scrollbar_fg_color\"):\n            return self._scrollbar.cget(\"fg_color\")\n        elif attribute_name.startswith(\"scrollbar_button_color\"):\n            return self._scrollbar.cget(\"button_color\")\n        elif attribute_name.startswith(\"scrollbar_button_hover_color\"):\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L98-L112` starting at line 98:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L98-L112\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def _create_grid(self):\n        border_spacing = self._apply_widget_scaling(self._parent_frame.cget(\"corner_radius\") + self._parent_frame.cget(\"border_width\"))\n\n        if self._orientation == \"horizontal\":\n            self._parent_frame.grid_columnconfigure(0, weight=1)\n            self._parent_frame.grid_rowconfigure(1, weight=1)\n            self._parent_canvas.grid(row=1, column=0, sticky=\"nsew\", padx=border_spacing, pady=(border_spacing, 0))\n            self._scrollbar.grid(row=2, column=0, sticky=\"nsew\", padx=border_spacing)\n\n            if self._label_text is not None and self._label_text != \"\":\n                self._label.grid(row=0, column=0, sticky=\"ew\", padx=border_spacing, pady=border_spacing)\n            else:\n                self._label.grid_forget()\n\n        elif self._orientation == \"vertical\":\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L270-L301` starting at line 270:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L270-L301\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def _keyboard_shift_press_all(self, event):\n        self._shift_pressed = True\n\n    def _keyboard_shift_release_all(self, event):\n        self._shift_pressed = False\n\n    def check_if_master_is_canvas(self, widget):\n        if widget == self._parent_canvas:\n            return True\n        elif widget.master is not None:\n            return self.check_if_master_is_canvas(widget.master)\n        else:\n            return False\n\n    def pack(self, **kwargs):\n        self._parent_frame.pack(**kwargs)\n\n    def place(self, **kwargs):\n        self._parent_frame.place(**kwargs)\n\n    def grid(self, **kwargs):\n        self._parent_frame.grid(**kwargs)\n\n    def pack_forget(self):\n        self._parent_frame.pack_forget()\n\n    def place_forget(self, **kwargs):\n        self._parent_frame.place_forget()\n\n    def grid_forget(self, **kwargs):\n        self._parent_frame.grid_forget()\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L52-L63` starting at line 52:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L52-L63\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n            self._scrollbar = CTkScrollbar(master=self._parent_frame, orientation=\"horizontal\", command=self._parent_canvas.xview,\n                                           fg_color=scrollbar_fg_color, button_color=scrollbar_button_color, button_hover_color=scrollbar_button_hover_color)\n            self._parent_canvas.configure(xscrollcommand=self._scrollbar.set)\n        elif self._orientation == \"vertical\":\n            self._scrollbar = CTkScrollbar(master=self._parent_frame, orientation=\"vertical\", command=self._parent_canvas.yview,\n                                           fg_color=scrollbar_fg_color, button_color=scrollbar_button_color, button_hover_color=scrollbar_button_hover_color)\n            self._parent_canvas.configure(yscrollcommand=self._scrollbar.set)\n\n        self._label_text = label_text\n        self._label = CTkLabel(self._parent_frame, text=label_text, anchor=label_anchor, font=label_font,\n                               corner_radius=self._parent_frame.cget(\"corner_radius\"), text_color=label_text_color,\n                               #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L19-L34` starting at line 19:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L19-L34\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    def __init__(self,\n                 master: Any,\n                 width: int = 200,\n                 height: int = 200,\n                 corner_radius: Optional[Union[int, str]] = None,\n                 border_width: Optional[Union[int, str]] = None,\n\n                 bg_color: Union[str, Tuple[str, str]] = \"transparent\",\n                 fg_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 border_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 scrollbar_fg_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 scrollbar_button_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 scrollbar_button_hover_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 label_fg_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 label_text_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L78-L89` starting at line 78:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L78-L89\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n        self.bind_all(\"<KeyPress-Shift_R>\", self._keyboard_shift_press_all, add=\"+\")\n        self.bind_all(\"<KeyRelease-Shift_L>\", self._keyboard_shift_release_all, add=\"+\")\n        self.bind_all(\"<KeyRelease-Shift_R>\", self._keyboard_shift_release_all, add=\"+\")\n        self._create_window_id = self._parent_canvas.create_window(0, 0, window=self, anchor=\"nw\")\n\n        if self._parent_frame.cget(\"fg_color\") == \"transparent\":\n            tkinter.Frame.configure(self, bg=self._apply_appearance_mode(self._parent_frame.cget(\"bg_color\")))\n            self._parent_canvas.configure(bg=self._apply_appearance_mode(self._parent_frame.cget(\"bg_color\")))\n        else:\n            tkinter.Frame.configure(self, bg=self._apply_appearance_mode(self._parent_frame.cget(\"fg_color\")))\n            self._parent_canvas.configure(bg=self._apply_appearance_mode(self._parent_frame.cget(\"fg_color\")))\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L302-L316` starting at line 302:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L302-L316\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def grid_remove(self, **kwargs):\n        self._parent_frame.grid_remove()\n\n    def grid_propagate(self, **kwargs):\n        self._parent_frame.grid_propagate()\n\n    def grid_info(self, **kwargs):\n        return self._parent_frame.grid_info()\n\n    def lift(self, aboveThis=None):\n        self._parent_frame.lift(aboveThis)\n\n    def lower(self, belowThis=None):\n        self._parent_frame.lower(belowThis)\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L122-L137` starting at line 122:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L122-L137\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def _set_appearance_mode(self, mode_string):\n        super()._set_appearance_mode(mode_string)\n\n        if self._parent_frame.cget(\"fg_color\") == \"transparent\":\n            tkinter.Frame.configure(self, bg=self._apply_appearance_mode(self._parent_frame.cget(\"bg_color\")))\n            self._parent_canvas.configure(bg=self._apply_appearance_mode(self._parent_frame.cget(\"bg_color\")))\n        else:\n            tkinter.Frame.configure(self, bg=self._apply_appearance_mode(self._parent_frame.cget(\"fg_color\")))\n            self._parent_canvas.configure(bg=self._apply_appearance_mode(self._parent_frame.cget(\"fg_color\")))\n\n    def _set_scaling(self, new_widget_scaling, new_window_scaling):\n        super()._set_scaling(new_widget_scaling, new_window_scaling)\n\n        self._parent_canvas.configure(width=self._apply_widget_scaling(self._desired_width),\n                                      height=self._apply_widget_scaling(self._desired_height))\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L273-L315` starting at line 273:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L273-L315\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def _keyboard_shift_release_all(self, event):\n        #...\n    def check_if_master_is_canvas(self, widget):\n        #...\n    def pack(self, **kwargs):\n        #...\n    def place(self, **kwargs):\n        #...\n    def grid(self, **kwargs):\n        #...\n    def pack_forget(self):\n        #...\n    def place_forget(self, **kwargs):\n        #...\n    def grid_forget(self, **kwargs):\n        #...\n    def grid_remove(self, **kwargs):\n        #...\n    def grid_propagate(self, **kwargs):\n        #...\n    def grid_info(self, **kwargs):\n        #...\n    def lift(self, aboveThis=None):\n        #...\n    def lower(self, belowThis=None):\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L63-L78` starting at line 63:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L63-L78\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n                               fg_color=ThemeManager.theme[\"CTkScrollableFrame\"][\"label_fg_color\"] if label_fg_color is None else label_fg_color)\n\n        tkinter.Frame.__init__(self, master=self._parent_canvas, highlightthickness=0)\n        CTkAppearanceModeBaseClass.__init__(self)\n        CTkScalingBaseClass.__init__(self, scaling_type=\"widget\")\n\n        self._create_grid()\n\n        self._parent_canvas.configure(width=self._apply_widget_scaling(self._desired_width),\n                                      height=self._apply_widget_scaling(self._desired_height))\n\n        self.bind(\"<Configure>\", lambda e: self._parent_canvas.configure(scrollregion=self._parent_canvas.bbox(\"all\")))\n        self._parent_canvas.bind(\"<Configure>\", self._fit_frame_dimensions_to_canvas)\n        self.bind_all(\"<MouseWheel>\", self._mouse_wheel_all, add=\"+\")\n        self.bind_all(\"<KeyPress-Shift_L>\", self._keyboard_shift_press_all, add=\"+\")\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L148-L169` starting at line 148:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L148-L169\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def configure(self, **kwargs):\n        if \"width\" in kwargs:\n            self._set_dimensions(width=kwargs.pop(\"width\"))\n\n        if \"height\" in kwargs:\n            self._set_dimensions(height=kwargs.pop(\"height\"))\n\n        if \"corner_radius\" in kwargs:\n            new_corner_radius = kwargs.pop(\"corner_radius\")\n            self._parent_frame.configure(corner_radius=new_corner_radius)\n            if self._label is not None:\n                self._label.configure(corner_radius=new_corner_radius)\n            self._create_grid()\n\n        if \"border_width\" in kwargs:\n            self._parent_frame.configure(border_width=kwargs.pop(\"border_width\"))\n            self._create_grid()\n\n        if \"fg_color\" in kwargs:\n            self._parent_frame.configure(fg_color=kwargs.pop(\"fg_color\"))\n\n            if self._parent_frame.cget(\"fg_color\") == \"transparent\":\n                #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L185-L206` starting at line 185:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L185-L206\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def configure(self, **kwargs):\n        #...\n        if \"scrollbar_button_hover_color\" in kwargs:\n            self._scrollbar.configure(button_hover_color=kwargs.pop(\"scrollbar_button_hover_color\"))\n\n        if \"label_text\" in kwargs:\n            self._label_text = kwargs.pop(\"label_text\")\n            self._label.configure(text=self._label_text)\n            self._create_grid()\n\n        if \"label_font\" in kwargs:\n            self._label.configure(font=kwargs.pop(\"label_font\"))\n\n        if \"label_text_color\" in kwargs:\n            self._label.configure(text_color=kwargs.pop(\"label_text_color\"))\n\n        if \"label_fg_color\" in kwargs:\n            self._label.configure(fg_color=kwargs.pop(\"label_fg_color\"))\n\n        if \"label_anchor\" in kwargs:\n            self._label.configure(anchor=kwargs.pop(\"label_anchor\"))\n\n        self._parent_frame.configure(**kwargs)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L35-L271` starting at line 35:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L35-L271\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n                 label_text: str = \"\",\n                 label_font: Optional[Union[tuple, CTkFont]] = None,\n                 label_anchor: str = \"center\",\n                 orientation: Literal[\"vertical\", \"horizontal\"] = \"vertical\"):\n        #...\n    def destroy(self):\n        #...\n    def _create_grid(self):\n        #...\n    def _set_appearance_mode(self, mode_string):\n        #...\n    def _set_scaling(self, new_widget_scaling, new_window_scaling):\n        #...\n    def _set_dimensions(self, width=None, height=None):\n        #...\n    def configure(self, **kwargs):\n        #...\n    def cget(self, attribute_name: str):\n        #...\n    def _fit_frame_dimensions_to_canvas(self, event):\n        #...\n    def _set_scroll_increments(self):\n        #...\n    def _mouse_wheel_all(self, event):\n        #...\n    def _keyboard_shift_press_all(self, event):\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L169-L184` starting at line 169:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L169-L184\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n    def configure(self, **kwargs):\n        #...\n                tkinter.Frame.configure(self, bg=self._apply_appearance_mode(self._parent_frame.cget(\"bg_color\")))\n                self._parent_canvas.configure(bg=self._apply_appearance_mode(self._parent_frame.cget(\"bg_color\")))\n            else:\n                tkinter.Frame.configure(self, bg=self._apply_appearance_mode(self._parent_frame.cget(\"fg_color\")))\n                self._parent_canvas.configure(bg=self._apply_appearance_mode(self._parent_frame.cget(\"fg_color\")))\n\n            for child in self.winfo_children():\n                if isinstance(child, CTkBaseClass):\n                    child.configure(bg_color=self._parent_frame.cget(\"fg_color\"))\n\n        if \"scrollbar_fg_color\" in kwargs:\n            self._scrollbar.configure(fg_color=kwargs.pop(\"scrollbar_fg_color\"))\n\n        if \"scrollbar_button_color\" in kwargs:\n            self._scrollbar.configure(button_color=kwargs.pop(\"scrollbar_button_color\"))\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L90-L91` starting at line 90:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L90-L91\n#...\nclass CTkScrollableFrame(tkinter.Frame, CTkAppearanceModeBaseClass, CTkScalingBaseClass):\n    #...\n        self._shift_pressed = False\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            }
                          ],
                          "props": {},
                          "references": [
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L90-L91",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L90-L91"
                                },
                                "range": [
                                  {
                                    "line": 90,
                                    "character": 0
                                  },
                                  {
                                    "line": 91,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L169-L184",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L169-L184"
                                },
                                "range": [
                                  {
                                    "line": 169,
                                    "character": 0
                                  },
                                  {
                                    "line": 184,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L35-L271",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L35-L271"
                                },
                                "range": [
                                  {
                                    "line": 35,
                                    "character": 0
                                  },
                                  {
                                    "line": 271,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L185-L206",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L185-L206"
                                },
                                "range": [
                                  {
                                    "line": 185,
                                    "character": 0
                                  },
                                  {
                                    "line": 206,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L148-L169",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L148-L169"
                                },
                                "range": [
                                  {
                                    "line": 148,
                                    "character": 0
                                  },
                                  {
                                    "line": 169,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L63-L78",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L63-L78"
                                },
                                "range": [
                                  {
                                    "line": 63,
                                    "character": 0
                                  },
                                  {
                                    "line": 78,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L273-L315",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L273-L315"
                                },
                                "range": [
                                  {
                                    "line": 273,
                                    "character": 0
                                  },
                                  {
                                    "line": 315,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L122-L137",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L122-L137"
                                },
                                "range": [
                                  {
                                    "line": 122,
                                    "character": 0
                                  },
                                  {
                                    "line": 137,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L302-L316",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L302-L316"
                                },
                                "range": [
                                  {
                                    "line": 302,
                                    "character": 0
                                  },
                                  {
                                    "line": 316,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L78-L89",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L78-L89"
                                },
                                "range": [
                                  {
                                    "line": 78,
                                    "character": 0
                                  },
                                  {
                                    "line": 89,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L19-L34",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L19-L34"
                                },
                                "range": [
                                  {
                                    "line": 19,
                                    "character": 0
                                  },
                                  {
                                    "line": 34,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L52-L63",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L52-L63"
                                },
                                "range": [
                                  {
                                    "line": 52,
                                    "character": 0
                                  },
                                  {
                                    "line": 63,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L270-L301",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L270-L301"
                                },
                                "range": [
                                  {
                                    "line": 270,
                                    "character": 0
                                  },
                                  {
                                    "line": 301,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L98-L112",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L98-L112"
                                },
                                "range": [
                                  {
                                    "line": 98,
                                    "character": 0
                                  },
                                  {
                                    "line": 112,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L208-L229",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L208-L229"
                                },
                                "range": [
                                  {
                                    "line": 208,
                                    "character": 0
                                  },
                                  {
                                    "line": 229,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L229-L233",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L229-L233"
                                },
                                "range": [
                                  {
                                    "line": 229,
                                    "character": 0
                                  },
                                  {
                                    "line": 233,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L112-L121",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L112-L121"
                                },
                                "range": [
                                  {
                                    "line": 112,
                                    "character": 0
                                  },
                                  {
                                    "line": 121,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L35-L52",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L35-L52"
                                },
                                "range": [
                                  {
                                    "line": 35,
                                    "character": 0
                                  },
                                  {
                                    "line": 52,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L92-L96",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L92-L96"
                                },
                                "range": [
                                  {
                                    "line": 92,
                                    "character": 0
                                  },
                                  {
                                    "line": 96,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L138-L146",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L138-L146"
                                },
                                "range": [
                                  {
                                    "line": 138,
                                    "character": 0
                                  },
                                  {
                                    "line": 146,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L234-L245",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L234-L245"
                                },
                                "range": [
                                  {
                                    "line": 234,
                                    "character": 0
                                  },
                                  {
                                    "line": 245,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L261-L269",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L261-L269"
                                },
                                "range": [
                                  {
                                    "line": 261,
                                    "character": 0
                                  },
                                  {
                                    "line": 269,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L134-L155",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L134-L155"
                                },
                                "range": [
                                  {
                                    "line": 134,
                                    "character": 0
                                  },
                                  {
                                    "line": 155,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L247-L261",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L247-L261"
                                },
                                "range": [
                                  {
                                    "line": 247,
                                    "character": 0
                                  },
                                  {
                                    "line": 261,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L155-L167",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L155-L167"
                                },
                                "range": [
                                  {
                                    "line": 155,
                                    "character": 0
                                  },
                                  {
                                    "line": 167,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py#L0-L19",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L0-L19"
                                },
                                "range": [
                                  {
                                    "line": 0,
                                    "character": 0
                                  },
                                  {
                                    "line": 19,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py#L0-L19",
                                  "path": "/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L0-L19"
                                },
                                "range": [
                                  {
                                    "line": 0,
                                    "character": 0
                                  },
                                  {
                                    "line": 19,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py#L20-L34",
                                  "path": "/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L20-L34"
                                },
                                "range": [
                                  {
                                    "line": 20,
                                    "character": 0
                                  },
                                  {
                                    "line": 34,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L163-L188",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L163-L188"
                                },
                                "range": [
                                  {
                                    "line": 163,
                                    "character": 0
                                  },
                                  {
                                    "line": 188,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L189-L190",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L189-L190"
                                },
                                "range": [
                                  {
                                    "line": 189,
                                    "character": 0
                                  },
                                  {
                                    "line": 190,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L5-L30",
                                  "path": "/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L5-L30"
                                },
                                "range": [
                                  {
                                    "line": 5,
                                    "character": 0
                                  },
                                  {
                                    "line": 30,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L109-L127",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L109-L127"
                                },
                                "range": [
                                  {
                                    "line": 109,
                                    "character": 0
                                  },
                                  {
                                    "line": 127,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L53-L65",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L53-L65"
                                },
                                "range": [
                                  {
                                    "line": 53,
                                    "character": 0
                                  },
                                  {
                                    "line": 65,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L35-L53",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L35-L53"
                                },
                                "range": [
                                  {
                                    "line": 35,
                                    "character": 0
                                  },
                                  {
                                    "line": 53,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L127-L132",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L127-L132"
                                },
                                "range": [
                                  {
                                    "line": 127,
                                    "character": 0
                                  },
                                  {
                                    "line": 132,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L76-L257",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L76-L257"
                                },
                                "range": [
                                  {
                                    "line": 76,
                                    "character": 0
                                  },
                                  {
                                    "line": 257,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py#L34-L39",
                                  "path": "/tomschimansky/customtkinter/tree/main/test/manual_integration_tests/test_scrollable_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L34-L39"
                                },
                                "range": [
                                  {
                                    "line": 34,
                                    "character": 0
                                  },
                                  {
                                    "line": 39,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L193-L213",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L193-L213"
                                },
                                "range": [
                                  {
                                    "line": 193,
                                    "character": 0
                                  },
                                  {
                                    "line": 213,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L283-L306",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L283-L306"
                                },
                                "range": [
                                  {
                                    "line": 283,
                                    "character": 0
                                  },
                                  {
                                    "line": 306,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L94-L108",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L94-L108"
                                },
                                "range": [
                                  {
                                    "line": 94,
                                    "character": 0
                                  },
                                  {
                                    "line": 108,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L278-L290",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L278-L290"
                                },
                                "range": [
                                  {
                                    "line": 278,
                                    "character": 0
                                  },
                                  {
                                    "line": 290,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L92-L108",
                                  "path": "/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L92-L108"
                                },
                                "range": [
                                  {
                                    "line": 92,
                                    "character": 0
                                  },
                                  {
                                    "line": 108,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L248-L266",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L248-L266"
                                },
                                "range": [
                                  {
                                    "line": 248,
                                    "character": 0
                                  },
                                  {
                                    "line": 266,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L194-L218",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L194-L218"
                                },
                                "range": [
                                  {
                                    "line": 194,
                                    "character": 0
                                  },
                                  {
                                    "line": 218,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L266-L278",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L266-L278"
                                },
                                "range": [
                                  {
                                    "line": 266,
                                    "character": 0
                                  },
                                  {
                                    "line": 278,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L247-L272",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L247-L272"
                                },
                                "range": [
                                  {
                                    "line": 247,
                                    "character": 0
                                  },
                                  {
                                    "line": 272,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L39-L59",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L39-L59"
                                },
                                "range": [
                                  {
                                    "line": 39,
                                    "character": 0
                                  },
                                  {
                                    "line": 59,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L216-L228",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L216-L228"
                                },
                                "range": [
                                  {
                                    "line": 216,
                                    "character": 0
                                  },
                                  {
                                    "line": 228,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py#L16-L35",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_frame.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L16-L35"
                                },
                                "range": [
                                  {
                                    "line": 16,
                                    "character": 0
                                  },
                                  {
                                    "line": 35,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L76-L88",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L76-L88"
                                },
                                "range": [
                                  {
                                    "line": 76,
                                    "character": 0
                                  },
                                  {
                                    "line": 88,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_textbox.py#L253-L272",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_textbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L253-L272"
                                },
                                "range": [
                                  {
                                    "line": 253,
                                    "character": 0
                                  },
                                  {
                                    "line": 272,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L384-L399",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L384-L399"
                                },
                                "range": [
                                  {
                                    "line": 384,
                                    "character": 0
                                  },
                                  {
                                    "line": 399,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L201-L226",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L201-L226"
                                },
                                "range": [
                                  {
                                    "line": 201,
                                    "character": 0
                                  },
                                  {
                                    "line": 226,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L33-L276",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L33-L276"
                                },
                                "range": [
                                  {
                                    "line": 33,
                                    "character": 0
                                  },
                                  {
                                    "line": 276,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L226-L252",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L226-L252"
                                },
                                "range": [
                                  {
                                    "line": 226,
                                    "character": 0
                                  },
                                  {
                                    "line": 252,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L257-L282",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L257-L282"
                                },
                                "range": [
                                  {
                                    "line": 257,
                                    "character": 0
                                  },
                                  {
                                    "line": 282,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L91-L126",
                                  "path": "/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L91-L126"
                                },
                                "range": [
                                  {
                                    "line": 91,
                                    "character": 0
                                  },
                                  {
                                    "line": 126,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L147-L161",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L147-L161"
                                },
                                "range": [
                                  {
                                    "line": 147,
                                    "character": 0
                                  },
                                  {
                                    "line": 161,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L56-L75",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L56-L75"
                                },
                                "range": [
                                  {
                                    "line": 56,
                                    "character": 0
                                  },
                                  {
                                    "line": 75,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_textbox.py#L49-L308",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_textbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L49-L308"
                                },
                                "range": [
                                  {
                                    "line": 49,
                                    "character": 0
                                  },
                                  {
                                    "line": 308,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py#L252-L274",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_slider.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L252-L274"
                                },
                                "range": [
                                  {
                                    "line": 252,
                                    "character": 0
                                  },
                                  {
                                    "line": 274,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L16-L41",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L16-L41"
                                },
                                "range": [
                                  {
                                    "line": 16,
                                    "character": 0
                                  },
                                  {
                                    "line": 41,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py#L41-L56",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_scrollbar.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L41-L56"
                                },
                                "range": [
                                  {
                                    "line": 41,
                                    "character": 0
                                  },
                                  {
                                    "line": 56,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py#L108-L118",
                                  "path": "/tomschimansky/customtkinter/tree/main/examples/scrollable_frame_example.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L108-L118"
                                },
                                "range": [
                                  {
                                    "line": 108,
                                    "character": 0
                                  },
                                  {
                                    "line": 118,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            }
                          ]
                        }
                      ],
                      "props": {},
                      "references": []
                    }
                  }
                }
              ]
            },
            "toolu_01CoFntaqoJXEWzJJgS7aQfv__vscode-1754493045784": {
              "$mid": 20,
              "content": [
                {
                  "$mid": 22,
                  "value": {
                    "node": {
                      "type": 1,
                      "ctor": 2,
                      "ctorName": "lFe",
                      "children": [
                        {
                          "type": 1,
                          "ctor": 2,
                          "ctorName": "AP",
                          "children": [
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L266-L284` starting at line 266:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L266-L284\n#...\nclass CTkButton(CTkBaseClass):\n    #...\n    def _draw(self, no_color_updates=False):\n        #...\n                self._image_label.bind(\"<Enter>\", self._on_enter)\n                self._image_label.bind(\"<Leave>\", self._on_leave)\n                self._image_label.bind(\"<Button-1>\", self._clicked)\n                self._image_label.bind(\"<Button-1>\", self._clicked)\n\n            if no_color_updates is False:\n                # set image_label bg color (background color of label)\n                if self._apply_appearance_mode(self._fg_color) == \"transparent\":\n                    self._image_label.configure(bg=self._apply_appearance_mode(self._bg_color))\n                else:\n                    self._image_label.configure(bg=self._apply_appearance_mode(self._fg_color))\n\n        else:\n            # delete text_label if no text given\n            if self._image_label is not None:\n                self._image_label.destroy()\n                self._image_label = None\n                self._create_grid()\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L257-L282` starting at line 257:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L257-L282\n#...\nclass CTkSwitch(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        if \"corner_radius\" in kwargs:\n            self._corner_radius = kwargs.pop(\"corner_radius\")\n            require_redraw = True\n\n        if \"border_width\" in kwargs:\n            self._border_width = kwargs.pop(\"border_width\")\n            require_redraw = True\n\n        if \"button_length\" in kwargs:\n            self._button_length = kwargs.pop(\"button_length\")\n            require_redraw = True\n\n        if \"switch_width\" in kwargs:\n            self._switch_width = kwargs.pop(\"switch_width\")\n            self._canvas.configure(width=self._apply_widget_scaling(self._switch_width))\n            require_redraw = True\n\n        if \"switch_height\" in kwargs:\n            self._switch_height = kwargs.pop(\"switch_height\")\n            self._canvas.configure(height=self._apply_widget_scaling(self._switch_height))\n            require_redraw = True\n\n        if \"text\" in kwargs:\n            self._text = kwargs.pop(\"text\")\n            self._text_label.configure(text=self._text)\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L55-L62` starting at line 55:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L55-L62\n#...\nclass CTkSwitch(CTkBaseClass):\n    #...\n        self._border_color = self._check_color_type(border_color, transparency=True)\n        self._fg_color = ThemeManager.theme[\"CTkSwitch\"][\"fg_color\"] if fg_color is None else self._check_color_type(fg_color)\n        self._progress_color = ThemeManager.theme[\"CTkSwitch\"][\"progress_color\"] if progress_color is None else self._check_color_type(progress_color, transparency=True)\n        self._button_color = ThemeManager.theme[\"CTkSwitch\"][\"button_color\"] if button_color is None else self._check_color_type(button_color)\n        self._button_hover_color = ThemeManager.theme[\"CTkSwitch\"][\"button_hover_color\"] if button_hover_color is None else self._check_color_type(button_hover_color)\n        self._text_color = ThemeManager.theme[\"CTkSwitch\"][\"text_color\"] if text_color is None else self._check_color_type(text_color)\n        self._text_color_disabled = ThemeManager.theme[\"CTkSwitch\"][\"text_color_disabled\"] if text_color_disabled is None else self._check_color_type(text_color_disabled)\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L308-L331` starting at line 308:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L308-L331\n#...\nclass CTkEntry(CTkBaseClass):\n    #...\n    def _deactivate_placeholder(self):\n        if self._placeholder_text_active and self._entry.cget(\"state\") != \"readonly\":\n            self._placeholder_text_active = False\n\n            self._entry.config(fg=self._apply_appearance_mode(self._text_color),\n                               disabledforeground=self._apply_appearance_mode(self._text_color),)\n            self._entry.delete(0, tkinter.END)\n            for argument, value in self._pre_placeholder_arguments.items():\n                self._entry[argument] = value\n\n    def _entry_focus_out(self, event=None):\n        self._activate_placeholder()\n        self._is_focused = False\n\n    def _entry_focus_in(self, event=None):\n        self._deactivate_placeholder()\n        self._is_focused = True\n\n    def delete(self, first_index, last_index=None):\n        self._entry.delete(first_index, last_index)\n\n        if not self._is_focused and self._entry.get() == \"\":\n            self._activate_placeholder()\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L34-L55` starting at line 34:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L34-L55\n#...\nclass CTkSwitch(CTkBaseClass):\n    #...\n                 text_color_disabled: Optional[Union[str, Tuple[str, str]]] = None,\n\n                 text: str = \"CTkSwitch\",\n                 font: Optional[Union[tuple, CTkFont]] = None,\n                 textvariable: Union[tkinter.Variable, None] = None,\n                 onvalue: Union[int, str] = 1,\n                 offvalue: Union[int, str] = 0,\n                 variable: Union[tkinter.Variable, None] = None,\n                 hover: bool = True,\n                 command: Union[Callable, Any] = None,\n                 state: str = tkinter.NORMAL,\n                 **kwargs):\n\n        # transfer basic functionality (_bg_color, size, __appearance_mode, scaling) to CTkBaseClass\n        super().__init__(master=master, bg_color=bg_color, width=width, height=height, **kwargs)\n\n        # dimensions\n        self._switch_width = switch_width\n        self._switch_height = switch_height\n\n        # color\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L318-L333` starting at line 318:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L318-L333\n#...\nclass CTkRadioButton(CTkBaseClass):\n    #...\n    def cget(self, attribute_name: str) -> any:\n        #...\n        elif attribute_name == \"textvariable\":\n            return self._textvariable\n        elif attribute_name == \"variable\":\n            return self._variable\n        elif attribute_name == \"value\":\n            return self._value\n        elif attribute_name == \"state\":\n            return self._state\n        elif attribute_name == \"hover\":\n            return self._hover\n        elif attribute_name == \"command\":\n            return self._command\n\n        else:\n            return super().cget(attribute_name)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L278-L290` starting at line 278:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L278-L290\n#...\nclass CTkTabview(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n            self._segmented_button.configure(text_color_disabled=kwargs.pop(\"text_color_disabled\"))\n\n        if \"command\" in kwargs:\n            self._command = kwargs.pop(\"command\")\n        if \"anchor\" in kwargs:\n            self._anchor = kwargs.pop(\"anchor\")\n            self._configure_grid()\n            self._set_grid_segmented_button()\n        if \"state\" in kwargs:\n            self._segmented_button.configure(state=kwargs.pop(\"state\"))\n\n        super().configure(require_redraw=require_redraw, **kwargs)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L334-L355` starting at line 334:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L334-L355\n#...\nclass CTkRadioButton(CTkBaseClass):\n    #...\n    def _set_cursor(self):\n        if self._cursor_manipulation_enabled:\n            if self._state == tkinter.DISABLED:\n                if sys.platform == \"darwin\":\n                    self._canvas.configure(cursor=\"arrow\")\n                    if self._text_label is not None:\n                        self._text_label.configure(cursor=\"arrow\")\n                elif sys.platform.startswith(\"win\"):\n                    self._canvas.configure(cursor=\"arrow\")\n                    if self._text_label is not None:\n                        self._text_label.configure(cursor=\"arrow\")\n\n            elif self._state == tkinter.NORMAL:\n                if sys.platform == \"darwin\":\n                    self._canvas.configure(cursor=\"pointinghand\")\n                    if self._text_label is not None:\n                        self._text_label.configure(cursor=\"pointinghand\")\n                elif sys.platform.startswith(\"win\"):\n                    self._canvas.configure(cursor=\"hand2\")\n                    if self._text_label is not None:\n                        self._text_label.configure(cursor=\"hand2\")\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L34-L158` starting at line 34:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L34-L158\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n                 text: str = \"CTkCheckBox\",\n                 font: Optional[Union[tuple, CTkFont]] = None,\n                 textvariable: Union[tkinter.Variable, None] = None,\n                 state: str = tkinter.NORMAL,\n                 hover: bool = True,\n                 command: Union[Callable[[], Any], None] = None,\n                 onvalue: Union[int, str] = 1,\n                 offvalue: Union[int, str] = 0,\n                 variable: Union[tkinter.Variable, None] = None,\n                 **kwargs):\n        #...\n    def _create_bindings(self, sequence: Optional[str] = None):\n        \"\"\" set necessary bindings for functionality of widget, will overwrite other bindings \"\"\"\n        #...\n    def _set_scaling(self, *args, **kwargs):\n        #...\n    def _set_dimensions(self, width: int = None, height: int = None):\n        #...\n    def _update_font(self):\n        \"\"\" pass font to tkinter widgets with applied font scaling and update grid with workaround \"\"\"\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L519-L543` starting at line 519:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L519-L543\n#...\nclass CTkButton(CTkBaseClass):\n    #...\n    def _on_leave(self, event=None):\n        self._click_animation_running = False\n\n        if self._fg_color == \"transparent\":\n            inner_parts_color = self._bg_color\n        else:\n            inner_parts_color = self._fg_color\n\n        # set color of inner button parts\n        self._canvas.itemconfig(\"inner_parts\",\n                                outline=self._apply_appearance_mode(inner_parts_color),\n                                fill=self._apply_appearance_mode(inner_parts_color))\n\n        # set text_label bg color (label color)\n        if self._text_label is not None:\n            self._text_label.configure(bg=self._apply_appearance_mode(inner_parts_color))\n\n        # set image_label bg color (image bg color)\n        if self._image_label is not None:\n            self._image_label.configure(bg=self._apply_appearance_mode(inner_parts_color))\n\n    def _click_animation(self):\n        if self._click_animation_running:\n            self._on_enter()\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L349-L374` starting at line 349:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L349-L374\n#...\nclass CTkSwitch(CTkBaseClass):\n    #...\n    def cget(self, attribute_name: str) -> any:\n        if attribute_name == \"corner_radius\":\n            return self._corner_radius\n        elif attribute_name == \"border_width\":\n            return self._border_width\n        elif attribute_name == \"button_length\":\n            return self._button_length\n        elif attribute_name == \"switch_width\":\n            return self._switch_width\n        elif attribute_name == \"switch_height\":\n            return self._switch_height\n\n        elif attribute_name == \"fg_color\":\n            return self._fg_color\n        elif attribute_name == \"border_color\":\n            return self._border_color\n        elif attribute_name == \"progress_color\":\n            return self._progress_color\n        elif attribute_name == \"button_color\":\n            return self._button_color\n        elif attribute_name == \"button_hover_color\":\n            return self._button_hover_color\n        elif attribute_name == \"text_color\":\n            return self._text_color\n        elif attribute_name == \"text_color_disabled\":\n            return self._text_color_disabled\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L170-L187` starting at line 170:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L170-L187\n#...\nclass CTkEntry(CTkBaseClass):\n    #...\n    def _draw(self, no_color_updates=False):\n        #...\n                                      highlightcolor=self._apply_appearance_mode(self._bg_color))\n            else:\n                self._canvas.itemconfig(\"inner_parts\",\n                                        fill=self._apply_appearance_mode(self._fg_color),\n                                        outline=self._apply_appearance_mode(self._fg_color))\n                self._entry.configure(bg=self._apply_appearance_mode(self._fg_color),\n                                      disabledbackground=self._apply_appearance_mode(self._fg_color),\n                                      readonlybackground=self._apply_appearance_mode(self._fg_color),\n                                      highlightcolor=self._apply_appearance_mode(self._fg_color))\n\n            self._canvas.itemconfig(\"border_parts\",\n                                    fill=self._apply_appearance_mode(self._border_color),\n                                    outline=self._apply_appearance_mode(self._border_color))\n\n            if self._placeholder_text_active:\n                self._entry.config(fg=self._apply_appearance_mode(self._placeholder_text_color),\n                                   disabledforeground=self._apply_appearance_mode(self._placeholder_text_color),\n                                #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L379-L405` starting at line 379:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L379-L405\n#...\nclass CTkRadioButton(CTkBaseClass):\n    #...\n    def invoke(self, event=0):\n        if self._state == tkinter.NORMAL:\n            if self._check_state is False:\n                self._check_state = True\n                self.select()\n\n            if self._command is not None:\n                self._command()\n\n    def select(self, from_variable_callback=False):\n        self._check_state = True\n        self._draw()\n\n        if self._variable is not None and not from_variable_callback:\n            self._variable_callback_blocked = True\n            self._variable.set(self._value)\n            self._variable_callback_blocked = False\n\n    def deselect(self, from_variable_callback=False):\n        self._check_state = False\n        self._draw()\n\n        if self._variable is not None and not from_variable_callback:\n            self._variable_callback_blocked = True\n            self._variable.set(\"\")\n            self._variable_callback_blocked = False\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L63-L84` starting at line 63:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L63-L84\n#...\nclass CTkSwitch(CTkBaseClass):\n    #...\n        # text\n        self._text = text\n        self._text_label = None\n\n        # font\n        self._font = CTkFont() if font is None else self._check_font_type(font)\n        if isinstance(self._font, CTkFont):\n            self._font.add_size_configure_callback(self._update_font)\n\n        # shape\n        self._corner_radius = ThemeManager.theme[\"CTkSwitch\"][\"corner_radius\"] if corner_radius is None else corner_radius\n        self._border_width = ThemeManager.theme[\"CTkSwitch\"][\"border_width\"] if border_width is None else border_width\n        self._button_length = ThemeManager.theme[\"CTkSwitch\"][\"button_length\"] if button_length is None else button_length\n        self._hover_state: bool = False\n        self._check_state: bool = False  # True if switch is activated\n        self._hover = hover\n        self._state = state\n        self._onvalue = onvalue\n        self._offvalue = offvalue\n\n        # callback and control variables\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L280-L290` starting at line 280:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L280-L290\n#...\nclass CTkRadioButton(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n                self._variable.trace_remove(\"write\", self._variable_callback_name)\n\n            self._variable = kwargs.pop(\"variable\")\n\n            if self._variable is not None and self._variable != \"\":\n                self._variable_callback_name = self._variable.trace_add(\"write\", self._variable_callback)\n                self._check_state = True if self._variable.get() == self._value else False\n                require_redraw = True\n\n        super().configure(require_redraw=require_redraw, **kwargs)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_segmented_button.py#L341-L357` starting at line 341:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_segmented_button.py#L341-L357\n#...\nclass CTkSegmentedButton(CTkFrame):\n    #...\n    def cget(self, attribute_name: str) -> any:\n        #...\n        elif attribute_name == \"text_color_disabled\":\n            return self._sb_text_color_disabled\n\n        elif attribute_name == \"font\":\n            return self._font\n        elif attribute_name == \"values\":\n            return copy.copy(self._value_list)\n        elif attribute_name == \"variable\":\n            return self._variable\n        elif attribute_name == \"dynamic_resizing\":\n            return self._dynamic_resizing\n        elif attribute_name == \"command\":\n            return self._command\n\n        else:\n            raise ValueError(f\"'{attribute_name}' is not a supported argument. Look at the documentation for supported arguments.\")\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L329-L347` starting at line 329:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L329-L347\n#...\nclass CTkSwitch(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n            self._command = kwargs.pop(\"command\")\n\n        if \"textvariable\" in kwargs:\n            self._textvariable = kwargs.pop(\"textvariable\")\n            self._text_label.configure(textvariable=self._textvariable)\n\n        if \"variable\" in kwargs:\n            if self._variable is not None and self._variable != \"\":\n                self._variable.trace_remove(\"write\", self._variable_callback_name)\n\n            self._variable = kwargs.pop(\"variable\")\n\n            if self._variable is not None and self._variable != \"\":\n                self._variable_callback_name = self._variable.trace_add(\"write\", self._variable_callback)\n                self._check_state = True if self._variable.get() == self._onvalue else False\n                require_redraw = True\n\n        super().configure(require_redraw=require_redraw, **kwargs)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L444-L471` starting at line 444:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L444-L471\n#...\nclass CTkButton(CTkBaseClass):\n    #...\n    def cget(self, attribute_name: str) -> any:\n        if attribute_name == \"corner_radius\":\n            return self._corner_radius\n        elif attribute_name == \"border_width\":\n            return self._border_width\n        elif attribute_name == \"border_spacing\":\n            return self._border_spacing\n\n        elif attribute_name == \"fg_color\":\n            return self._fg_color\n        elif attribute_name == \"hover_color\":\n            return self._hover_color\n        elif attribute_name == \"border_color\":\n            return self._border_color\n        elif attribute_name == \"text_color\":\n            return self._text_color\n        elif attribute_name == \"text_color_disabled\":\n            return self._text_color_disabled\n        elif attribute_name == \"background_corner_colors\":\n            return self._background_corner_colors\n\n        elif attribute_name == \"text\":\n            return self._text\n        elif attribute_name == \"font\":\n            return self._font\n        elif attribute_name == \"textvariable\":\n            return self._textvariable\n        elif attribute_name == \"image\":\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L346-L383` starting at line 346:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L346-L383\n#...\nclass CTkEntry(CTkBaseClass):\n    #...\n    def focus_set(self):\n        #...\n    def focus_force(self):\n        #...\n    def index(self, index):\n        #...\n    def icursor(self, index):\n        #...\n    def select_adjust(self, index):\n        #...\n    def select_from(self, index):\n        #...\n    def select_clear(self):\n        #...\n    def select_present(self):\n        #...\n    def select_range(self, start_index, end_index):\n        #...\n    def select_to(self, index):\n        #...\n    def xview(self, index):\n        #...\n    def xview_moveto(self, f):\n        #...\n    def xview_scroll(self, number, what):\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L65-L85` starting at line 65:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L65-L85\n#...\nclass CTkRadioButton(CTkBaseClass):\n    #...\n        self._text_color_disabled = ThemeManager.theme[\"CTkRadioButton\"][\"text_color_disabled\"] if text_color_disabled is None else self._check_color_type(text_color_disabled)\n\n        # font\n        self._font = CTkFont() if font is None else self._check_font_type(font)\n        if isinstance(self._font, CTkFont):\n            self._font.add_size_configure_callback(self._update_font)\n\n        # callback and control variables\n        self._command = command\n        self._state = state\n        self._hover = hover\n        self._check_state: bool = False\n        self._value = value\n        self._variable: tkinter.Variable = variable\n        self._variable_callback_blocked: bool = False\n        self._textvariable = textvariable\n        self._variable_callback_name: Union[str, None] = None\n\n        # configure grid system (3x1)\n        self.grid_columnconfigure(0, weight=0)\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L266-L278` starting at line 266:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L266-L278\n#...\nclass CTkTabview(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n            self._segmented_button.configure(fg_color=kwargs.pop(\"segmented_button_fg_color\"))\n        if \"segmented_button_selected_color\" in kwargs:\n            self._segmented_button.configure(selected_color=kwargs.pop(\"segmented_button_selected_color\"))\n        if \"segmented_button_selected_hover_color\" in kwargs:\n            self._segmented_button.configure(selected_hover_color=kwargs.pop(\"segmented_button_selected_hover_color\"))\n        if \"segmented_button_unselected_color\" in kwargs:\n            self._segmented_button.configure(unselected_color=kwargs.pop(\"segmented_button_unselected_color\"))\n        if \"segmented_button_unselected_hover_color\" in kwargs:\n            self._segmented_button.configure(unselected_hover_color=kwargs.pop(\"segmented_button_unselected_hover_color\"))\n        if \"text_color\" in kwargs:\n            self._segmented_button.configure(text_color=kwargs.pop(\"text_color\"))\n        if \"text_color_disabled\" in kwargs:\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L397-L424` starting at line 397:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L397-L424\n#...\nclass CTkSwitch(CTkBaseClass):\n    #...\n    def toggle(self, event=None):\n        if self._state is not tkinter.DISABLED:\n            if self._check_state is True:\n                self._check_state = False\n            else:\n                self._check_state = True\n\n            self._draw(no_color_updates=True)\n\n            if self._variable is not None:\n                self._variable_callback_blocked = True\n                self._variable.set(self._onvalue if self._check_state is True else self._offvalue)\n                self._variable_callback_blocked = False\n\n            if self._command is not None:\n                self._command()\n\n    def select(self, from_variable_callback=False):\n        if self._state is not tkinter.DISABLED or from_variable_callback:\n            self._check_state = True\n\n            self._draw(no_color_updates=True)\n\n            if self._variable is not None and not from_variable_callback:\n                self._variable_callback_blocked = True\n                self._variable.set(self._onvalue)\n                self._variable_callback_blocked = False\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L219-L242` starting at line 219:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L219-L242\n#...\nclass CTkEntry(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n        if \"corner_radius\" in kwargs:\n            self._corner_radius = kwargs.pop(\"corner_radius\")\n            self._create_grid()\n            require_redraw = True\n\n        if \"placeholder_text\" in kwargs:\n            self._placeholder_text = kwargs.pop(\"placeholder_text\")\n            if self._placeholder_text_active:\n                self._entry.delete(0, tkinter.END)\n                self._entry.insert(0, self._placeholder_text)\n            else:\n                self._activate_placeholder()\n\n        if \"textvariable\" in kwargs:\n            self._textvariable = kwargs.pop(\"textvariable\")\n            self._entry.configure(textvariable=self._textvariable)\n\n        if \"font\" in kwargs:\n            if isinstance(self._font, CTkFont):\n                self._font.remove_size_configure_callback(self._update_font)\n            self._font = self._check_font_type(kwargs.pop(\"font\"))\n            if isinstance(self._font, CTkFont):\n                self._font.add_size_configure_callback(self._update_font)\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L375-L396` starting at line 375:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L375-L396\n#...\nclass CTkSwitch(CTkBaseClass):\n    #...\n    def cget(self, attribute_name: str) -> any:\n        #...\n        elif attribute_name == \"text\":\n            return self._text\n        elif attribute_name == \"font\":\n            return self._font\n        elif attribute_name == \"textvariable\":\n            return self._textvariable\n        elif attribute_name == \"onvalue\":\n            return self._onvalue\n        elif attribute_name == \"offvalue\":\n            return self._offvalue\n        elif attribute_name == \"variable\":\n            return self._variable\n        elif attribute_name == \"hover\":\n            return self._hover\n        elif attribute_name == \"command\":\n            return self._command\n        elif attribute_name == \"state\":\n            return self._state\n\n        else:\n            return super().cget(attribute_name)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L125-L136` starting at line 125:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L125-L136\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def _create_bindings(self, sequence: Optional[str] = None):\n        \"\"\" set necessary bindings for functionality of widget, will overwrite other bindings \"\"\"\n        if sequence is None or sequence == \"<Enter>\":\n            self._canvas.bind(\"<Enter>\", self._on_enter)\n            self._text_label.bind(\"<Enter>\", self._on_enter)\n        if sequence is None or sequence == \"<Leave>\":\n            self._canvas.bind(\"<Leave>\", self._on_leave)\n            self._text_label.bind(\"<Leave>\", self._on_leave)\n        if sequence is None or sequence == \"<Button-1>\":\n            self._canvas.bind(\"<Button-1>\", self.toggle)\n            self._text_label.bind(\"<Button-1>\", self.toggle)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L176-L193` starting at line 176:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L176-L193\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def _draw(self, no_color_updates=False):\n        super()._draw(no_color_updates)\n\n        requires_recoloring_1 = self._draw_engine.draw_rounded_rect_with_border(self._apply_widget_scaling(self._checkbox_width),\n                                                                                self._apply_widget_scaling(self._checkbox_height),\n                                                                                self._apply_widget_scaling(self._corner_radius),\n                                                                                self._apply_widget_scaling(self._border_width))\n\n        if self._check_state is True:\n            requires_recoloring_2 = self._draw_engine.draw_checkmark(self._apply_widget_scaling(self._checkbox_width),\n                                                                     self._apply_widget_scaling(self._checkbox_height),\n                                                                     self._apply_widget_scaling(self._checkbox_height * 0.58))\n        else:\n            requires_recoloring_2 = False\n            self._canvas.delete(\"checkmark\")\n\n        if no_color_updates is False or requires_recoloring_1 or requires_recoloring_2:\n            self._bg_canvas.configure(bg=self._apply_appearance_mode(self._bg_color))\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L356-L378` starting at line 356:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L356-L378\n#...\nclass CTkRadioButton(CTkBaseClass):\n    #...\n    def _on_enter(self, event=0):\n        if self._hover is True and self._state == tkinter.NORMAL:\n            self._canvas.itemconfig(\"border_parts\",\n                                    fill=self._apply_appearance_mode(self._hover_color),\n                                    outline=self._apply_appearance_mode(self._hover_color))\n\n    def _on_leave(self, event=0):\n        if self._check_state is True:\n            self._canvas.itemconfig(\"border_parts\",\n                                    fill=self._apply_appearance_mode(self._fg_color),\n                                    outline=self._apply_appearance_mode(self._fg_color))\n        else:\n            self._canvas.itemconfig(\"border_parts\",\n                                    fill=self._apply_appearance_mode(self._border_color),\n                                    outline=self._apply_appearance_mode(self._border_color))\n\n    def _variable_callback(self, var_name, index, mode):\n        if not self._variable_callback_blocked:\n            if self._variable.get() == self._value:\n                self.select(from_variable_callback=True)\n            else:\n                self.deselect(from_variable_callback=True)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L312-L325` starting at line 312:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L312-L325\n#...\nclass CTkTabview(CTkBaseClass):\n    #...\n    def cget(self, attribute_name: str):\n        #...\n            return self._segmented_button.cget(attribute_name)\n        elif attribute_name == \"text_color_disabled\":\n            return self._segmented_button.cget(attribute_name)\n\n        elif attribute_name == \"command\":\n            return self._command\n        elif attribute_name == \"anchor\":\n            return self._anchor\n        elif attribute_name == \"state\":\n            return self._segmented_button.cget(attribute_name)\n\n        else:\n            return super().cget(attribute_name)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L243-L253` starting at line 243:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L243-L253\n#...\nclass CTkEntry(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n            self._update_font()\n\n        if \"show\" in kwargs:\n            if self._placeholder_text_active:\n                self._pre_placeholder_arguments[\"show\"] = kwargs.pop(\"show\")  # remember show argument for when placeholder gets deactivated\n            else:\n                self._entry.configure(show=kwargs.pop(\"show\"))\n\n        self._entry.configure(**pop_from_dict_by_set(kwargs, self._valid_tk_entry_attributes))  # configure Tkinter.Entry\n        super().configure(require_redraw=require_redraw, **kwargs)  # configure CTkBaseClass\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L231-L255` starting at line 231:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L231-L255\n#...\nclass CTkRadioButton(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n            self._text = kwargs.pop(\"text\")\n            self._text_label.configure(text=self._text)\n\n        if \"font\" in kwargs:\n            if isinstance(self._font, CTkFont):\n                self._font.remove_size_configure_callback(self._update_font)\n            self._font = self._check_font_type(kwargs.pop(\"font\"))\n            if isinstance(self._font, CTkFont):\n                self._font.add_size_configure_callback(self._update_font)\n\n            self._update_font()\n\n        if \"state\" in kwargs:\n            self._state = kwargs.pop(\"state\")\n            self._set_cursor()\n            require_redraw = True\n\n        if \"fg_color\" in kwargs:\n            self._fg_color = self._check_color_type(kwargs.pop(\"fg_color\"))\n            require_redraw = True\n\n        if \"hover_color\" in kwargs:\n            self._hover_color = self._check_color_type(kwargs.pop(\"hover_color\"))\n            require_redraw = True\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L256-L280` starting at line 256:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L256-L280\n#...\nclass CTkRadioButton(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n        if \"text_color\" in kwargs:\n            self._text_color = self._check_color_type(kwargs.pop(\"text_color\"))\n            require_redraw = True\n\n        if \"text_color_disabled\" in kwargs:\n            self._text_color_disabled = self._check_color_type(kwargs.pop(\"text_color_disabled\"))\n            require_redraw = True\n\n        if \"border_color\" in kwargs:\n            self._border_color = self._check_color_type(kwargs.pop(\"border_color\"))\n            require_redraw = True\n\n        if \"hover\" in kwargs:\n            self._hover = kwargs.pop(\"hover\")\n\n        if \"command\" in kwargs:\n            self._command = kwargs.pop(\"command\")\n\n        if \"textvariable\" in kwargs:\n            self._textvariable = kwargs.pop(\"textvariable\")\n            self._text_label.configure(textvariable=self._textvariable)\n\n        if \"variable\" in kwargs:\n            if self._variable is not None:\n                #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L17-L35` starting at line 17:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L17-L35\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def __init__(self,\n                 master: Any,\n                 width: int = 100,\n                 height: int = 24,\n                 checkbox_width: int = 24,\n                 checkbox_height: int = 24,\n                 corner_radius: Optional[int] = None,\n                 border_width: Optional[int] = None,\n\n                 bg_color: Union[str, Tuple[str, str]] = \"transparent\",\n                 fg_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 hover_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 border_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 checkmark_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 text_color: Optional[Union[str, Tuple[str, str]]] = None,\n                 text_color_disabled: Optional[Union[str, Tuple[str, str]]] = None,\n\n                 text: str = \"CTkCheckBox\",\n                 #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L485-L498` starting at line 485:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L485-L498\n#...\nclass CTkButton(CTkBaseClass):\n    #...\n    def _set_cursor(self):\n        if self._cursor_manipulation_enabled:\n            if self._state == tkinter.DISABLED:\n                if sys.platform == \"darwin\" and self._command is not None:\n                    self.configure(cursor=\"arrow\")\n                elif sys.platform.startswith(\"win\") and self._command is not None:\n                    self.configure(cursor=\"arrow\")\n\n            elif self._state == tkinter.NORMAL:\n                if sys.platform == \"darwin\" and self._command is not None:\n                    self.configure(cursor=\"pointinghand\")\n                elif sys.platform.startswith(\"win\") and self._command is not None:\n                    self.configure(cursor=\"hand2\")\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L54-L66` starting at line 54:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L54-L66\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n        self._hover_color = ThemeManager.theme[\"CTkCheckBox\"][\"hover_color\"] if hover_color is None else self._check_color_type(hover_color)\n        self._border_color = ThemeManager.theme[\"CTkCheckBox\"][\"border_color\"] if border_color is None else self._check_color_type(border_color)\n        self._checkmark_color = ThemeManager.theme[\"CTkCheckBox\"][\"checkmark_color\"] if checkmark_color is None else self._check_color_type(checkmark_color)\n\n        # shape\n        self._corner_radius = ThemeManager.theme[\"CTkCheckBox\"][\"corner_radius\"] if corner_radius is None else corner_radius\n        self._border_width = ThemeManager.theme[\"CTkCheckBox\"][\"border_width\"] if border_width is None else border_width\n\n        # text\n        self._text = text\n        self._text_label: Union[tkinter.Label, None] = None\n        self._text_color = ThemeManager.theme[\"CTkCheckBox\"][\"text_color\"] if text_color is None else self._check_color_type(text_color)\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L35-L54` starting at line 35:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L35-L54\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n                 font: Optional[Union[tuple, CTkFont]] = None,\n                 textvariable: Union[tkinter.Variable, None] = None,\n                 state: str = tkinter.NORMAL,\n                 hover: bool = True,\n                 command: Union[Callable[[], Any], None] = None,\n                 onvalue: Union[int, str] = 1,\n                 offvalue: Union[int, str] = 0,\n                 variable: Union[tkinter.Variable, None] = None,\n                 **kwargs):\n\n        # transfer basic functionality (_bg_color, size, __appearance_mode, scaling) to CTkBaseClass\n        super().__init__(master=master, bg_color=bg_color, width=width, height=height, **kwargs)\n\n        # dimensions\n        self._checkbox_width = checkbox_width\n        self._checkbox_height = checkbox_height\n\n        # color\n        self._fg_color = ThemeManager.theme[\"CTkCheckBox\"][\"fg_color\"] if fg_color is None else self._check_color_type(fg_color)\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L77-L99` starting at line 77:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L77-L99\n#...\nclass CTkButton(CTkBaseClass):\n    #...\n            self._font.add_size_configure_callback(self._update_font)\n\n        # image\n        self._image = self._check_image_type(image)\n        self._image_label: Union[tkinter.Label, None] = None\n        if isinstance(self._image, CTkImage):\n            self._image.add_configure_callback(self._update_image)\n\n        # other\n        self._state: str = state\n        self._hover: bool = hover\n        self._command: Callable = command\n        self._compound: str = compound\n        self._anchor: str = anchor\n        self._click_animation_running: bool = False\n\n        # canvas and draw engine\n        self._canvas = CTkCanvas(master=self,\n                                 highlightthickness=0,\n                                 width=self._apply_widget_scaling(self._desired_width),\n                                 height=self._apply_widget_scaling(self._desired_height))\n        self._canvas.grid(row=0, column=0, rowspan=5, columnspan=5, sticky=\"nsew\")\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L64-L77` starting at line 64:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L64-L77\n#...\nclass CTkButton(CTkBaseClass):\n    #...\n        self._text_color_disabled: Union[str, Tuple[str, str]] = ThemeManager.theme[\"CTkButton\"][\"text_color_disabled\"] if text_color_disabled is None else self._check_color_type(text_color_disabled)\n\n        # rendering options\n        self._background_corner_colors: Union[Tuple[Union[str, Tuple[str, str]]], None] = background_corner_colors  # rendering options for DrawEngine\n        self._round_width_to_even_numbers: bool = round_width_to_even_numbers  # rendering options for DrawEngine\n        self._round_height_to_even_numbers: bool = round_height_to_even_numbers  # rendering options for DrawEngine\n\n        # text, font\n        self._text = text\n        self._text_label: Union[tkinter.Label, None] = None\n        self._textvariable: tkinter.Variable = textvariable\n        self._font: Union[tuple, CTkFont] = CTkFont() if font is None else self._check_font_type(font)\n        if isinstance(self._font, CTkFont):\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L283-L306` starting at line 283:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L283-L306\n#...\nclass CTkSwitch(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n        if \"font\" in kwargs:\n            if isinstance(self._font, CTkFont):\n                self._font.remove_size_configure_callback(self._update_font)\n            self._font = self._check_font_type(kwargs.pop(\"font\"))\n            if isinstance(self._font, CTkFont):\n                self._font.add_size_configure_callback(self._update_font)\n\n            self._update_font()\n\n        if \"state\" in kwargs:\n            self._state = kwargs.pop(\"state\")\n            self._set_cursor()\n            require_redraw = True\n\n        if \"fg_color\" in kwargs:\n            self._fg_color = self._check_color_type(kwargs.pop(\"fg_color\"))\n            require_redraw = True\n\n        if \"border_color\" in kwargs:\n            self._border_color = self._check_color_type(kwargs.pop(\"border_color\"), transparency=True)\n            require_redraw = True\n\n        if \"progress_color\" in kwargs:\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L352-L377` starting at line 352:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L352-L377\n#...\nclass CTkButton(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        if \"corner_radius\" in kwargs:\n            self._corner_radius = kwargs.pop(\"corner_radius\")\n            self._create_grid()\n            require_redraw = True\n\n        if \"border_width\" in kwargs:\n            self._border_width = kwargs.pop(\"border_width\")\n            self._create_grid()\n            require_redraw = True\n\n        if \"border_spacing\" in kwargs:\n            self._border_spacing = kwargs.pop(\"border_spacing\")\n            self._create_grid()\n            require_redraw = True\n\n        if \"fg_color\" in kwargs:\n            self._fg_color = self._check_color_type(kwargs.pop(\"fg_color\"), transparency=True)\n            require_redraw = True\n\n        if \"hover_color\" in kwargs:\n            self._hover_color = self._check_color_type(kwargs.pop(\"hover_color\"))\n            require_redraw = True\n\n        if \"border_color\" in kwargs:\n            self._border_color = self._check_color_type(kwargs.pop(\"border_color\"))\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L425-L442` starting at line 425:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L425-L442\n#...\nclass CTkButton(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n        if \"hover\" in kwargs:\n            self._hover = kwargs.pop(\"hover\")\n\n        if \"command\" in kwargs:\n            self._command = kwargs.pop(\"command\")\n            self._set_cursor()\n\n        if \"compound\" in kwargs:\n            self._compound = kwargs.pop(\"compound\")\n            require_redraw = True\n\n        if \"anchor\" in kwargs:\n            self._anchor = kwargs.pop(\"anchor\")\n            self._create_grid()\n            require_redraw = True\n\n        super().configure(require_redraw=require_redraw, **kwargs)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L306-L329` starting at line 306:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L306-L329\n#...\nclass CTkSwitch(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n            self._progress_color = self._check_color_type(kwargs.pop(\"progress_color\"), transparency=True)\n            require_redraw = True\n\n        if \"button_color\" in kwargs:\n            self._button_color = self._check_color_type(kwargs.pop(\"button_color\"))\n            require_redraw = True\n\n        if \"button_hover_color\" in kwargs:\n            self._button_hover_color = self._check_color_type(kwargs.pop(\"button_hover_color\"))\n            require_redraw = True\n\n        if \"text_color\" in kwargs:\n            self._text_color = self._check_color_type(kwargs.pop(\"text_color\"))\n            require_redraw = True\n\n        if \"text_color_disabled\" in kwargs:\n            self._text_color_disabled = self._check_color_type(kwargs.pop(\"text_color_disabled\"))\n            require_redraw = True\n\n        if \"hover\" in kwargs:\n            self._hover = kwargs.pop(\"hover\")\n\n        if \"command\" in kwargs:\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L425-L445` starting at line 425:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L425-L445\n#...\nclass CTkSwitch(CTkBaseClass):\n    #...\n    def deselect(self, from_variable_callback=False):\n        if self._state is not tkinter.DISABLED or from_variable_callback:\n            self._check_state = False\n\n            self._draw(no_color_updates=True)\n\n            if self._variable is not None and not from_variable_callback:\n                self._variable_callback_blocked = True\n                self._variable.set(self._offvalue)\n                self._variable_callback_blocked = False\n\n    def get(self) -> Union[int, str]:\n        return self._onvalue if self._check_state is True else self._offvalue\n\n    def _on_enter(self, event=0):\n        if self._hover is True and self._state == \"normal\":\n            self._hover_state = True\n            self._canvas.itemconfig(\"slider_parts\",\n                                    fill=self._apply_appearance_mode(self._button_hover_color),\n                                    outline=self._apply_appearance_mode(self._button_hover_color))\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L461-L469` starting at line 461:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L461-L469\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def focus(self):\n        return self._text_label.focus()\n\n    def focus_set(self):\n        return self._text_label.focus_set()\n\n    def focus_force(self):\n        return self._text_label.focus_force()\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L223-L247` starting at line 223:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L223-L247\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        if \"corner_radius\" in kwargs:\n            self._corner_radius = kwargs.pop(\"corner_radius\")\n            require_redraw = True\n\n        if \"border_width\" in kwargs:\n            self._border_width = kwargs.pop(\"border_width\")\n            require_redraw = True\n\n        if \"checkbox_width\" in kwargs:\n            self._checkbox_width = kwargs.pop(\"checkbox_width\")\n            self._canvas.configure(width=self._apply_widget_scaling(self._checkbox_width))\n            require_redraw = True\n\n        if \"checkbox_height\" in kwargs:\n            self._checkbox_height = kwargs.pop(\"checkbox_height\")\n            self._canvas.configure(height=self._apply_widget_scaling(self._checkbox_height))\n            require_redraw = True\n\n        if \"text\" in kwargs:\n            self._text = kwargs.pop(\"text\")\n            self._text_label.configure(text=self._text)\n\n        if \"font\" in kwargs:\n            if isinstance(self._font, CTkFont):\n                #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L88-L110` starting at line 88:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L88-L110\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n        self.grid_columnconfigure(1, weight=0, minsize=self._apply_widget_scaling(6))\n        self.grid_columnconfigure(2, weight=1)\n        self.grid_rowconfigure(0, weight=1)\n\n        self._bg_canvas = CTkCanvas(master=self,\n                                    highlightthickness=0,\n                                    width=self._apply_widget_scaling(self._desired_width),\n                                    height=self._apply_widget_scaling(self._desired_height))\n        self._bg_canvas.grid(row=0, column=0, columnspan=3, sticky=\"nswe\")\n\n        self._canvas = CTkCanvas(master=self,\n                                 highlightthickness=0,\n                                 width=self._apply_widget_scaling(self._checkbox_width),\n                                 height=self._apply_widget_scaling(self._checkbox_height))\n        self._canvas.grid(row=0, column=0, sticky=\"e\")\n        self._draw_engine = DrawEngine(self._canvas)\n\n        self._text_label = tkinter.Label(master=self,\n                                         bd=0,\n                                         padx=0,\n                                         pady=0,\n                                         text=self._text,\n                                #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L166-L447` starting at line 166:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L166-L447\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def destroy(self):\n        #...\n    def _draw(self, no_color_updates=False):\n        #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n    def cget(self, attribute_name: str) -> any:\n        #...\n    def _set_cursor(self):\n        #...\n    def _on_enter(self, event=0):\n        #...\n    def _on_leave(self, event=0):\n        #...\n    def _variable_callback(self, var_name, index, mode):\n        #...\n    def toggle(self, event=0):\n        #...\n    def select(self, from_variable_callback=False):\n        #...\n    def deselect(self, from_variable_callback=False):\n        #...\n    def get(self) -> Union[int, str]:\n        #...\n    def bind(self, sequence: str = None, command: Callable = None, add: Union[str, bool] = True):\n        \"\"\" called on the tkinter.Canvas \"\"\"\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L211-L221` starting at line 211:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L211-L221\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def _draw(self, no_color_updates=False):\n        #...\n                self._canvas.itemconfig(\"border_parts\",\n                                        outline=self._apply_appearance_mode(self._border_color),\n                                        fill=self._apply_appearance_mode(self._border_color))\n\n            if self._state == tkinter.DISABLED:\n                self._text_label.configure(fg=(self._apply_appearance_mode(self._text_color_disabled)))\n            else:\n                self._text_label.configure(fg=self._apply_appearance_mode(self._text_color))\n\n            self._text_label.configure(bg=self._apply_appearance_mode(self._bg_color))\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L193-L211` starting at line 193:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L193-L211\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def _draw(self, no_color_updates=False):\n        #...\n            self._canvas.configure(bg=self._apply_appearance_mode(self._bg_color))\n\n            if self._check_state is True:\n                self._canvas.itemconfig(\"inner_parts\",\n                                        outline=self._apply_appearance_mode(self._fg_color),\n                                        fill=self._apply_appearance_mode(self._fg_color))\n                self._canvas.itemconfig(\"border_parts\",\n                                        outline=self._apply_appearance_mode(self._fg_color),\n                                        fill=self._apply_appearance_mode(self._fg_color))\n\n                if \"create_line\" in self._canvas.gettags(\"checkmark\"):\n                    self._canvas.itemconfig(\"checkmark\", fill=self._apply_appearance_mode(self._checkmark_color))\n                else:\n                    self._canvas.itemconfig(\"checkmark\", fill=self._apply_appearance_mode(self._checkmark_color))\n            else:\n                self._canvas.itemconfig(\"inner_parts\",\n                                        outline=self._apply_appearance_mode(self._bg_color),\n                                        fill=self._apply_appearance_mode(self._bg_color))\n                #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L471-L484` starting at line 471:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L471-L484\n#...\nclass CTkButton(CTkBaseClass):\n    #...\n    def cget(self, attribute_name: str) -> any:\n        #...\n            return self._image\n        elif attribute_name == \"state\":\n            return self._state\n        elif attribute_name == \"hover\":\n            return self._hover\n        elif attribute_name == \"command\":\n            return self._command\n        elif attribute_name == \"compound\":\n            return self._compound\n        elif attribute_name == \"anchor\":\n            return self._anchor\n        else:\n            return super().cget(attribute_name)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L377-L401` starting at line 377:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L377-L401\n#...\nclass CTkButton(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n            require_redraw = True\n\n        if \"text_color\" in kwargs:\n            self._text_color = self._check_color_type(kwargs.pop(\"text_color\"))\n            require_redraw = True\n\n        if \"text_color_disabled\" in kwargs:\n            self._text_color_disabled = self._check_color_type(kwargs.pop(\"text_color_disabled\"))\n            require_redraw = True\n\n        if \"background_corner_colors\" in kwargs:\n            self._background_corner_colors = kwargs.pop(\"background_corner_colors\")\n            require_redraw = True\n\n        if \"text\" in kwargs:\n            self._text = kwargs.pop(\"text\")\n            if self._text_label is None:\n                require_redraw = True  # text_label will be created in .draw()\n            else:\n                self._text_label.configure(text=self._text)\n\n        if \"font\" in kwargs:\n            if isinstance(self._font, CTkFont):\n                self._font.remove_size_configure_callback(self._update_font)\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L307-L334` starting at line 307:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L307-L334\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def cget(self, attribute_name: str) -> any:\n        if attribute_name == \"corner_radius\":\n            return self._corner_radius\n        elif attribute_name == \"border_width\":\n            return self._border_width\n        elif attribute_name == \"checkbox_width\":\n            return self._checkbox_width\n        elif attribute_name == \"checkbox_height\":\n            return self._checkbox_height\n\n        elif attribute_name == \"fg_color\":\n            return self._fg_color\n        elif attribute_name == \"hover_color\":\n            return self._hover_color\n        elif attribute_name == \"border_color\":\n            return self._border_color\n        elif attribute_name == \"checkmark_color\":\n            return self._checkmark_color\n        elif attribute_name == \"text_color\":\n            return self._text_color\n        elif attribute_name == \"text_color_disabled\":\n            return self._text_color_disabled\n\n        elif attribute_name == \"text\":\n            return self._text\n        elif attribute_name == \"font\":\n            return self._font\n        elif attribute_name == \"textvariable\":\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L400-L423` starting at line 400:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L400-L423\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def _variable_callback(self, var_name, index, mode):\n        if not self._variable_callback_blocked:\n            if self._variable.get() == self._onvalue:\n                self.select(from_variable_callback=True)\n            elif self._variable.get() == self._offvalue:\n                self.deselect(from_variable_callback=True)\n\n    def toggle(self, event=0):\n        if self._state == tkinter.NORMAL:\n            if self._check_state is True:\n                self._check_state = False\n                self._draw()\n            else:\n                self._check_state = True\n                self._draw()\n\n            if self._variable is not None:\n                self._variable_callback_blocked = True\n                self._variable.set(self._onvalue if self._check_state is True else self._offvalue)\n                self._variable_callback_blocked = False\n\n            if self._command is not None:\n                self._command()\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L424-L444` starting at line 424:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L424-L444\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def select(self, from_variable_callback=False):\n        self._check_state = True\n        self._draw()\n\n        if self._variable is not None and not from_variable_callback:\n            self._variable_callback_blocked = True\n            self._variable.set(self._onvalue)\n            self._variable_callback_blocked = False\n\n    def deselect(self, from_variable_callback=False):\n        self._check_state = False\n        self._draw()\n\n        if self._variable is not None and not from_variable_callback:\n            self._variable_callback_blocked = True\n            self._variable.set(self._offvalue)\n            self._variable_callback_blocked = False\n\n    def get(self) -> Union[int, str]:\n        return self._onvalue if self._check_state is True else self._offvalue\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L194-L218` starting at line 194:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L194-L218\n#...\nclass CTkEntry(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        if \"state\" in kwargs:\n            self._state = kwargs.pop(\"state\")\n            self._entry.configure(state=self._state)\n\n        if \"fg_color\" in kwargs:\n            self._fg_color = self._check_color_type(kwargs.pop(\"fg_color\"))\n            require_redraw = True\n\n        if \"text_color\" in kwargs:\n            self._text_color = self._check_color_type(kwargs.pop(\"text_color\"))\n            require_redraw = True\n\n        if \"placeholder_text_color\" in kwargs:\n            self._placeholder_text_color = self._check_color_type(kwargs.pop(\"placeholder_text_color\"))\n            require_redraw = True\n\n        if \"border_color\" in kwargs:\n            self._border_color = self._check_color_type(kwargs.pop(\"border_color\"))\n            require_redraw = True\n\n        if \"border_width\" in kwargs:\n            self._border_width = kwargs.pop(\"border_width\")\n            self._create_grid()\n            require_redraw = True\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L401-L424` starting at line 401:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L401-L424\n#...\nclass CTkButton(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n            self._font = self._check_font_type(kwargs.pop(\"font\"))\n            if isinstance(self._font, CTkFont):\n                self._font.add_size_configure_callback(self._update_font)\n\n            self._update_font()\n\n        if \"textvariable\" in kwargs:\n            self._textvariable = kwargs.pop(\"textvariable\")\n            if self._text_label is not None:\n                self._text_label.configure(textvariable=self._textvariable)\n\n        if \"image\" in kwargs:\n            if isinstance(self._image, CTkImage):\n                self._image.remove_configure_callback(self._update_image)\n            self._image = self._check_image_type(kwargs.pop(\"image\"))\n            if isinstance(self._image, CTkImage):\n                self._image.add_configure_callback(self._update_image)\n            self._update_image()\n\n        if \"state\" in kwargs:\n            self._state = kwargs.pop(\"state\")\n            self._set_cursor()\n            require_redraw = True\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L295-L305` starting at line 295:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L295-L305\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n                self._variable.trace_remove(\"write\", self._variable_callback_name)  # remove old variable callback\n\n            self._variable = kwargs.pop(\"variable\")\n\n            if self._variable is not None and self._variable != \"\":\n                self._variable_callback_name = self._variable.trace_add(\"write\", self._variable_callback)\n                self._check_state = True if self._variable.get() == self._onvalue else False\n                require_redraw = True\n\n        super().configure(require_redraw=require_redraw, **kwargs)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L110-L124` starting at line 110:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L110-L124\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n                                         justify=tkinter.LEFT,\n                                         font=self._apply_font_scaling(self._font),\n                                         textvariable=self._textvariable)\n        self._text_label.grid(row=0, column=2, sticky=\"w\")\n        self._text_label[\"anchor\"] = \"w\"\n\n        # register variable callback and set state according to variable\n        if self._variable is not None and self._variable != \"\":\n            self._variable_callback_name = self._variable.trace_add(\"write\", self._variable_callback)\n            self._check_state = True if self._variable.get() == self._onvalue else False\n\n        self._create_bindings()\n        self._set_cursor()\n        self._draw()\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L384-L399` starting at line 384:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L384-L399\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def _on_leave(self, event=0):\n        if self._check_state is True:\n            self._canvas.itemconfig(\"inner_parts\",\n                                    fill=self._apply_appearance_mode(self._fg_color),\n                                    outline=self._apply_appearance_mode(self._fg_color))\n            self._canvas.itemconfig(\"border_parts\",\n                                    fill=self._apply_appearance_mode(self._fg_color),\n                                    outline=self._apply_appearance_mode(self._fg_color))\n        else:\n            self._canvas.itemconfig(\"inner_parts\",\n                                    fill=self._apply_appearance_mode(self._bg_color),\n                                    outline=self._apply_appearance_mode(self._bg_color))\n            self._canvas.itemconfig(\"border_parts\",\n                                    fill=self._apply_appearance_mode(self._border_color),\n                                    outline=self._apply_appearance_mode(self._border_color))\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L272-L295` starting at line 272:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L272-L295\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n            self._checkmark_color = self._check_color_type(kwargs.pop(\"checkmark_color\"))\n            require_redraw = True\n\n        if \"text_color\" in kwargs:\n            self._text_color = self._check_color_type(kwargs.pop(\"text_color\"))\n            require_redraw = True\n\n        if \"text_color_disabled\" in kwargs:\n            self._text_color_disabled = self._check_color_type(kwargs.pop(\"text_color_disabled\"))\n            require_redraw = True\n\n        if \"hover\" in kwargs:\n            self._hover = kwargs.pop(\"hover\")\n\n        if \"command\" in kwargs:\n            self._command = kwargs.pop(\"command\")\n\n        if \"textvariable\" in kwargs:\n            self._textvariable = kwargs.pop(\"textvariable\")\n            self._text_label.configure(textvariable=self._textvariable)\n\n        if \"variable\" in kwargs:\n            if self._variable is not None and self._variable != \"\":\n                #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L247-L272` starting at line 247:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L247-L272\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def configure(self, require_redraw=False, **kwargs):\n        #...\n                self._font.remove_size_configure_callback(self._update_font)\n            self._font = self._check_font_type(kwargs.pop(\"font\"))\n            if isinstance(self._font, CTkFont):\n                self._font.add_size_configure_callback(self._update_font)\n\n            self._update_font()\n\n        if \"state\" in kwargs:\n            self._state = kwargs.pop(\"state\")\n            self._set_cursor()\n            require_redraw = True\n\n        if \"fg_color\" in kwargs:\n            self._fg_color = self._check_color_type(kwargs.pop(\"fg_color\"))\n            require_redraw = True\n\n        if \"hover_color\" in kwargs:\n            self._hover_color = self._check_color_type(kwargs.pop(\"hover_color\"))\n            require_redraw = True\n\n        if \"border_color\" in kwargs:\n            self._border_color = self._check_color_type(kwargs.pop(\"border_color\"))\n            require_redraw = True\n\n        if \"checkmark_color\" in kwargs:\n            #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L66-L88` starting at line 66:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L66-L88\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n        self._text_color_disabled = ThemeManager.theme[\"CTkCheckBox\"][\"text_color_disabled\"] if text_color_disabled is None else self._check_color_type(text_color_disabled)\n\n        # font\n        self._font = CTkFont() if font is None else self._check_font_type(font)\n        if isinstance(self._font, CTkFont):\n            self._font.add_size_configure_callback(self._update_font)\n\n        # callback and hover functionality\n        self._command = command\n        self._state = state\n        self._hover = hover\n        self._check_state = False\n\n        self._onvalue = onvalue\n        self._offvalue = offvalue\n        self._variable: tkinter.Variable = variable\n        self._variable_callback_blocked = False\n        self._textvariable: tkinter.Variable = textvariable\n        self._variable_callback_name = None\n\n        # configure grid system (1x3)\n        self.grid_columnconfigure(0, weight=0)\n        #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L348-L369` starting at line 348:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L348-L369\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def _set_cursor(self):\n        if self._cursor_manipulation_enabled:\n            if self._state == tkinter.DISABLED:\n                if sys.platform == \"darwin\":\n                    self._canvas.configure(cursor=\"arrow\")\n                    if self._text_label is not None:\n                        self._text_label.configure(cursor=\"arrow\")\n                elif sys.platform.startswith(\"win\"):\n                    self._canvas.configure(cursor=\"arrow\")\n                    if self._text_label is not None:\n                        self._text_label.configure(cursor=\"arrow\")\n\n            elif self._state == tkinter.NORMAL:\n                if sys.platform == \"darwin\":\n                    self._canvas.configure(cursor=\"pointinghand\")\n                    if self._text_label is not None:\n                        self._text_label.configure(cursor=\"pointinghand\")\n                elif sys.platform.startswith(\"win\"):\n                    self._canvas.configure(cursor=\"hand2\")\n                    if self._text_label is not None:\n                        self._text_label.configure(cursor=\"hand2\")\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L370-L383` starting at line 370:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L370-L383\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def _on_enter(self, event=0):\n        if self._hover is True and self._state == tkinter.NORMAL:\n            if self._check_state is True:\n                self._canvas.itemconfig(\"inner_parts\",\n                                        fill=self._apply_appearance_mode(self._hover_color),\n                                        outline=self._apply_appearance_mode(self._hover_color))\n                self._canvas.itemconfig(\"border_parts\",\n                                        fill=self._apply_appearance_mode(self._hover_color),\n                                        outline=self._apply_appearance_mode(self._hover_color))\n            else:\n                self._canvas.itemconfig(\"inner_parts\",\n                                        fill=self._apply_appearance_mode(self._hover_color),\n                                        outline=self._apply_appearance_mode(self._hover_color))\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            },
                            {
                              "type": 1,
                              "ctor": 2,
                              "ctorName": "Lee",
                              "children": [
                                {
                                  "type": 2,
                                  "priority": 9007199254740991,
                                  "text": "Here is a potentially relevant text excerpt in `https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L334-L347` starting at line 334:\n```py\n// filepath: https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L334-L347\n#...\nclass CTkCheckBox(CTkBaseClass):\n    #...\n    def cget(self, attribute_name: str) -> any:\n        #...\n            return self._textvariable\n        elif attribute_name == \"state\":\n            return self._state\n        elif attribute_name == \"hover\":\n            return self._hover\n        elif attribute_name == \"onvalue\":\n            return self._onvalue\n        elif attribute_name == \"offvalue\":\n            return self._offvalue\n        elif attribute_name == \"variable\":\n            return self._variable\n        else:\n            return super().cget(attribute_name)\n    #...\n```\n\n",
                                  "references": [],
                                  "lineBreakBefore": true
                                }
                              ],
                              "props": {},
                              "references": []
                            }
                          ],
                          "props": {},
                          "references": [
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L334-L347",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L334-L347"
                                },
                                "range": [
                                  {
                                    "line": 334,
                                    "character": 0
                                  },
                                  {
                                    "line": 347,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L370-L383",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L370-L383"
                                },
                                "range": [
                                  {
                                    "line": 370,
                                    "character": 0
                                  },
                                  {
                                    "line": 383,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L348-L369",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L348-L369"
                                },
                                "range": [
                                  {
                                    "line": 348,
                                    "character": 0
                                  },
                                  {
                                    "line": 369,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L66-L88",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L66-L88"
                                },
                                "range": [
                                  {
                                    "line": 66,
                                    "character": 0
                                  },
                                  {
                                    "line": 88,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L247-L272",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L247-L272"
                                },
                                "range": [
                                  {
                                    "line": 247,
                                    "character": 0
                                  },
                                  {
                                    "line": 272,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L272-L295",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L272-L295"
                                },
                                "range": [
                                  {
                                    "line": 272,
                                    "character": 0
                                  },
                                  {
                                    "line": 295,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L384-L399",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L384-L399"
                                },
                                "range": [
                                  {
                                    "line": 384,
                                    "character": 0
                                  },
                                  {
                                    "line": 399,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L110-L124",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L110-L124"
                                },
                                "range": [
                                  {
                                    "line": 110,
                                    "character": 0
                                  },
                                  {
                                    "line": 124,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L295-L305",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L295-L305"
                                },
                                "range": [
                                  {
                                    "line": 295,
                                    "character": 0
                                  },
                                  {
                                    "line": 305,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L401-L424",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L401-L424"
                                },
                                "range": [
                                  {
                                    "line": 401,
                                    "character": 0
                                  },
                                  {
                                    "line": 424,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L194-L218",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L194-L218"
                                },
                                "range": [
                                  {
                                    "line": 194,
                                    "character": 0
                                  },
                                  {
                                    "line": 218,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L424-L444",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L424-L444"
                                },
                                "range": [
                                  {
                                    "line": 424,
                                    "character": 0
                                  },
                                  {
                                    "line": 444,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L400-L423",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L400-L423"
                                },
                                "range": [
                                  {
                                    "line": 400,
                                    "character": 0
                                  },
                                  {
                                    "line": 423,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L307-L334",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L307-L334"
                                },
                                "range": [
                                  {
                                    "line": 307,
                                    "character": 0
                                  },
                                  {
                                    "line": 334,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L377-L401",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L377-L401"
                                },
                                "range": [
                                  {
                                    "line": 377,
                                    "character": 0
                                  },
                                  {
                                    "line": 401,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L471-L484",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L471-L484"
                                },
                                "range": [
                                  {
                                    "line": 471,
                                    "character": 0
                                  },
                                  {
                                    "line": 484,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L193-L211",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L193-L211"
                                },
                                "range": [
                                  {
                                    "line": 193,
                                    "character": 0
                                  },
                                  {
                                    "line": 211,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L211-L221",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L211-L221"
                                },
                                "range": [
                                  {
                                    "line": 211,
                                    "character": 0
                                  },
                                  {
                                    "line": 221,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L166-L447",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L166-L447"
                                },
                                "range": [
                                  {
                                    "line": 166,
                                    "character": 0
                                  },
                                  {
                                    "line": 447,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L88-L110",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L88-L110"
                                },
                                "range": [
                                  {
                                    "line": 88,
                                    "character": 0
                                  },
                                  {
                                    "line": 110,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L223-L247",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L223-L247"
                                },
                                "range": [
                                  {
                                    "line": 223,
                                    "character": 0
                                  },
                                  {
                                    "line": 247,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L461-L469",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L461-L469"
                                },
                                "range": [
                                  {
                                    "line": 461,
                                    "character": 0
                                  },
                                  {
                                    "line": 469,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L425-L445",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L425-L445"
                                },
                                "range": [
                                  {
                                    "line": 425,
                                    "character": 0
                                  },
                                  {
                                    "line": 445,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L306-L329",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L306-L329"
                                },
                                "range": [
                                  {
                                    "line": 306,
                                    "character": 0
                                  },
                                  {
                                    "line": 329,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L425-L442",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L425-L442"
                                },
                                "range": [
                                  {
                                    "line": 425,
                                    "character": 0
                                  },
                                  {
                                    "line": 442,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L352-L377",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L352-L377"
                                },
                                "range": [
                                  {
                                    "line": 352,
                                    "character": 0
                                  },
                                  {
                                    "line": 377,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L283-L306",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L283-L306"
                                },
                                "range": [
                                  {
                                    "line": 283,
                                    "character": 0
                                  },
                                  {
                                    "line": 306,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L64-L77",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L64-L77"
                                },
                                "range": [
                                  {
                                    "line": 64,
                                    "character": 0
                                  },
                                  {
                                    "line": 77,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L77-L99",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L77-L99"
                                },
                                "range": [
                                  {
                                    "line": 77,
                                    "character": 0
                                  },
                                  {
                                    "line": 99,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L35-L54",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L35-L54"
                                },
                                "range": [
                                  {
                                    "line": 35,
                                    "character": 0
                                  },
                                  {
                                    "line": 54,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L54-L66",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L54-L66"
                                },
                                "range": [
                                  {
                                    "line": 54,
                                    "character": 0
                                  },
                                  {
                                    "line": 66,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L485-L498",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L485-L498"
                                },
                                "range": [
                                  {
                                    "line": 485,
                                    "character": 0
                                  },
                                  {
                                    "line": 498,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L17-L35",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L17-L35"
                                },
                                "range": [
                                  {
                                    "line": 17,
                                    "character": 0
                                  },
                                  {
                                    "line": 35,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L256-L280",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L256-L280"
                                },
                                "range": [
                                  {
                                    "line": 256,
                                    "character": 0
                                  },
                                  {
                                    "line": 280,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L231-L255",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L231-L255"
                                },
                                "range": [
                                  {
                                    "line": 231,
                                    "character": 0
                                  },
                                  {
                                    "line": 255,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L243-L253",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L243-L253"
                                },
                                "range": [
                                  {
                                    "line": 243,
                                    "character": 0
                                  },
                                  {
                                    "line": 253,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L312-L325",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L312-L325"
                                },
                                "range": [
                                  {
                                    "line": 312,
                                    "character": 0
                                  },
                                  {
                                    "line": 325,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L356-L378",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L356-L378"
                                },
                                "range": [
                                  {
                                    "line": 356,
                                    "character": 0
                                  },
                                  {
                                    "line": 378,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L176-L193",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L176-L193"
                                },
                                "range": [
                                  {
                                    "line": 176,
                                    "character": 0
                                  },
                                  {
                                    "line": 193,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L125-L136",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L125-L136"
                                },
                                "range": [
                                  {
                                    "line": 125,
                                    "character": 0
                                  },
                                  {
                                    "line": 136,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L375-L396",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L375-L396"
                                },
                                "range": [
                                  {
                                    "line": 375,
                                    "character": 0
                                  },
                                  {
                                    "line": 396,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L219-L242",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L219-L242"
                                },
                                "range": [
                                  {
                                    "line": 219,
                                    "character": 0
                                  },
                                  {
                                    "line": 242,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L397-L424",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L397-L424"
                                },
                                "range": [
                                  {
                                    "line": 397,
                                    "character": 0
                                  },
                                  {
                                    "line": 424,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L266-L278",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L266-L278"
                                },
                                "range": [
                                  {
                                    "line": 266,
                                    "character": 0
                                  },
                                  {
                                    "line": 278,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L65-L85",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L65-L85"
                                },
                                "range": [
                                  {
                                    "line": 65,
                                    "character": 0
                                  },
                                  {
                                    "line": 85,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L346-L383",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L346-L383"
                                },
                                "range": [
                                  {
                                    "line": 346,
                                    "character": 0
                                  },
                                  {
                                    "line": 383,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L444-L471",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L444-L471"
                                },
                                "range": [
                                  {
                                    "line": 444,
                                    "character": 0
                                  },
                                  {
                                    "line": 471,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L329-L347",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L329-L347"
                                },
                                "range": [
                                  {
                                    "line": 329,
                                    "character": 0
                                  },
                                  {
                                    "line": 347,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_segmented_button.py#L341-L357",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_segmented_button.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L341-L357"
                                },
                                "range": [
                                  {
                                    "line": 341,
                                    "character": 0
                                  },
                                  {
                                    "line": 357,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L280-L290",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L280-L290"
                                },
                                "range": [
                                  {
                                    "line": 280,
                                    "character": 0
                                  },
                                  {
                                    "line": 290,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L63-L84",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L63-L84"
                                },
                                "range": [
                                  {
                                    "line": 63,
                                    "character": 0
                                  },
                                  {
                                    "line": 84,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L379-L405",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L379-L405"
                                },
                                "range": [
                                  {
                                    "line": 379,
                                    "character": 0
                                  },
                                  {
                                    "line": 405,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L170-L187",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L170-L187"
                                },
                                "range": [
                                  {
                                    "line": 170,
                                    "character": 0
                                  },
                                  {
                                    "line": 187,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L349-L374",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L349-L374"
                                },
                                "range": [
                                  {
                                    "line": 349,
                                    "character": 0
                                  },
                                  {
                                    "line": 374,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L519-L543",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L519-L543"
                                },
                                "range": [
                                  {
                                    "line": 519,
                                    "character": 0
                                  },
                                  {
                                    "line": 543,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py#L34-L158",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_checkbox.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L34-L158"
                                },
                                "range": [
                                  {
                                    "line": 34,
                                    "character": 0
                                  },
                                  {
                                    "line": 158,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L334-L355",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L334-L355"
                                },
                                "range": [
                                  {
                                    "line": 334,
                                    "character": 0
                                  },
                                  {
                                    "line": 355,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py#L278-L290",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_tabview.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L278-L290"
                                },
                                "range": [
                                  {
                                    "line": 278,
                                    "character": 0
                                  },
                                  {
                                    "line": 290,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py#L318-L333",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_radiobutton.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L318-L333"
                                },
                                "range": [
                                  {
                                    "line": 318,
                                    "character": 0
                                  },
                                  {
                                    "line": 333,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L34-L55",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L34-L55"
                                },
                                "range": [
                                  {
                                    "line": 34,
                                    "character": 0
                                  },
                                  {
                                    "line": 55,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py#L308-L331",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_entry.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L308-L331"
                                },
                                "range": [
                                  {
                                    "line": 308,
                                    "character": 0
                                  },
                                  {
                                    "line": 331,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L55-L62",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L55-L62"
                                },
                                "range": [
                                  {
                                    "line": 55,
                                    "character": 0
                                  },
                                  {
                                    "line": 62,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py#L257-L282",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_switch.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L257-L282"
                                },
                                "range": [
                                  {
                                    "line": 257,
                                    "character": 0
                                  },
                                  {
                                    "line": 282,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            },
                            {
                              "anchor": {
                                "uri": {
                                  "$mid": 1,
                                  "external": "https://github.com/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py#L266-L284",
                                  "path": "/tomschimansky/customtkinter/tree/main/customtkinter/windows/widgets/ctk_button.py",
                                  "scheme": "https",
                                  "authority": "github.com",
                                  "fragment": "L266-L284"
                                },
                                "range": [
                                  {
                                    "line": 266,
                                    "character": 0
                                  },
                                  {
                                    "line": 284,
                                    "character": 0
                                  }
                                ]
                              },
                              "options": {
                                "isFromTool": true
                              }
                            }
                          ]
                        }
                      ],
                      "props": {},
                      "references": []
                    }
                  }
                }
              ]
            }
          },
          "modelMessageId": "11642fd7-e7cc-4586-b9ae-ca9674ebeef3",
          "responseId": "ca7dcace-f070-4ccd-92c6-8fd21d436c90",
          "sessionId": "d0b79f6a-4104-4a90-b0bd-bbcad6f76644",
          "agentId": "github.copilot.editsAgent"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editsAgent",
        "description": "Edición de archivos en el área de trabajo en modo agente",
        "when": "config.chat.agent.enabled",
        "metadata": {
          "themeIcon": {
            "id": "tools"
          },
          "hasFollowups": false,
          "supportIssueReporting": false
        },
        "name": "agent",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "locations": [
          "panel"
        ],
        "modes": [
          "agent"
        ],
        "slashCommands": [
          {
            "name": "list"
          }
        ],
        "disambiguation": []
      },
      "contentReferences": [],
      "codeCitations": [],
      "timestamp": 1754514265833,
      "modelId": "github.copilot-chat/claude-sonnet-4"
    }
  ]
}